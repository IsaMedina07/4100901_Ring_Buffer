
4100901_Ring_Buffer.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005330  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000678  080054b8  080054b8  000064b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005b30  08005b30  00007038  2**0
                  CONTENTS
  4 .ARM          00000008  08005b30  08005b30  00006b30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005b38  08005b38  00007038  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005b38  08005b38  00006b38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005b3c  08005b3c  00006b3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000038  20000000  08005b40  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005b8  20000038  08005b78  00007038  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200005f0  08005b78  000075f0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007038  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011bc3  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002d36  00000000  00000000  00018c2b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f68  00000000  00000000  0001b968  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bda  00000000  00000000  0001c8d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026565  00000000  00000000  0001d4aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000142ca  00000000  00000000  00043a0f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000eb7b2  00000000  00000000  00057cd9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0014348b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003f0c  00000000  00000000  001434d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001473dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000038 	.word	0x20000038
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080054a0 	.word	0x080054a0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000003c 	.word	0x2000003c
 80001c4:	080054a0 	.word	0x080054a0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96a 	b.w	80004b4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	460c      	mov	r4, r1
 8000200:	2b00      	cmp	r3, #0
 8000202:	d14e      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000204:	4694      	mov	ip, r2
 8000206:	458c      	cmp	ip, r1
 8000208:	4686      	mov	lr, r0
 800020a:	fab2 f282 	clz	r2, r2
 800020e:	d962      	bls.n	80002d6 <__udivmoddi4+0xde>
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0320 	rsb	r3, r2, #32
 8000216:	4091      	lsls	r1, r2
 8000218:	fa20 f303 	lsr.w	r3, r0, r3
 800021c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000220:	4319      	orrs	r1, r3
 8000222:	fa00 fe02 	lsl.w	lr, r0, r2
 8000226:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800022a:	fa1f f68c 	uxth.w	r6, ip
 800022e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000232:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000236:	fb07 1114 	mls	r1, r7, r4, r1
 800023a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023e:	fb04 f106 	mul.w	r1, r4, r6
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f104 30ff 	add.w	r0, r4, #4294967295
 800024e:	f080 8112 	bcs.w	8000476 <__udivmoddi4+0x27e>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 810f 	bls.w	8000476 <__udivmoddi4+0x27e>
 8000258:	3c02      	subs	r4, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a59      	subs	r1, r3, r1
 800025e:	fa1f f38e 	uxth.w	r3, lr
 8000262:	fbb1 f0f7 	udiv	r0, r1, r7
 8000266:	fb07 1110 	mls	r1, r7, r0, r1
 800026a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800026e:	fb00 f606 	mul.w	r6, r0, r6
 8000272:	429e      	cmp	r6, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x94>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f100 31ff 	add.w	r1, r0, #4294967295
 800027e:	f080 80fc 	bcs.w	800047a <__udivmoddi4+0x282>
 8000282:	429e      	cmp	r6, r3
 8000284:	f240 80f9 	bls.w	800047a <__udivmoddi4+0x282>
 8000288:	4463      	add	r3, ip
 800028a:	3802      	subs	r0, #2
 800028c:	1b9b      	subs	r3, r3, r6
 800028e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000292:	2100      	movs	r1, #0
 8000294:	b11d      	cbz	r5, 800029e <__udivmoddi4+0xa6>
 8000296:	40d3      	lsrs	r3, r2
 8000298:	2200      	movs	r2, #0
 800029a:	e9c5 3200 	strd	r3, r2, [r5]
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d905      	bls.n	80002b2 <__udivmoddi4+0xba>
 80002a6:	b10d      	cbz	r5, 80002ac <__udivmoddi4+0xb4>
 80002a8:	e9c5 0100 	strd	r0, r1, [r5]
 80002ac:	2100      	movs	r1, #0
 80002ae:	4608      	mov	r0, r1
 80002b0:	e7f5      	b.n	800029e <__udivmoddi4+0xa6>
 80002b2:	fab3 f183 	clz	r1, r3
 80002b6:	2900      	cmp	r1, #0
 80002b8:	d146      	bne.n	8000348 <__udivmoddi4+0x150>
 80002ba:	42a3      	cmp	r3, r4
 80002bc:	d302      	bcc.n	80002c4 <__udivmoddi4+0xcc>
 80002be:	4290      	cmp	r0, r2
 80002c0:	f0c0 80f0 	bcc.w	80004a4 <__udivmoddi4+0x2ac>
 80002c4:	1a86      	subs	r6, r0, r2
 80002c6:	eb64 0303 	sbc.w	r3, r4, r3
 80002ca:	2001      	movs	r0, #1
 80002cc:	2d00      	cmp	r5, #0
 80002ce:	d0e6      	beq.n	800029e <__udivmoddi4+0xa6>
 80002d0:	e9c5 6300 	strd	r6, r3, [r5]
 80002d4:	e7e3      	b.n	800029e <__udivmoddi4+0xa6>
 80002d6:	2a00      	cmp	r2, #0
 80002d8:	f040 8090 	bne.w	80003fc <__udivmoddi4+0x204>
 80002dc:	eba1 040c 	sub.w	r4, r1, ip
 80002e0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002e4:	fa1f f78c 	uxth.w	r7, ip
 80002e8:	2101      	movs	r1, #1
 80002ea:	fbb4 f6f8 	udiv	r6, r4, r8
 80002ee:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002f2:	fb08 4416 	mls	r4, r8, r6, r4
 80002f6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002fa:	fb07 f006 	mul.w	r0, r7, r6
 80002fe:	4298      	cmp	r0, r3
 8000300:	d908      	bls.n	8000314 <__udivmoddi4+0x11c>
 8000302:	eb1c 0303 	adds.w	r3, ip, r3
 8000306:	f106 34ff 	add.w	r4, r6, #4294967295
 800030a:	d202      	bcs.n	8000312 <__udivmoddi4+0x11a>
 800030c:	4298      	cmp	r0, r3
 800030e:	f200 80cd 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 8000312:	4626      	mov	r6, r4
 8000314:	1a1c      	subs	r4, r3, r0
 8000316:	fa1f f38e 	uxth.w	r3, lr
 800031a:	fbb4 f0f8 	udiv	r0, r4, r8
 800031e:	fb08 4410 	mls	r4, r8, r0, r4
 8000322:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000326:	fb00 f707 	mul.w	r7, r0, r7
 800032a:	429f      	cmp	r7, r3
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x148>
 800032e:	eb1c 0303 	adds.w	r3, ip, r3
 8000332:	f100 34ff 	add.w	r4, r0, #4294967295
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x146>
 8000338:	429f      	cmp	r7, r3
 800033a:	f200 80b0 	bhi.w	800049e <__udivmoddi4+0x2a6>
 800033e:	4620      	mov	r0, r4
 8000340:	1bdb      	subs	r3, r3, r7
 8000342:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000346:	e7a5      	b.n	8000294 <__udivmoddi4+0x9c>
 8000348:	f1c1 0620 	rsb	r6, r1, #32
 800034c:	408b      	lsls	r3, r1
 800034e:	fa22 f706 	lsr.w	r7, r2, r6
 8000352:	431f      	orrs	r7, r3
 8000354:	fa20 fc06 	lsr.w	ip, r0, r6
 8000358:	fa04 f301 	lsl.w	r3, r4, r1
 800035c:	ea43 030c 	orr.w	r3, r3, ip
 8000360:	40f4      	lsrs	r4, r6
 8000362:	fa00 f801 	lsl.w	r8, r0, r1
 8000366:	0c38      	lsrs	r0, r7, #16
 8000368:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800036c:	fbb4 fef0 	udiv	lr, r4, r0
 8000370:	fa1f fc87 	uxth.w	ip, r7
 8000374:	fb00 441e 	mls	r4, r0, lr, r4
 8000378:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800037c:	fb0e f90c 	mul.w	r9, lr, ip
 8000380:	45a1      	cmp	r9, r4
 8000382:	fa02 f201 	lsl.w	r2, r2, r1
 8000386:	d90a      	bls.n	800039e <__udivmoddi4+0x1a6>
 8000388:	193c      	adds	r4, r7, r4
 800038a:	f10e 3aff 	add.w	sl, lr, #4294967295
 800038e:	f080 8084 	bcs.w	800049a <__udivmoddi4+0x2a2>
 8000392:	45a1      	cmp	r9, r4
 8000394:	f240 8081 	bls.w	800049a <__udivmoddi4+0x2a2>
 8000398:	f1ae 0e02 	sub.w	lr, lr, #2
 800039c:	443c      	add	r4, r7
 800039e:	eba4 0409 	sub.w	r4, r4, r9
 80003a2:	fa1f f983 	uxth.w	r9, r3
 80003a6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003aa:	fb00 4413 	mls	r4, r0, r3, r4
 80003ae:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003b2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003b6:	45a4      	cmp	ip, r4
 80003b8:	d907      	bls.n	80003ca <__udivmoddi4+0x1d2>
 80003ba:	193c      	adds	r4, r7, r4
 80003bc:	f103 30ff 	add.w	r0, r3, #4294967295
 80003c0:	d267      	bcs.n	8000492 <__udivmoddi4+0x29a>
 80003c2:	45a4      	cmp	ip, r4
 80003c4:	d965      	bls.n	8000492 <__udivmoddi4+0x29a>
 80003c6:	3b02      	subs	r3, #2
 80003c8:	443c      	add	r4, r7
 80003ca:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003ce:	fba0 9302 	umull	r9, r3, r0, r2
 80003d2:	eba4 040c 	sub.w	r4, r4, ip
 80003d6:	429c      	cmp	r4, r3
 80003d8:	46ce      	mov	lr, r9
 80003da:	469c      	mov	ip, r3
 80003dc:	d351      	bcc.n	8000482 <__udivmoddi4+0x28a>
 80003de:	d04e      	beq.n	800047e <__udivmoddi4+0x286>
 80003e0:	b155      	cbz	r5, 80003f8 <__udivmoddi4+0x200>
 80003e2:	ebb8 030e 	subs.w	r3, r8, lr
 80003e6:	eb64 040c 	sbc.w	r4, r4, ip
 80003ea:	fa04 f606 	lsl.w	r6, r4, r6
 80003ee:	40cb      	lsrs	r3, r1
 80003f0:	431e      	orrs	r6, r3
 80003f2:	40cc      	lsrs	r4, r1
 80003f4:	e9c5 6400 	strd	r6, r4, [r5]
 80003f8:	2100      	movs	r1, #0
 80003fa:	e750      	b.n	800029e <__udivmoddi4+0xa6>
 80003fc:	f1c2 0320 	rsb	r3, r2, #32
 8000400:	fa20 f103 	lsr.w	r1, r0, r3
 8000404:	fa0c fc02 	lsl.w	ip, ip, r2
 8000408:	fa24 f303 	lsr.w	r3, r4, r3
 800040c:	4094      	lsls	r4, r2
 800040e:	430c      	orrs	r4, r1
 8000410:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000414:	fa00 fe02 	lsl.w	lr, r0, r2
 8000418:	fa1f f78c 	uxth.w	r7, ip
 800041c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000420:	fb08 3110 	mls	r1, r8, r0, r3
 8000424:	0c23      	lsrs	r3, r4, #16
 8000426:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800042a:	fb00 f107 	mul.w	r1, r0, r7
 800042e:	4299      	cmp	r1, r3
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x24c>
 8000432:	eb1c 0303 	adds.w	r3, ip, r3
 8000436:	f100 36ff 	add.w	r6, r0, #4294967295
 800043a:	d22c      	bcs.n	8000496 <__udivmoddi4+0x29e>
 800043c:	4299      	cmp	r1, r3
 800043e:	d92a      	bls.n	8000496 <__udivmoddi4+0x29e>
 8000440:	3802      	subs	r0, #2
 8000442:	4463      	add	r3, ip
 8000444:	1a5b      	subs	r3, r3, r1
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb3 f1f8 	udiv	r1, r3, r8
 800044c:	fb08 3311 	mls	r3, r8, r1, r3
 8000450:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000454:	fb01 f307 	mul.w	r3, r1, r7
 8000458:	42a3      	cmp	r3, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x276>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f101 36ff 	add.w	r6, r1, #4294967295
 8000464:	d213      	bcs.n	800048e <__udivmoddi4+0x296>
 8000466:	42a3      	cmp	r3, r4
 8000468:	d911      	bls.n	800048e <__udivmoddi4+0x296>
 800046a:	3902      	subs	r1, #2
 800046c:	4464      	add	r4, ip
 800046e:	1ae4      	subs	r4, r4, r3
 8000470:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000474:	e739      	b.n	80002ea <__udivmoddi4+0xf2>
 8000476:	4604      	mov	r4, r0
 8000478:	e6f0      	b.n	800025c <__udivmoddi4+0x64>
 800047a:	4608      	mov	r0, r1
 800047c:	e706      	b.n	800028c <__udivmoddi4+0x94>
 800047e:	45c8      	cmp	r8, r9
 8000480:	d2ae      	bcs.n	80003e0 <__udivmoddi4+0x1e8>
 8000482:	ebb9 0e02 	subs.w	lr, r9, r2
 8000486:	eb63 0c07 	sbc.w	ip, r3, r7
 800048a:	3801      	subs	r0, #1
 800048c:	e7a8      	b.n	80003e0 <__udivmoddi4+0x1e8>
 800048e:	4631      	mov	r1, r6
 8000490:	e7ed      	b.n	800046e <__udivmoddi4+0x276>
 8000492:	4603      	mov	r3, r0
 8000494:	e799      	b.n	80003ca <__udivmoddi4+0x1d2>
 8000496:	4630      	mov	r0, r6
 8000498:	e7d4      	b.n	8000444 <__udivmoddi4+0x24c>
 800049a:	46d6      	mov	lr, sl
 800049c:	e77f      	b.n	800039e <__udivmoddi4+0x1a6>
 800049e:	4463      	add	r3, ip
 80004a0:	3802      	subs	r0, #2
 80004a2:	e74d      	b.n	8000340 <__udivmoddi4+0x148>
 80004a4:	4606      	mov	r6, r0
 80004a6:	4623      	mov	r3, r4
 80004a8:	4608      	mov	r0, r1
 80004aa:	e70f      	b.n	80002cc <__udivmoddi4+0xd4>
 80004ac:	3e02      	subs	r6, #2
 80004ae:	4463      	add	r3, ip
 80004b0:	e730      	b.n	8000314 <__udivmoddi4+0x11c>
 80004b2:	bf00      	nop

080004b4 <__aeabi_idiv0>:
 80004b4:	4770      	bx	lr
 80004b6:	bf00      	nop

080004b8 <HAL_UART_RxCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart){
 80004b8:	b580      	push	{r7, lr}
 80004ba:	b082      	sub	sp, #8
 80004bc:	af00      	add	r7, sp, #0
 80004be:	6078      	str	r0, [r7, #4]
	if (huart -> Instance == USART1) {
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	681b      	ldr	r3, [r3, #0]
 80004c4:	4a10      	ldr	r2, [pc, #64]	@ (8000508 <HAL_UART_RxCpltCallback+0x50>)
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d10a      	bne.n	80004e0 <HAL_UART_RxCpltCallback+0x28>
		//HAL_UART_Transmit(&huart2, data, 1, 10);
		ring_buffer_write(&rb_usart1, data_1);
 80004ca:	4b10      	ldr	r3, [pc, #64]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004cc:	781b      	ldrb	r3, [r3, #0]
 80004ce:	4619      	mov	r1, r3
 80004d0:	480f      	ldr	r0, [pc, #60]	@ (8000510 <HAL_UART_RxCpltCallback+0x58>)
 80004d2:	f000 fa83 	bl	80009dc <ring_buffer_write>
		HAL_UART_Receive_IT(&huart1, &data_1, 1);
 80004d6:	2201      	movs	r2, #1
 80004d8:	490c      	ldr	r1, [pc, #48]	@ (800050c <HAL_UART_RxCpltCallback+0x54>)
 80004da:	480e      	ldr	r0, [pc, #56]	@ (8000514 <HAL_UART_RxCpltCallback+0x5c>)
 80004dc:	f003 fb2e 	bl	8003b3c <HAL_UART_Receive_IT>
	}

	if (huart -> Instance == USART2) {
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	681b      	ldr	r3, [r3, #0]
 80004e4:	4a0c      	ldr	r2, [pc, #48]	@ (8000518 <HAL_UART_RxCpltCallback+0x60>)
 80004e6:	4293      	cmp	r3, r2
 80004e8:	d10a      	bne.n	8000500 <HAL_UART_RxCpltCallback+0x48>
			//HAL_UART_Transmit(&huart2, data, 1, 10);
			ring_buffer_write(&rb_usart2, data_2);
 80004ea:	4b0c      	ldr	r3, [pc, #48]	@ (800051c <HAL_UART_RxCpltCallback+0x64>)
 80004ec:	781b      	ldrb	r3, [r3, #0]
 80004ee:	4619      	mov	r1, r3
 80004f0:	480b      	ldr	r0, [pc, #44]	@ (8000520 <HAL_UART_RxCpltCallback+0x68>)
 80004f2:	f000 fa73 	bl	80009dc <ring_buffer_write>
			HAL_UART_Receive_IT(&huart2, &data_2, 1);
 80004f6:	2201      	movs	r2, #1
 80004f8:	4908      	ldr	r1, [pc, #32]	@ (800051c <HAL_UART_RxCpltCallback+0x64>)
 80004fa:	480a      	ldr	r0, [pc, #40]	@ (8000524 <HAL_UART_RxCpltCallback+0x6c>)
 80004fc:	f003 fb1e 	bl	8003b3c <HAL_UART_Receive_IT>
		}


}
 8000500:	bf00      	nop
 8000502:	3708      	adds	r7, #8
 8000504:	46bd      	mov	sp, r7
 8000506:	bd80      	pop	{r7, pc}
 8000508:	40013800 	.word	0x40013800
 800050c:	200001b8 	.word	0x200001b8
 8000510:	200001bc 	.word	0x200001bc
 8000514:	200000a8 	.word	0x200000a8
 8000518:	40004400 	.word	0x40004400
 800051c:	200001b9 	.word	0x200001b9
 8000520:	200001c4 	.word	0x200001c4
 8000524:	20000130 	.word	0x20000130

08000528 <HAL_GPIO_EXTI_Callback>:

// CLASE 12/08/2024
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin) {
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]

}
 8000532:	bf00      	nop
 8000534:	370c      	adds	r7, #12
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000540:	b580      	push	{r7, lr}
 8000542:	b08a      	sub	sp, #40	@ 0x28
 8000544:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000546:	f000 fd02 	bl	8000f4e <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800054a:	f000 f8c9 	bl	80006e0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800054e:	f000 f9b9 	bl	80008c4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000552:	f000 f987 	bl	8000864 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000556:	f000 f955 	bl	8000804 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800055a:	f000 f913 	bl	8000784 <MX_I2C1_Init>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  ring_buffer_init(&rb_usart2, mem_usart2, 10);
 800055e:	220a      	movs	r2, #10
 8000560:	4952      	ldr	r1, [pc, #328]	@ (80006ac <main+0x16c>)
 8000562:	4853      	ldr	r0, [pc, #332]	@ (80006b0 <main+0x170>)
 8000564:	f000 fa26 	bl	80009b4 <ring_buffer_init>
  ring_buffer_init(&rb_usart1, mem_usart1, 10);
 8000568:	220a      	movs	r2, #10
 800056a:	4952      	ldr	r1, [pc, #328]	@ (80006b4 <main+0x174>)
 800056c:	4852      	ldr	r0, [pc, #328]	@ (80006b8 <main+0x178>)
 800056e:	f000 fa21 	bl	80009b4 <ring_buffer_init>

  /*HAL_UART_Receive_IT(&huart, pData, Size)*/
  HAL_UART_Receive_IT(&huart1, &data_1, 1);
 8000572:	2201      	movs	r2, #1
 8000574:	4951      	ldr	r1, [pc, #324]	@ (80006bc <main+0x17c>)
 8000576:	4852      	ldr	r0, [pc, #328]	@ (80006c0 <main+0x180>)
 8000578:	f003 fae0 	bl	8003b3c <HAL_UART_Receive_IT>
  HAL_UART_Receive_IT(&huart2, &data_2, 1);
 800057c:	2201      	movs	r2, #1
 800057e:	4951      	ldr	r1, [pc, #324]	@ (80006c4 <main+0x184>)
 8000580:	4851      	ldr	r0, [pc, #324]	@ (80006c8 <main+0x188>)
 8000582:	f003 fadb 	bl	8003b3c <HAL_UART_Receive_IT>
		  //size = size + '0'; // convert to ascii
		  //HAL_UART_Transmit(&huart2, &size, 1, 10);
		  //HAL_UART_Transmit(&huart2, "\r\n", 2, 10);
	  }*/

	  if(ring_buffer_size(&rb_usart2) != 0){
 8000586:	484a      	ldr	r0, [pc, #296]	@ (80006b0 <main+0x170>)
 8000588:	f000 faab 	bl	8000ae2 <ring_buffer_size>
 800058c:	4603      	mov	r3, r0
 800058e:	2b00      	cmp	r3, #0
 8000590:	d04b      	beq.n	800062a <main+0xea>
		  uint8_t size = ring_buffer_size(&rb_usart2);
 8000592:	4847      	ldr	r0, [pc, #284]	@ (80006b0 <main+0x170>)
 8000594:	f000 faa5 	bl	8000ae2 <ring_buffer_size>
 8000598:	4603      	mov	r3, r0
 800059a:	777b      	strb	r3, [r7, #29]
		  size = size+0x30;
 800059c:	7f7b      	ldrb	r3, [r7, #29]
 800059e:	3330      	adds	r3, #48	@ 0x30
 80005a0:	777b      	strb	r3, [r7, #29]

		  if(ring_buffer_is_full(&rb_usart2)){
 80005a2:	4843      	ldr	r0, [pc, #268]	@ (80006b0 <main+0x170>)
 80005a4:	f000 fac5 	bl	8000b32 <ring_buffer_is_full>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d03d      	beq.n	800062a <main+0xea>
			  uint8_t byte = 0;
 80005ae:	2300      	movs	r3, #0
 80005b0:	76fb      	strb	r3, [r7, #27]

			  uint8_t data_2[10];
			  for (uint8_t i = 0; i <= 10; i++){
 80005b2:	2300      	movs	r3, #0
 80005b4:	77fb      	strb	r3, [r7, #31]
 80005b6:	e00e      	b.n	80005d6 <main+0x96>
				  ring_buffer_read(&rb_usart2, &byte);
 80005b8:	f107 031b 	add.w	r3, r7, #27
 80005bc:	4619      	mov	r1, r3
 80005be:	483c      	ldr	r0, [pc, #240]	@ (80006b0 <main+0x170>)
 80005c0:	f000 fa4a 	bl	8000a58 <ring_buffer_read>
				  data_2[i] = byte;
 80005c4:	7ffb      	ldrb	r3, [r7, #31]
 80005c6:	7efa      	ldrb	r2, [r7, #27]
 80005c8:	3320      	adds	r3, #32
 80005ca:	443b      	add	r3, r7
 80005cc:	f803 2c10 	strb.w	r2, [r3, #-16]
			  for (uint8_t i = 0; i <= 10; i++){
 80005d0:	7ffb      	ldrb	r3, [r7, #31]
 80005d2:	3301      	adds	r3, #1
 80005d4:	77fb      	strb	r3, [r7, #31]
 80005d6:	7ffb      	ldrb	r3, [r7, #31]
 80005d8:	2b0a      	cmp	r3, #10
 80005da:	d9ed      	bls.n	80005b8 <main+0x78>
				  //HAL_UART_Transmit(&huart2, &byte, 1, 10);
			  };
			  //HAL_UART_Transmit(&huart2, &size, 1, 10);

			  if(right_buffer_ID(data_2)){
 80005dc:	f107 0310 	add.w	r3, r7, #16
 80005e0:	4618      	mov	r0, r3
 80005e2:	f000 fab3 	bl	8000b4c <right_buffer_ID>
 80005e6:	4603      	mov	r3, r0
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d00f      	beq.n	800060c <main+0xcc>
					HAL_UART_Transmit(&huart1, "Isabel A.M.", 11, 10);
 80005ec:	230a      	movs	r3, #10
 80005ee:	220b      	movs	r2, #11
 80005f0:	4936      	ldr	r1, [pc, #216]	@ (80006cc <main+0x18c>)
 80005f2:	4833      	ldr	r0, [pc, #204]	@ (80006c0 <main+0x180>)
 80005f4:	f003 fa18 	bl	8003a28 <HAL_UART_Transmit>
					ssd1306_WriteString("Maria Isabel A. Medina", Font_6x8, White);
 80005f8:	4b35      	ldr	r3, [pc, #212]	@ (80006d0 <main+0x190>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	9200      	str	r2, [sp, #0]
 80005fe:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000600:	4834      	ldr	r0, [pc, #208]	@ (80006d4 <main+0x194>)
 8000602:	f004 feeb 	bl	80053dc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000606:	f004 fddd 	bl	80051c4 <ssd1306_UpdateScreen>
 800060a:	e00e      	b.n	800062a <main+0xea>
			  }else {
					HAL_UART_Transmit(&huart1, "ERROR!!", 7, 10);
 800060c:	230a      	movs	r3, #10
 800060e:	2207      	movs	r2, #7
 8000610:	4931      	ldr	r1, [pc, #196]	@ (80006d8 <main+0x198>)
 8000612:	482b      	ldr	r0, [pc, #172]	@ (80006c0 <main+0x180>)
 8000614:	f003 fa08 	bl	8003a28 <HAL_UART_Transmit>
					ssd1306_WriteString("ERROR!!", Font_6x8, White);
 8000618:	4b2d      	ldr	r3, [pc, #180]	@ (80006d0 <main+0x190>)
 800061a:	2201      	movs	r2, #1
 800061c:	9200      	str	r2, [sp, #0]
 800061e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8000620:	482d      	ldr	r0, [pc, #180]	@ (80006d8 <main+0x198>)
 8000622:	f004 fedb 	bl	80053dc <ssd1306_WriteString>
					ssd1306_UpdateScreen();
 8000626:	f004 fdcd 	bl	80051c4 <ssd1306_UpdateScreen>
		  }
	  }
	  //ring_buffer_reset(rb_usart2);


	  if(ring_buffer_size(&rb_usart1) != 0){
 800062a:	4823      	ldr	r0, [pc, #140]	@ (80006b8 <main+0x178>)
 800062c:	f000 fa59 	bl	8000ae2 <ring_buffer_size>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d0a7      	beq.n	8000586 <main+0x46>
		  uint8_t size = ring_buffer_size(&rb_usart1);
 8000636:	4820      	ldr	r0, [pc, #128]	@ (80006b8 <main+0x178>)
 8000638:	f000 fa53 	bl	8000ae2 <ring_buffer_size>
 800063c:	4603      	mov	r3, r0
 800063e:	773b      	strb	r3, [r7, #28]
		  size = size+0x30;
 8000640:	7f3b      	ldrb	r3, [r7, #28]
 8000642:	3330      	adds	r3, #48	@ 0x30
 8000644:	773b      	strb	r3, [r7, #28]

		  if(ring_buffer_is_full(&rb_usart1)){
 8000646:	481c      	ldr	r0, [pc, #112]	@ (80006b8 <main+0x178>)
 8000648:	f000 fa73 	bl	8000b32 <ring_buffer_is_full>
 800064c:	4603      	mov	r3, r0
 800064e:	2b00      	cmp	r3, #0
 8000650:	d099      	beq.n	8000586 <main+0x46>
			  uint8_t byte = 0;
 8000652:	2300      	movs	r3, #0
 8000654:	73fb      	strb	r3, [r7, #15]

			  uint8_t data_1[10];
			  for (uint8_t i = 0; i <= 10; i++){
 8000656:	2300      	movs	r3, #0
 8000658:	77bb      	strb	r3, [r7, #30]
 800065a:	e00e      	b.n	800067a <main+0x13a>
				  ring_buffer_read(&rb_usart1, &byte);
 800065c:	f107 030f 	add.w	r3, r7, #15
 8000660:	4619      	mov	r1, r3
 8000662:	4815      	ldr	r0, [pc, #84]	@ (80006b8 <main+0x178>)
 8000664:	f000 f9f8 	bl	8000a58 <ring_buffer_read>
				  data_1[i] = byte;
 8000668:	7fbb      	ldrb	r3, [r7, #30]
 800066a:	7bfa      	ldrb	r2, [r7, #15]
 800066c:	3320      	adds	r3, #32
 800066e:	443b      	add	r3, r7
 8000670:	f803 2c1c 	strb.w	r2, [r3, #-28]
			  for (uint8_t i = 0; i <= 10; i++){
 8000674:	7fbb      	ldrb	r3, [r7, #30]
 8000676:	3301      	adds	r3, #1
 8000678:	77bb      	strb	r3, [r7, #30]
 800067a:	7fbb      	ldrb	r3, [r7, #30]
 800067c:	2b0a      	cmp	r3, #10
 800067e:	d9ed      	bls.n	800065c <main+0x11c>
			  };

			  if(right_buffer_ID(data_1)){
 8000680:	1d3b      	adds	r3, r7, #4
 8000682:	4618      	mov	r0, r3
 8000684:	f000 fa62 	bl	8000b4c <right_buffer_ID>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d006      	beq.n	800069c <main+0x15c>
					HAL_UART_Transmit(&huart2, "Isabel", 11, 10);
 800068e:	230a      	movs	r3, #10
 8000690:	220b      	movs	r2, #11
 8000692:	4912      	ldr	r1, [pc, #72]	@ (80006dc <main+0x19c>)
 8000694:	480c      	ldr	r0, [pc, #48]	@ (80006c8 <main+0x188>)
 8000696:	f003 f9c7 	bl	8003a28 <HAL_UART_Transmit>
 800069a:	e774      	b.n	8000586 <main+0x46>
			  }else {
					HAL_UART_Transmit(&huart2, "ERROR!!", 7, 10);
 800069c:	230a      	movs	r3, #10
 800069e:	2207      	movs	r2, #7
 80006a0:	490d      	ldr	r1, [pc, #52]	@ (80006d8 <main+0x198>)
 80006a2:	4809      	ldr	r0, [pc, #36]	@ (80006c8 <main+0x188>)
 80006a4:	f003 f9c0 	bl	8003a28 <HAL_UART_Transmit>
	  if(ring_buffer_size(&rb_usart2) != 0){
 80006a8:	e76d      	b.n	8000586 <main+0x46>
 80006aa:	bf00      	nop
 80006ac:	200001d8 	.word	0x200001d8
 80006b0:	200001c4 	.word	0x200001c4
 80006b4:	200001cc 	.word	0x200001cc
 80006b8:	200001bc 	.word	0x200001bc
 80006bc:	200001b8 	.word	0x200001b8
 80006c0:	200000a8 	.word	0x200000a8
 80006c4:	200001b9 	.word	0x200001b9
 80006c8:	20000130 	.word	0x20000130
 80006cc:	080054b8 	.word	0x080054b8
 80006d0:	08005b24 	.word	0x08005b24
 80006d4:	080054c4 	.word	0x080054c4
 80006d8:	080054dc 	.word	0x080054dc
 80006dc:	080054e4 	.word	0x080054e4

080006e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e0:	b580      	push	{r7, lr}
 80006e2:	b096      	sub	sp, #88	@ 0x58
 80006e4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006e6:	f107 0314 	add.w	r3, r7, #20
 80006ea:	2244      	movs	r2, #68	@ 0x44
 80006ec:	2100      	movs	r1, #0
 80006ee:	4618      	mov	r0, r3
 80006f0:	f004 feaa 	bl	8005448 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006f4:	463b      	mov	r3, r7
 80006f6:	2200      	movs	r2, #0
 80006f8:	601a      	str	r2, [r3, #0]
 80006fa:	605a      	str	r2, [r3, #4]
 80006fc:	609a      	str	r2, [r3, #8]
 80006fe:	60da      	str	r2, [r3, #12]
 8000700:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8000702:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000706:	f001 fe2f 	bl	8002368 <HAL_PWREx_ControlVoltageScaling>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d001      	beq.n	8000714 <SystemClock_Config+0x34>
  {
    Error_Handler();
 8000710:	f000 f94a 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000714:	2302      	movs	r3, #2
 8000716:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000718:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800071c:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800071e:	2310      	movs	r3, #16
 8000720:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000722:	2302      	movs	r3, #2
 8000724:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000726:	2302      	movs	r3, #2
 8000728:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800072a:	2301      	movs	r3, #1
 800072c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 800072e:	2314      	movs	r3, #20
 8000730:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000732:	2307      	movs	r3, #7
 8000734:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000736:	2302      	movs	r3, #2
 8000738:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV4;
 800073a:	2304      	movs	r3, #4
 800073c:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800073e:	f107 0314 	add.w	r3, r7, #20
 8000742:	4618      	mov	r0, r3
 8000744:	f001 fe66 	bl	8002414 <HAL_RCC_OscConfig>
 8000748:	4603      	mov	r3, r0
 800074a:	2b00      	cmp	r3, #0
 800074c:	d001      	beq.n	8000752 <SystemClock_Config+0x72>
  {
    Error_Handler();
 800074e:	f000 f92b 	bl	80009a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000752:	230f      	movs	r3, #15
 8000754:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000756:	2303      	movs	r3, #3
 8000758:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800075e:	2300      	movs	r3, #0
 8000760:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000762:	2300      	movs	r3, #0
 8000764:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000766:	463b      	mov	r3, r7
 8000768:	2104      	movs	r1, #4
 800076a:	4618      	mov	r0, r3
 800076c:	f002 fa2e 	bl	8002bcc <HAL_RCC_ClockConfig>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d001      	beq.n	800077a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000776:	f000 f917 	bl	80009a8 <Error_Handler>
  }
}
 800077a:	bf00      	nop
 800077c:	3758      	adds	r7, #88	@ 0x58
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
	...

08000784 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000788:	4b1b      	ldr	r3, [pc, #108]	@ (80007f8 <MX_I2C1_Init+0x74>)
 800078a:	4a1c      	ldr	r2, [pc, #112]	@ (80007fc <MX_I2C1_Init+0x78>)
 800078c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x10D19CE4;
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_I2C1_Init+0x74>)
 8000790:	4a1b      	ldr	r2, [pc, #108]	@ (8000800 <MX_I2C1_Init+0x7c>)
 8000792:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000794:	4b18      	ldr	r3, [pc, #96]	@ (80007f8 <MX_I2C1_Init+0x74>)
 8000796:	2200      	movs	r2, #0
 8000798:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_I2C1_Init+0x74>)
 800079c:	2201      	movs	r2, #1
 800079e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80007a0:	4b15      	ldr	r3, [pc, #84]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80007ac:	4b12      	ldr	r3, [pc, #72]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80007be:	480e      	ldr	r0, [pc, #56]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007c0:	f001 f90e 	bl	80019e0 <HAL_I2C_Init>
 80007c4:	4603      	mov	r3, r0
 80007c6:	2b00      	cmp	r3, #0
 80007c8:	d001      	beq.n	80007ce <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80007ca:	f000 f8ed 	bl	80009a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80007ce:	2100      	movs	r1, #0
 80007d0:	4809      	ldr	r0, [pc, #36]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007d2:	f001 fd23 	bl	800221c <HAL_I2CEx_ConfigAnalogFilter>
 80007d6:	4603      	mov	r3, r0
 80007d8:	2b00      	cmp	r3, #0
 80007da:	d001      	beq.n	80007e0 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80007dc:	f000 f8e4 	bl	80009a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80007e0:	2100      	movs	r1, #0
 80007e2:	4805      	ldr	r0, [pc, #20]	@ (80007f8 <MX_I2C1_Init+0x74>)
 80007e4:	f001 fd65 	bl	80022b2 <HAL_I2CEx_ConfigDigitalFilter>
 80007e8:	4603      	mov	r3, r0
 80007ea:	2b00      	cmp	r3, #0
 80007ec:	d001      	beq.n	80007f2 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80007ee:	f000 f8db 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80007f2:	bf00      	nop
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	20000054 	.word	0x20000054
 80007fc:	40005400 	.word	0x40005400
 8000800:	10d19ce4 	.word	0x10d19ce4

08000804 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000804:	b580      	push	{r7, lr}
 8000806:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000808:	4b14      	ldr	r3, [pc, #80]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800080a:	4a15      	ldr	r2, [pc, #84]	@ (8000860 <MX_USART1_UART_Init+0x5c>)
 800080c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800080e:	4b13      	ldr	r3, [pc, #76]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000810:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000814:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000816:	4b11      	ldr	r3, [pc, #68]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000818:	2200      	movs	r2, #0
 800081a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800081c:	4b0f      	ldr	r3, [pc, #60]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800081e:	2200      	movs	r2, #0
 8000820:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000822:	4b0e      	ldr	r3, [pc, #56]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000824:	2200      	movs	r2, #0
 8000826:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000828:	4b0c      	ldr	r3, [pc, #48]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800082a:	220c      	movs	r2, #12
 800082c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800082e:	4b0b      	ldr	r3, [pc, #44]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000830:	2200      	movs	r2, #0
 8000832:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000834:	4b09      	ldr	r3, [pc, #36]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000836:	2200      	movs	r2, #0
 8000838:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800083a:	4b08      	ldr	r3, [pc, #32]	@ (800085c <MX_USART1_UART_Init+0x58>)
 800083c:	2200      	movs	r2, #0
 800083e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000840:	4b06      	ldr	r3, [pc, #24]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000842:	2200      	movs	r2, #0
 8000844:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000846:	4805      	ldr	r0, [pc, #20]	@ (800085c <MX_USART1_UART_Init+0x58>)
 8000848:	f003 f8a0 	bl	800398c <HAL_UART_Init>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d001      	beq.n	8000856 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8000852:	f000 f8a9 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000856:	bf00      	nop
 8000858:	bd80      	pop	{r7, pc}
 800085a:	bf00      	nop
 800085c:	200000a8 	.word	0x200000a8
 8000860:	40013800 	.word	0x40013800

08000864 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000868:	4b14      	ldr	r3, [pc, #80]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800086a:	4a15      	ldr	r2, [pc, #84]	@ (80008c0 <MX_USART2_UART_Init+0x5c>)
 800086c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800086e:	4b13      	ldr	r3, [pc, #76]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000870:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000874:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000876:	4b11      	ldr	r3, [pc, #68]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000878:	2200      	movs	r2, #0
 800087a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800087c:	4b0f      	ldr	r3, [pc, #60]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800087e:	2200      	movs	r2, #0
 8000880:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000882:	4b0e      	ldr	r3, [pc, #56]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000884:	2200      	movs	r2, #0
 8000886:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000888:	4b0c      	ldr	r3, [pc, #48]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800088a:	220c      	movs	r2, #12
 800088c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800088e:	4b0b      	ldr	r3, [pc, #44]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000890:	2200      	movs	r2, #0
 8000892:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000894:	4b09      	ldr	r3, [pc, #36]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 8000896:	2200      	movs	r2, #0
 8000898:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800089a:	4b08      	ldr	r3, [pc, #32]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 800089c:	2200      	movs	r2, #0
 800089e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80008a6:	4805      	ldr	r0, [pc, #20]	@ (80008bc <MX_USART2_UART_Init+0x58>)
 80008a8:	f003 f870 	bl	800398c <HAL_UART_Init>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d001      	beq.n	80008b6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80008b2:	f000 f879 	bl	80009a8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80008b6:	bf00      	nop
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20000130 	.word	0x20000130
 80008c0:	40004400 	.word	0x40004400

080008c4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008c4:	b580      	push	{r7, lr}
 80008c6:	b088      	sub	sp, #32
 80008c8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008ca:	f107 030c 	add.w	r3, r7, #12
 80008ce:	2200      	movs	r2, #0
 80008d0:	601a      	str	r2, [r3, #0]
 80008d2:	605a      	str	r2, [r3, #4]
 80008d4:	609a      	str	r2, [r3, #8]
 80008d6:	60da      	str	r2, [r3, #12]
 80008d8:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008da:	4b31      	ldr	r3, [pc, #196]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 80008dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008de:	4a30      	ldr	r2, [pc, #192]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 80008e0:	f043 0301 	orr.w	r3, r3, #1
 80008e4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008e6:	4b2e      	ldr	r3, [pc, #184]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 80008e8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008ea:	f003 0301 	and.w	r3, r3, #1
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008f2:	4b2b      	ldr	r3, [pc, #172]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 80008f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80008f6:	4a2a      	ldr	r2, [pc, #168]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 80008f8:	f043 0302 	orr.w	r3, r3, #2
 80008fc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80008fe:	4b28      	ldr	r3, [pc, #160]	@ (80009a0 <MX_GPIO_Init+0xdc>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000902:	f003 0302 	and.w	r3, r3, #2
 8000906:	607b      	str	r3, [r7, #4]
 8000908:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, D1_Pin|D3_Pin, GPIO_PIN_SET);
 800090a:	2201      	movs	r2, #1
 800090c:	21a0      	movs	r1, #160	@ 0xa0
 800090e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000912:	f001 f835 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(D4_GPIO_Port, D4_Pin, GPIO_PIN_SET);
 8000916:	2201      	movs	r2, #1
 8000918:	2140      	movs	r1, #64	@ 0x40
 800091a:	4822      	ldr	r0, [pc, #136]	@ (80009a4 <MX_GPIO_Init+0xe0>)
 800091c:	f001 f830 	bl	8001980 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : S1_Pin S2_Pin */
  GPIO_InitStruct.Pin = S1_Pin|S2_Pin;
 8000920:	2312      	movs	r3, #18
 8000922:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000924:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000928:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800092a:	2300      	movs	r3, #0
 800092c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800092e:	f107 030c 	add.w	r3, r7, #12
 8000932:	4619      	mov	r1, r3
 8000934:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000938:	f000 fe78 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pins : D1_Pin D3_Pin */
  GPIO_InitStruct.Pin = D1_Pin|D3_Pin;
 800093c:	23a0      	movs	r3, #160	@ 0xa0
 800093e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000940:	2301      	movs	r3, #1
 8000942:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000944:	2300      	movs	r3, #0
 8000946:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000948:	2300      	movs	r3, #0
 800094a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800094c:	f107 030c 	add.w	r3, r7, #12
 8000950:	4619      	mov	r1, r3
 8000952:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000956:	f000 fe69 	bl	800162c <HAL_GPIO_Init>

  /*Configure GPIO pin : D4_Pin */
  GPIO_InitStruct.Pin = D4_Pin;
 800095a:	2340      	movs	r3, #64	@ 0x40
 800095c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800095e:	2301      	movs	r3, #1
 8000960:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000962:	2300      	movs	r3, #0
 8000964:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000966:	2300      	movs	r3, #0
 8000968:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(D4_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 030c 	add.w	r3, r7, #12
 800096e:	4619      	mov	r1, r3
 8000970:	480c      	ldr	r0, [pc, #48]	@ (80009a4 <MX_GPIO_Init+0xe0>)
 8000972:	f000 fe5b 	bl	800162c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000976:	2200      	movs	r2, #0
 8000978:	2100      	movs	r1, #0
 800097a:	2007      	movs	r0, #7
 800097c:	f000 fc37 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000980:	2007      	movs	r0, #7
 8000982:	f000 fc50 	bl	8001226 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI4_IRQn, 0, 0);
 8000986:	2200      	movs	r2, #0
 8000988:	2100      	movs	r1, #0
 800098a:	200a      	movs	r0, #10
 800098c:	f000 fc2f 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI4_IRQn);
 8000990:	200a      	movs	r0, #10
 8000992:	f000 fc48 	bl	8001226 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000996:	bf00      	nop
 8000998:	3720      	adds	r7, #32
 800099a:	46bd      	mov	sp, r7
 800099c:	bd80      	pop	{r7, pc}
 800099e:	bf00      	nop
 80009a0:	40021000 	.word	0x40021000
 80009a4:	48000400 	.word	0x48000400

080009a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80009ac:	b672      	cpsid	i
}
 80009ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009b0:	bf00      	nop
 80009b2:	e7fd      	b.n	80009b0 <Error_Handler+0x8>

080009b4 <ring_buffer_init>:
uint8_t is_full;*/

uint8_t numberID[10] = {'1','0','0','6','9','6','4','0','9','8'};

// Clase 23/08/2024
void ring_buffer_init(ring_buffer_t *rb, uint8_t *mem_add, uint8_t cap){
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b084      	sub	sp, #16
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	60f8      	str	r0, [r7, #12]
 80009bc:	60b9      	str	r1, [r7, #8]
 80009be:	4613      	mov	r3, r2
 80009c0:	71fb      	strb	r3, [r7, #7]
	rb->buffer = mem_add;
 80009c2:	68fb      	ldr	r3, [r7, #12]
 80009c4:	68ba      	ldr	r2, [r7, #8]
 80009c6:	601a      	str	r2, [r3, #0]
	rb->capacity = cap;
 80009c8:	68fb      	ldr	r3, [r7, #12]
 80009ca:	79fa      	ldrb	r2, [r7, #7]
 80009cc:	71da      	strb	r2, [r3, #7]

	ring_buffer_reset(rb);
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f000 f874 	bl	8000abc <ring_buffer_reset>
}
 80009d4:	bf00      	nop
 80009d6:	3710      	adds	r7, #16
 80009d8:	46bd      	mov	sp, r7
 80009da:	bd80      	pop	{r7, pc}

080009dc <ring_buffer_write>:
 *
 * @ param data: Dato que se va a escribir
 *
 * @ retval Ninguno
 * */
void ring_buffer_write(ring_buffer_t *rb, uint8_t data){
 80009dc:	b480      	push	{r7}
 80009de:	b083      	sub	sp, #12
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	460b      	mov	r3, r1
 80009e6:	70fb      	strb	r3, [r7, #3]
		rb->buffer[rb->head] = data;
 80009e8:	687b      	ldr	r3, [r7, #4]
 80009ea:	681b      	ldr	r3, [r3, #0]
 80009ec:	687a      	ldr	r2, [r7, #4]
 80009ee:	7912      	ldrb	r2, [r2, #4]
 80009f0:	4413      	add	r3, r2
 80009f2:	78fa      	ldrb	r2, [r7, #3]
 80009f4:	701a      	strb	r2, [r3, #0]
		rb->head++;
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	791b      	ldrb	r3, [r3, #4]
 80009fa:	3301      	adds	r3, #1
 80009fc:	b2da      	uxtb	r2, r3
 80009fe:	687b      	ldr	r3, [r7, #4]
 8000a00:	711a      	strb	r2, [r3, #4]

		if (rb->head >= rb->capacity){ // Si la cabeza llega al final de la memoria
 8000a02:	687b      	ldr	r3, [r7, #4]
 8000a04:	791a      	ldrb	r2, [r3, #4]
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	79db      	ldrb	r3, [r3, #7]
 8000a0a:	429a      	cmp	r2, r3
 8000a0c:	d302      	bcc.n	8000a14 <ring_buffer_write+0x38>
			rb->head = 0;
 8000a0e:	687b      	ldr	r3, [r7, #4]
 8000a10:	2200      	movs	r2, #0
 8000a12:	711a      	strb	r2, [r3, #4]
		}

		if (rb->is_full != 0 ){ // Si se pierden datos viejos
 8000a14:	687b      	ldr	r3, [r7, #4]
 8000a16:	799b      	ldrb	r3, [r3, #6]
 8000a18:	2b00      	cmp	r3, #0
 8000a1a:	d005      	beq.n	8000a28 <ring_buffer_write+0x4c>
			rb->tail += 1;
 8000a1c:	687b      	ldr	r3, [r7, #4]
 8000a1e:	795b      	ldrb	r3, [r3, #5]
 8000a20:	3301      	adds	r3, #1
 8000a22:	b2da      	uxtb	r2, r3
 8000a24:	687b      	ldr	r3, [r7, #4]
 8000a26:	715a      	strb	r2, [r3, #5]
		}

		if (rb->tail >= rb->capacity){ // Si la cola llega al final de la memoria
 8000a28:	687b      	ldr	r3, [r7, #4]
 8000a2a:	795a      	ldrb	r2, [r3, #5]
 8000a2c:	687b      	ldr	r3, [r7, #4]
 8000a2e:	79db      	ldrb	r3, [r3, #7]
 8000a30:	429a      	cmp	r2, r3
 8000a32:	d302      	bcc.n	8000a3a <ring_buffer_write+0x5e>
			rb->tail = 0;
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	2200      	movs	r2, #0
 8000a38:	715a      	strb	r2, [r3, #5]
				}

		if (rb->head == rb->tail){ // Si la cabeza alcanza la cola
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	791a      	ldrb	r2, [r3, #4]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	795b      	ldrb	r3, [r3, #5]
 8000a42:	429a      	cmp	r2, r3
 8000a44:	d102      	bne.n	8000a4c <ring_buffer_write+0x70>
			rb->is_full = 1;
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2201      	movs	r2, #1
 8000a4a:	719a      	strb	r2, [r3, #6]
		}
}
 8000a4c:	bf00      	nop
 8000a4e:	370c      	adds	r7, #12
 8000a50:	46bd      	mov	sp, r7
 8000a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a56:	4770      	bx	lr

08000a58 <ring_buffer_read>:
 *
 * @ param data: Dirección de donde se va a escribir el dato
 *
 * @ retval 1: Hay datos disponibles, 0: No hay datos
 * */
uint8_t ring_buffer_read(ring_buffer_t *rb, uint8_t *byte){
 8000a58:	b480      	push	{r7}
 8000a5a:	b083      	sub	sp, #12
 8000a5c:	af00      	add	r7, sp, #0
 8000a5e:	6078      	str	r0, [r7, #4]
 8000a60:	6039      	str	r1, [r7, #0]

	if( rb->is_full != 0 || rb->head != rb->tail ){
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	799b      	ldrb	r3, [r3, #6]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d105      	bne.n	8000a76 <ring_buffer_read+0x1e>
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	791a      	ldrb	r2, [r3, #4]
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	795b      	ldrb	r3, [r3, #5]
 8000a72:	429a      	cmp	r2, r3
 8000a74:	d01b      	beq.n	8000aae <ring_buffer_read+0x56>
		  *byte = rb->buffer[rb->tail];
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	687a      	ldr	r2, [r7, #4]
 8000a7c:	7952      	ldrb	r2, [r2, #5]
 8000a7e:	4413      	add	r3, r2
 8000a80:	781a      	ldrb	r2, [r3, #0]
 8000a82:	683b      	ldr	r3, [r7, #0]
 8000a84:	701a      	strb	r2, [r3, #0]
		  rb->tail += 1;
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	795b      	ldrb	r3, [r3, #5]
 8000a8a:	3301      	adds	r3, #1
 8000a8c:	b2da      	uxtb	r2, r3
 8000a8e:	687b      	ldr	r3, [r7, #4]
 8000a90:	715a      	strb	r2, [r3, #5]

		  if (rb->tail >= rb->capacity) {
 8000a92:	687b      	ldr	r3, [r7, #4]
 8000a94:	795a      	ldrb	r2, [r3, #5]
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	79db      	ldrb	r3, [r3, #7]
 8000a9a:	429a      	cmp	r2, r3
 8000a9c:	d302      	bcc.n	8000aa4 <ring_buffer_read+0x4c>
			  rb->tail = 0;
 8000a9e:	687b      	ldr	r3, [r7, #4]
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	715a      	strb	r2, [r3, #5]
		  }
		  rb->is_full = 0;
 8000aa4:	687b      	ldr	r3, [r7, #4]
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	719a      	strb	r2, [r3, #6]

		  return 1; // Buffer con datos
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e000      	b.n	8000ab0 <ring_buffer_read+0x58>
	}
	return 0; //Buffer vacío
 8000aae:	2300      	movs	r3, #0
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	370c      	adds	r7, #12
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aba:	4770      	bx	lr

08000abc <ring_buffer_reset>:

void ring_buffer_reset(ring_buffer_t *rb){
 8000abc:	b480      	push	{r7}
 8000abe:	b083      	sub	sp, #12
 8000ac0:	af00      	add	r7, sp, #0
 8000ac2:	6078      	str	r0, [r7, #4]
	//ring_buffer[capacity] = 0;
	rb->head = 0;
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	711a      	strb	r2, [r3, #4]
	rb->tail = 0;
 8000aca:	687b      	ldr	r3, [r7, #4]
 8000acc:	2200      	movs	r2, #0
 8000ace:	715a      	strb	r2, [r3, #5]
	rb->is_full = 0;
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	2200      	movs	r2, #0
 8000ad4:	719a      	strb	r2, [r3, #6]
} ;
 8000ad6:	bf00      	nop
 8000ad8:	370c      	adds	r7, #12
 8000ada:	46bd      	mov	sp, r7
 8000adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ae0:	4770      	bx	lr

08000ae2 <ring_buffer_size>:

uint8_t ring_buffer_size(ring_buffer_t *rb){
 8000ae2:	b480      	push	{r7}
 8000ae4:	b085      	sub	sp, #20
 8000ae6:	af00      	add	r7, sp, #0
 8000ae8:	6078      	str	r0, [r7, #4]
	uint8_t size = 0;
 8000aea:	2300      	movs	r3, #0
 8000aec:	73fb      	strb	r3, [r7, #15]
		if (rb->head >= rb->tail && rb->is_full == 0) {
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	791a      	ldrb	r2, [r3, #4]
 8000af2:	687b      	ldr	r3, [r7, #4]
 8000af4:	795b      	ldrb	r3, [r3, #5]
 8000af6:	429a      	cmp	r2, r3
 8000af8:	d30a      	bcc.n	8000b10 <ring_buffer_size+0x2e>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	799b      	ldrb	r3, [r3, #6]
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d106      	bne.n	8000b10 <ring_buffer_size+0x2e>
			size = rb->head - rb->tail;
 8000b02:	687b      	ldr	r3, [r7, #4]
 8000b04:	791a      	ldrb	r2, [r3, #4]
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	795b      	ldrb	r3, [r3, #5]
 8000b0a:	1ad3      	subs	r3, r2, r3
 8000b0c:	73fb      	strb	r3, [r7, #15]
 8000b0e:	e009      	b.n	8000b24 <ring_buffer_size+0x42>
		} else {
			size = (rb->capacity - rb->tail) + rb->head;
 8000b10:	687b      	ldr	r3, [r7, #4]
 8000b12:	79da      	ldrb	r2, [r3, #7]
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	795b      	ldrb	r3, [r3, #5]
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	b2da      	uxtb	r2, r3
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	791b      	ldrb	r3, [r3, #4]
 8000b20:	4413      	add	r3, r2
 8000b22:	73fb      	strb	r3, [r7, #15]
		}
		return size;
 8000b24:	7bfb      	ldrb	r3, [r7, #15]
};
 8000b26:	4618      	mov	r0, r3
 8000b28:	3714      	adds	r7, #20
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b30:	4770      	bx	lr

08000b32 <ring_buffer_is_full>:

uint8_t ring_buffer_is_full(ring_buffer_t *rb){
 8000b32:	b480      	push	{r7}
 8000b34:	b083      	sub	sp, #12
 8000b36:	af00      	add	r7, sp, #0
 8000b38:	6078      	str	r0, [r7, #4]
	return rb->is_full;
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	799b      	ldrb	r3, [r3, #6]
};
 8000b3e:	4618      	mov	r0, r3
 8000b40:	370c      	adds	r7, #12
 8000b42:	46bd      	mov	sp, r7
 8000b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b48:	4770      	bx	lr
	...

08000b4c <right_buffer_ID>:
	}else{
		return 0;
	}
};

uint8_t right_buffer_ID( uint8_t *data){
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]

	 if ( memcmp(data, numberID, sizeof(numberID)) != 0 ) {
 8000b54:	220a      	movs	r2, #10
 8000b56:	4907      	ldr	r1, [pc, #28]	@ (8000b74 <right_buffer_ID+0x28>)
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f004 fc65 	bl	8005428 <memcmp>
 8000b5e:	4603      	mov	r3, r0
 8000b60:	2b00      	cmp	r3, #0
 8000b62:	d001      	beq.n	8000b68 <right_buffer_ID+0x1c>
	        return 0;
 8000b64:	2300      	movs	r3, #0
 8000b66:	e000      	b.n	8000b6a <right_buffer_ID+0x1e>
	 } else {
	       return 1;
 8000b68:	2301      	movs	r3, #1
	 }
}
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	3708      	adds	r7, #8
 8000b6e:	46bd      	mov	sp, r7
 8000b70:	bd80      	pop	{r7, pc}
 8000b72:	bf00      	nop
 8000b74:	20000000 	.word	0x20000000

08000b78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b082      	sub	sp, #8
 8000b7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b7e:	4b1a      	ldr	r3, [pc, #104]	@ (8000be8 <HAL_MspInit+0x70>)
 8000b80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b82:	4a19      	ldr	r2, [pc, #100]	@ (8000be8 <HAL_MspInit+0x70>)
 8000b84:	f043 0301 	orr.w	r3, r3, #1
 8000b88:	6613      	str	r3, [r2, #96]	@ 0x60
 8000b8a:	4b17      	ldr	r3, [pc, #92]	@ (8000be8 <HAL_MspInit+0x70>)
 8000b8c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000b8e:	f003 0301 	and.w	r3, r3, #1
 8000b92:	607b      	str	r3, [r7, #4]
 8000b94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b96:	4b14      	ldr	r3, [pc, #80]	@ (8000be8 <HAL_MspInit+0x70>)
 8000b98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000b9a:	4a13      	ldr	r2, [pc, #76]	@ (8000be8 <HAL_MspInit+0x70>)
 8000b9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000ba0:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ba2:	4b11      	ldr	r3, [pc, #68]	@ (8000be8 <HAL_MspInit+0x70>)
 8000ba4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ba6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000baa:	603b      	str	r3, [r7, #0]
 8000bac:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 0, 0);
 8000bae:	2200      	movs	r2, #0
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	2004      	movs	r0, #4
 8000bb4:	f000 fb1b 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8000bb8:	2004      	movs	r0, #4
 8000bba:	f000 fb34 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* RCC_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(RCC_IRQn, 0, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	2005      	movs	r0, #5
 8000bc4:	f000 fb13 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(RCC_IRQn);
 8000bc8:	2005      	movs	r0, #5
 8000bca:	f000 fb2c 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* FPU_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FPU_IRQn, 0, 0);
 8000bce:	2200      	movs	r2, #0
 8000bd0:	2100      	movs	r1, #0
 8000bd2:	2051      	movs	r0, #81	@ 0x51
 8000bd4:	f000 fb0b 	bl	80011ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FPU_IRQn);
 8000bd8:	2051      	movs	r0, #81	@ 0x51
 8000bda:	f000 fb24 	bl	8001226 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bde:	bf00      	nop
 8000be0:	3708      	adds	r7, #8
 8000be2:	46bd      	mov	sp, r7
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40021000 	.word	0x40021000

08000bec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b0ac      	sub	sp, #176	@ 0xb0
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf4:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	601a      	str	r2, [r3, #0]
 8000bfc:	605a      	str	r2, [r3, #4]
 8000bfe:	609a      	str	r2, [r3, #8]
 8000c00:	60da      	str	r2, [r3, #12]
 8000c02:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000c04:	f107 0314 	add.w	r3, r7, #20
 8000c08:	2288      	movs	r2, #136	@ 0x88
 8000c0a:	2100      	movs	r1, #0
 8000c0c:	4618      	mov	r0, r3
 8000c0e:	f004 fc1b 	bl	8005448 <memset>
  if(hi2c->Instance==I2C1)
 8000c12:	687b      	ldr	r3, [r7, #4]
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	4a21      	ldr	r2, [pc, #132]	@ (8000c9c <HAL_I2C_MspInit+0xb0>)
 8000c18:	4293      	cmp	r3, r2
 8000c1a:	d13b      	bne.n	8000c94 <HAL_I2C_MspInit+0xa8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000c1c:	2340      	movs	r3, #64	@ 0x40
 8000c1e:	617b      	str	r3, [r7, #20]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000c20:	2300      	movs	r3, #0
 8000c22:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000c24:	f107 0314 	add.w	r3, r7, #20
 8000c28:	4618      	mov	r0, r3
 8000c2a:	f002 f9f3 	bl	8003014 <HAL_RCCEx_PeriphCLKConfig>
 8000c2e:	4603      	mov	r3, r0
 8000c30:	2b00      	cmp	r3, #0
 8000c32:	d001      	beq.n	8000c38 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8000c34:	f7ff feb8 	bl	80009a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c38:	4b19      	ldr	r3, [pc, #100]	@ (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c3a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c3c:	4a18      	ldr	r2, [pc, #96]	@ (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c3e:	f043 0302 	orr.w	r3, r3, #2
 8000c42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000c44:	4b16      	ldr	r3, [pc, #88]	@ (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000c48:	f003 0302 	and.w	r3, r3, #2
 8000c4c:	613b      	str	r3, [r7, #16]
 8000c4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000c50:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000c54:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000c58:	2312      	movs	r3, #18
 8000c5a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c64:	2303      	movs	r3, #3
 8000c66:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000c6a:	2304      	movs	r3, #4
 8000c6c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c70:	f107 039c 	add.w	r3, r7, #156	@ 0x9c
 8000c74:	4619      	mov	r1, r3
 8000c76:	480b      	ldr	r0, [pc, #44]	@ (8000ca4 <HAL_I2C_MspInit+0xb8>)
 8000c78:	f000 fcd8 	bl	800162c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000c7c:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c7e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c80:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c82:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8000c86:	6593      	str	r3, [r2, #88]	@ 0x58
 8000c88:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_I2C_MspInit+0xb4>)
 8000c8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000c8c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000c90:	60fb      	str	r3, [r7, #12]
 8000c92:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 8000c94:	bf00      	nop
 8000c96:	37b0      	adds	r7, #176	@ 0xb0
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	40005400 	.word	0x40005400
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	48000400 	.word	0x48000400

08000ca8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b0ae      	sub	sp, #184	@ 0xb8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
 8000cbe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000cc0:	f107 031c 	add.w	r3, r7, #28
 8000cc4:	2288      	movs	r2, #136	@ 0x88
 8000cc6:	2100      	movs	r1, #0
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f004 fbbd 	bl	8005448 <memset>
  if(huart->Instance==USART1)
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	681b      	ldr	r3, [r3, #0]
 8000cd2:	4a4b      	ldr	r2, [pc, #300]	@ (8000e00 <HAL_UART_MspInit+0x158>)
 8000cd4:	4293      	cmp	r3, r2
 8000cd6:	d145      	bne.n	8000d64 <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cd8:	2301      	movs	r3, #1
 8000cda:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8000cdc:	2300      	movs	r3, #0
 8000cde:	657b      	str	r3, [r7, #84]	@ 0x54
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000ce0:	f107 031c 	add.w	r3, r7, #28
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	f002 f995 	bl	8003014 <HAL_RCCEx_PeriphCLKConfig>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d001      	beq.n	8000cf4 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8000cf0:	f7ff fe5a 	bl	80009a8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000cf4:	4b43      	ldr	r3, [pc, #268]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000cf6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000cf8:	4a42      	ldr	r2, [pc, #264]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000cfa:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cfe:	6613      	str	r3, [r2, #96]	@ 0x60
 8000d00:	4b40      	ldr	r3, [pc, #256]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000d04:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d08:	61bb      	str	r3, [r7, #24]
 8000d0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0c:	4b3d      	ldr	r3, [pc, #244]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d0e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d10:	4a3c      	ldr	r2, [pc, #240]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d18:	4b3a      	ldr	r3, [pc, #232]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d1a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	617b      	str	r3, [r7, #20]
 8000d22:	697b      	ldr	r3, [r7, #20]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d24:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000d28:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d2c:	2302      	movs	r3, #2
 8000d2e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d32:	2300      	movs	r3, #0
 8000d34:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d38:	2303      	movs	r3, #3
 8000d3a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d3e:	2307      	movs	r3, #7
 8000d40:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d44:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000d48:	4619      	mov	r1, r3
 8000d4a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000d4e:	f000 fc6d 	bl	800162c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000d52:	2200      	movs	r2, #0
 8000d54:	2100      	movs	r1, #0
 8000d56:	2025      	movs	r0, #37	@ 0x25
 8000d58:	f000 fa49 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000d5c:	2025      	movs	r0, #37	@ 0x25
 8000d5e:	f000 fa62 	bl	8001226 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000d62:	e048      	b.n	8000df6 <HAL_UART_MspInit+0x14e>
  else if(huart->Instance==USART2)
 8000d64:	687b      	ldr	r3, [r7, #4]
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	4a27      	ldr	r2, [pc, #156]	@ (8000e08 <HAL_UART_MspInit+0x160>)
 8000d6a:	4293      	cmp	r3, r2
 8000d6c:	d143      	bne.n	8000df6 <HAL_UART_MspInit+0x14e>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d6e:	2302      	movs	r3, #2
 8000d70:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000d72:	2300      	movs	r3, #0
 8000d74:	65bb      	str	r3, [r7, #88]	@ 0x58
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d76:	f107 031c 	add.w	r3, r7, #28
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f002 f94a 	bl	8003014 <HAL_RCCEx_PeriphCLKConfig>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <HAL_UART_MspInit+0xe2>
      Error_Handler();
 8000d86:	f7ff fe0f 	bl	80009a8 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000d8a:	4b1e      	ldr	r3, [pc, #120]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d8e:	4a1d      	ldr	r2, [pc, #116]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d90:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d94:	6593      	str	r3, [r2, #88]	@ 0x58
 8000d96:	4b1b      	ldr	r3, [pc, #108]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000d98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000d9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000da2:	4b18      	ldr	r3, [pc, #96]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da6:	4a17      	ldr	r2, [pc, #92]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000da8:	f043 0301 	orr.w	r3, r3, #1
 8000dac:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000dae:	4b15      	ldr	r3, [pc, #84]	@ (8000e04 <HAL_UART_MspInit+0x15c>)
 8000db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db2:	f003 0301 	and.w	r3, r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]
 8000db8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000dba:	230c      	movs	r3, #12
 8000dbc:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000dcc:	2303      	movs	r3, #3
 8000dce:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000dd2:	2307      	movs	r3, #7
 8000dd4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000dd8:	f107 03a4 	add.w	r3, r7, #164	@ 0xa4
 8000ddc:	4619      	mov	r1, r3
 8000dde:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000de2:	f000 fc23 	bl	800162c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000de6:	2200      	movs	r2, #0
 8000de8:	2100      	movs	r1, #0
 8000dea:	2026      	movs	r0, #38	@ 0x26
 8000dec:	f000 f9ff 	bl	80011ee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000df0:	2026      	movs	r0, #38	@ 0x26
 8000df2:	f000 fa18 	bl	8001226 <HAL_NVIC_EnableIRQ>
}
 8000df6:	bf00      	nop
 8000df8:	37b8      	adds	r7, #184	@ 0xb8
 8000dfa:	46bd      	mov	sp, r7
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	40013800 	.word	0x40013800
 8000e04:	40021000 	.word	0x40021000
 8000e08:	40004400 	.word	0x40004400

08000e0c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e0c:	b480      	push	{r7}
 8000e0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000e10:	bf00      	nop
 8000e12:	e7fd      	b.n	8000e10 <NMI_Handler+0x4>

08000e14 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e18:	bf00      	nop
 8000e1a:	e7fd      	b.n	8000e18 <HardFault_Handler+0x4>

08000e1c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e1c:	b480      	push	{r7}
 8000e1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e20:	bf00      	nop
 8000e22:	e7fd      	b.n	8000e20 <MemManage_Handler+0x4>

08000e24 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e24:	b480      	push	{r7}
 8000e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e28:	bf00      	nop
 8000e2a:	e7fd      	b.n	8000e28 <BusFault_Handler+0x4>

08000e2c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e2c:	b480      	push	{r7}
 8000e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e30:	bf00      	nop
 8000e32:	e7fd      	b.n	8000e30 <UsageFault_Handler+0x4>

08000e34 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e34:	b480      	push	{r7}
 8000e36:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e38:	bf00      	nop
 8000e3a:	46bd      	mov	sp, r7
 8000e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e40:	4770      	bx	lr

08000e42 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000e42:	b480      	push	{r7}
 8000e44:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000e46:	bf00      	nop
 8000e48:	46bd      	mov	sp, r7
 8000e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4e:	4770      	bx	lr

08000e50 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e50:	b480      	push	{r7}
 8000e52:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e54:	bf00      	nop
 8000e56:	46bd      	mov	sp, r7
 8000e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e5c:	4770      	bx	lr

08000e5e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e5e:	b580      	push	{r7, lr}
 8000e60:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e62:	f000 f8c9 	bl	8000ff8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e66:	bf00      	nop
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8000e6e:	f000 fa73 	bl	8001358 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8000e72:	bf00      	nop
 8000e74:	bd80      	pop	{r7, pc}

08000e76 <RCC_IRQHandler>:

/**
  * @brief This function handles RCC global interrupt.
  */
void RCC_IRQHandler(void)
{
 8000e76:	b480      	push	{r7}
 8000e78:	af00      	add	r7, sp, #0

  /* USER CODE END RCC_IRQn 0 */
  /* USER CODE BEGIN RCC_IRQn 1 */

  /* USER CODE END RCC_IRQn 1 */
}
 8000e7a:	bf00      	nop
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S1_Pin);
 8000e88:	2002      	movs	r0, #2
 8000e8a:	f000 fd91 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000e8e:	bf00      	nop
 8000e90:	bd80      	pop	{r7, pc}

08000e92 <EXTI4_IRQHandler>:

/**
  * @brief This function handles EXTI line4 interrupt.
  */
void EXTI4_IRQHandler(void)
{
 8000e92:	b580      	push	{r7, lr}
 8000e94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI4_IRQn 0 */

  /* USER CODE END EXTI4_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(S2_Pin);
 8000e96:	2010      	movs	r0, #16
 8000e98:	f000 fd8a 	bl	80019b0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI4_IRQn 1 */

  /* USER CODE END EXTI4_IRQn 1 */
}
 8000e9c:	bf00      	nop
 8000e9e:	bd80      	pop	{r7, pc}

08000ea0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000ea4:	4802      	ldr	r0, [pc, #8]	@ (8000eb0 <USART1_IRQHandler+0x10>)
 8000ea6:	f002 fe95 	bl	8003bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8000eaa:	bf00      	nop
 8000eac:	bd80      	pop	{r7, pc}
 8000eae:	bf00      	nop
 8000eb0:	200000a8 	.word	0x200000a8

08000eb4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000eb8:	4802      	ldr	r0, [pc, #8]	@ (8000ec4 <USART2_IRQHandler+0x10>)
 8000eba:	f002 fe8b 	bl	8003bd4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000ebe:	bf00      	nop
 8000ec0:	bd80      	pop	{r7, pc}
 8000ec2:	bf00      	nop
 8000ec4:	20000130 	.word	0x20000130

08000ec8 <FPU_IRQHandler>:

/**
  * @brief This function handles FPU global interrupt.
  */
void FPU_IRQHandler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0

  /* USER CODE END FPU_IRQn 0 */
  /* USER CODE BEGIN FPU_IRQn 1 */

  /* USER CODE END FPU_IRQn 1 */
}
 8000ecc:	bf00      	nop
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed4:	4770      	bx	lr
	...

08000ed8 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8000ed8:	b480      	push	{r7}
 8000eda:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <SystemInit+0x20>)
 8000ede:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000ee2:	4a05      	ldr	r2, [pc, #20]	@ (8000ef8 <SystemInit+0x20>)
 8000ee4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000ee8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8000eec:	bf00      	nop
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef4:	4770      	bx	lr
 8000ef6:	bf00      	nop
 8000ef8:	e000ed00 	.word	0xe000ed00

08000efc <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8000efc:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000f34 <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000f00:	f7ff ffea 	bl	8000ed8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000f04:	480c      	ldr	r0, [pc, #48]	@ (8000f38 <LoopForever+0x6>)
  ldr r1, =_edata
 8000f06:	490d      	ldr	r1, [pc, #52]	@ (8000f3c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000f08:	4a0d      	ldr	r2, [pc, #52]	@ (8000f40 <LoopForever+0xe>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0a      	ldr	r2, [pc, #40]	@ (8000f44 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000f1c:	4c0a      	ldr	r4, [pc, #40]	@ (8000f48 <LoopForever+0x16>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000f2a:	f004 fa95 	bl	8005458 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8000f2e:	f7ff fb07 	bl	8000540 <main>

08000f32 <LoopForever>:

LoopForever:
    b LoopForever
 8000f32:	e7fe      	b.n	8000f32 <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8000f34:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f3c:	20000038 	.word	0x20000038
  ldr r2, =_sidata
 8000f40:	08005b40 	.word	0x08005b40
  ldr r2, =_sbss
 8000f44:	20000038 	.word	0x20000038
  ldr r4, =_ebss
 8000f48:	200005f0 	.word	0x200005f0

08000f4c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8000f4c:	e7fe      	b.n	8000f4c <ADC1_2_IRQHandler>

08000f4e <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f4e:	b580      	push	{r7, lr}
 8000f50:	b082      	sub	sp, #8
 8000f52:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000f54:	2300      	movs	r3, #0
 8000f56:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f58:	2003      	movs	r0, #3
 8000f5a:	f000 f93d 	bl	80011d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f5e:	200f      	movs	r0, #15
 8000f60:	f000 f80e 	bl	8000f80 <HAL_InitTick>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d002      	beq.n	8000f70 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8000f6a:	2301      	movs	r3, #1
 8000f6c:	71fb      	strb	r3, [r7, #7]
 8000f6e:	e001      	b.n	8000f74 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000f70:	f7ff fe02 	bl	8000b78 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000f74:	79fb      	ldrb	r3, [r7, #7]
}
 8000f76:	4618      	mov	r0, r3
 8000f78:	3708      	adds	r7, #8
 8000f7a:	46bd      	mov	sp, r7
 8000f7c:	bd80      	pop	{r7, pc}
	...

08000f80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	b084      	sub	sp, #16
 8000f84:	af00      	add	r7, sp, #0
 8000f86:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000f88:	2300      	movs	r3, #0
 8000f8a:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8000f8c:	4b17      	ldr	r3, [pc, #92]	@ (8000fec <HAL_InitTick+0x6c>)
 8000f8e:	781b      	ldrb	r3, [r3, #0]
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d023      	beq.n	8000fdc <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 8000f94:	4b16      	ldr	r3, [pc, #88]	@ (8000ff0 <HAL_InitTick+0x70>)
 8000f96:	681a      	ldr	r2, [r3, #0]
 8000f98:	4b14      	ldr	r3, [pc, #80]	@ (8000fec <HAL_InitTick+0x6c>)
 8000f9a:	781b      	ldrb	r3, [r3, #0]
 8000f9c:	4619      	mov	r1, r3
 8000f9e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000fa2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000fa6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 f949 	bl	8001242 <HAL_SYSTICK_Config>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d10f      	bne.n	8000fd6 <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	2b0f      	cmp	r3, #15
 8000fba:	d809      	bhi.n	8000fd0 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	6879      	ldr	r1, [r7, #4]
 8000fc0:	f04f 30ff 	mov.w	r0, #4294967295
 8000fc4:	f000 f913 	bl	80011ee <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc8:	4a0a      	ldr	r2, [pc, #40]	@ (8000ff4 <HAL_InitTick+0x74>)
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	6013      	str	r3, [r2, #0]
 8000fce:	e007      	b.n	8000fe0 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	73fb      	strb	r3, [r7, #15]
 8000fd4:	e004      	b.n	8000fe0 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	73fb      	strb	r3, [r7, #15]
 8000fda:	e001      	b.n	8000fe0 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000fdc:	2301      	movs	r3, #1
 8000fde:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000fe2:	4618      	mov	r0, r3
 8000fe4:	3710      	adds	r7, #16
 8000fe6:	46bd      	mov	sp, r7
 8000fe8:	bd80      	pop	{r7, pc}
 8000fea:	bf00      	nop
 8000fec:	20000014 	.word	0x20000014
 8000ff0:	2000000c 	.word	0x2000000c
 8000ff4:	20000010 	.word	0x20000010

08000ff8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <HAL_IncTick+0x20>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	461a      	mov	r2, r3
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <HAL_IncTick+0x24>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4413      	add	r3, r2
 8001008:	4a04      	ldr	r2, [pc, #16]	@ (800101c <HAL_IncTick+0x24>)
 800100a:	6013      	str	r3, [r2, #0]
}
 800100c:	bf00      	nop
 800100e:	46bd      	mov	sp, r7
 8001010:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop
 8001018:	20000014 	.word	0x20000014
 800101c:	200001e4 	.word	0x200001e4

08001020 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001020:	b480      	push	{r7}
 8001022:	af00      	add	r7, sp, #0
  return uwTick;
 8001024:	4b03      	ldr	r3, [pc, #12]	@ (8001034 <HAL_GetTick+0x14>)
 8001026:	681b      	ldr	r3, [r3, #0]
}
 8001028:	4618      	mov	r0, r3
 800102a:	46bd      	mov	sp, r7
 800102c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001030:	4770      	bx	lr
 8001032:	bf00      	nop
 8001034:	200001e4 	.word	0x200001e4

08001038 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	f003 0307 	and.w	r3, r3, #7
 8001046:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001048:	4b0c      	ldr	r3, [pc, #48]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800104a:	68db      	ldr	r3, [r3, #12]
 800104c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800104e:	68ba      	ldr	r2, [r7, #8]
 8001050:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001054:	4013      	ands	r3, r2
 8001056:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001058:	68fb      	ldr	r3, [r7, #12]
 800105a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800105c:	68bb      	ldr	r3, [r7, #8]
 800105e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001060:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001064:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001068:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800106a:	4a04      	ldr	r2, [pc, #16]	@ (800107c <__NVIC_SetPriorityGrouping+0x44>)
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	60d3      	str	r3, [r2, #12]
}
 8001070:	bf00      	nop
 8001072:	3714      	adds	r7, #20
 8001074:	46bd      	mov	sp, r7
 8001076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107a:	4770      	bx	lr
 800107c:	e000ed00 	.word	0xe000ed00

08001080 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001080:	b480      	push	{r7}
 8001082:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001084:	4b04      	ldr	r3, [pc, #16]	@ (8001098 <__NVIC_GetPriorityGrouping+0x18>)
 8001086:	68db      	ldr	r3, [r3, #12]
 8001088:	0a1b      	lsrs	r3, r3, #8
 800108a:	f003 0307 	and.w	r3, r3, #7
}
 800108e:	4618      	mov	r0, r3
 8001090:	46bd      	mov	sp, r7
 8001092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001096:	4770      	bx	lr
 8001098:	e000ed00 	.word	0xe000ed00

0800109c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800109c:	b480      	push	{r7}
 800109e:	b083      	sub	sp, #12
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	db0b      	blt.n	80010c6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80010ae:	79fb      	ldrb	r3, [r7, #7]
 80010b0:	f003 021f 	and.w	r2, r3, #31
 80010b4:	4907      	ldr	r1, [pc, #28]	@ (80010d4 <__NVIC_EnableIRQ+0x38>)
 80010b6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010ba:	095b      	lsrs	r3, r3, #5
 80010bc:	2001      	movs	r0, #1
 80010be:	fa00 f202 	lsl.w	r2, r0, r2
 80010c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80010c6:	bf00      	nop
 80010c8:	370c      	adds	r7, #12
 80010ca:	46bd      	mov	sp, r7
 80010cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d0:	4770      	bx	lr
 80010d2:	bf00      	nop
 80010d4:	e000e100 	.word	0xe000e100

080010d8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	4603      	mov	r3, r0
 80010e0:	6039      	str	r1, [r7, #0]
 80010e2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80010e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010e8:	2b00      	cmp	r3, #0
 80010ea:	db0a      	blt.n	8001102 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	b2da      	uxtb	r2, r3
 80010f0:	490c      	ldr	r1, [pc, #48]	@ (8001124 <__NVIC_SetPriority+0x4c>)
 80010f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010f6:	0112      	lsls	r2, r2, #4
 80010f8:	b2d2      	uxtb	r2, r2
 80010fa:	440b      	add	r3, r1
 80010fc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001100:	e00a      	b.n	8001118 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001102:	683b      	ldr	r3, [r7, #0]
 8001104:	b2da      	uxtb	r2, r3
 8001106:	4908      	ldr	r1, [pc, #32]	@ (8001128 <__NVIC_SetPriority+0x50>)
 8001108:	79fb      	ldrb	r3, [r7, #7]
 800110a:	f003 030f 	and.w	r3, r3, #15
 800110e:	3b04      	subs	r3, #4
 8001110:	0112      	lsls	r2, r2, #4
 8001112:	b2d2      	uxtb	r2, r2
 8001114:	440b      	add	r3, r1
 8001116:	761a      	strb	r2, [r3, #24]
}
 8001118:	bf00      	nop
 800111a:	370c      	adds	r7, #12
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr
 8001124:	e000e100 	.word	0xe000e100
 8001128:	e000ed00 	.word	0xe000ed00

0800112c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800112c:	b480      	push	{r7}
 800112e:	b089      	sub	sp, #36	@ 0x24
 8001130:	af00      	add	r7, sp, #0
 8001132:	60f8      	str	r0, [r7, #12]
 8001134:	60b9      	str	r1, [r7, #8]
 8001136:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	f003 0307 	and.w	r3, r3, #7
 800113e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f1c3 0307 	rsb	r3, r3, #7
 8001146:	2b04      	cmp	r3, #4
 8001148:	bf28      	it	cs
 800114a:	2304      	movcs	r3, #4
 800114c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800114e:	69fb      	ldr	r3, [r7, #28]
 8001150:	3304      	adds	r3, #4
 8001152:	2b06      	cmp	r3, #6
 8001154:	d902      	bls.n	800115c <NVIC_EncodePriority+0x30>
 8001156:	69fb      	ldr	r3, [r7, #28]
 8001158:	3b03      	subs	r3, #3
 800115a:	e000      	b.n	800115e <NVIC_EncodePriority+0x32>
 800115c:	2300      	movs	r3, #0
 800115e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001160:	f04f 32ff 	mov.w	r2, #4294967295
 8001164:	69bb      	ldr	r3, [r7, #24]
 8001166:	fa02 f303 	lsl.w	r3, r2, r3
 800116a:	43da      	mvns	r2, r3
 800116c:	68bb      	ldr	r3, [r7, #8]
 800116e:	401a      	ands	r2, r3
 8001170:	697b      	ldr	r3, [r7, #20]
 8001172:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001174:	f04f 31ff 	mov.w	r1, #4294967295
 8001178:	697b      	ldr	r3, [r7, #20]
 800117a:	fa01 f303 	lsl.w	r3, r1, r3
 800117e:	43d9      	mvns	r1, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001184:	4313      	orrs	r3, r2
         );
}
 8001186:	4618      	mov	r0, r3
 8001188:	3724      	adds	r7, #36	@ 0x24
 800118a:	46bd      	mov	sp, r7
 800118c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001190:	4770      	bx	lr
	...

08001194 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b082      	sub	sp, #8
 8001198:	af00      	add	r7, sp, #0
 800119a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	3b01      	subs	r3, #1
 80011a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011a4:	d301      	bcc.n	80011aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011a6:	2301      	movs	r3, #1
 80011a8:	e00f      	b.n	80011ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011aa:	4a0a      	ldr	r2, [pc, #40]	@ (80011d4 <SysTick_Config+0x40>)
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	3b01      	subs	r3, #1
 80011b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011b2:	210f      	movs	r1, #15
 80011b4:	f04f 30ff 	mov.w	r0, #4294967295
 80011b8:	f7ff ff8e 	bl	80010d8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011bc:	4b05      	ldr	r3, [pc, #20]	@ (80011d4 <SysTick_Config+0x40>)
 80011be:	2200      	movs	r2, #0
 80011c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011c2:	4b04      	ldr	r3, [pc, #16]	@ (80011d4 <SysTick_Config+0x40>)
 80011c4:	2207      	movs	r2, #7
 80011c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011c8:	2300      	movs	r3, #0
}
 80011ca:	4618      	mov	r0, r3
 80011cc:	3708      	adds	r7, #8
 80011ce:	46bd      	mov	sp, r7
 80011d0:	bd80      	pop	{r7, pc}
 80011d2:	bf00      	nop
 80011d4:	e000e010 	.word	0xe000e010

080011d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	b082      	sub	sp, #8
 80011dc:	af00      	add	r7, sp, #0
 80011de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011e0:	6878      	ldr	r0, [r7, #4]
 80011e2:	f7ff ff29 	bl	8001038 <__NVIC_SetPriorityGrouping>
}
 80011e6:	bf00      	nop
 80011e8:	3708      	adds	r7, #8
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}

080011ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b086      	sub	sp, #24
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	4603      	mov	r3, r0
 80011f6:	60b9      	str	r1, [r7, #8]
 80011f8:	607a      	str	r2, [r7, #4]
 80011fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80011fc:	2300      	movs	r3, #0
 80011fe:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001200:	f7ff ff3e 	bl	8001080 <__NVIC_GetPriorityGrouping>
 8001204:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001206:	687a      	ldr	r2, [r7, #4]
 8001208:	68b9      	ldr	r1, [r7, #8]
 800120a:	6978      	ldr	r0, [r7, #20]
 800120c:	f7ff ff8e 	bl	800112c <NVIC_EncodePriority>
 8001210:	4602      	mov	r2, r0
 8001212:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001216:	4611      	mov	r1, r2
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff ff5d 	bl	80010d8 <__NVIC_SetPriority>
}
 800121e:	bf00      	nop
 8001220:	3718      	adds	r7, #24
 8001222:	46bd      	mov	sp, r7
 8001224:	bd80      	pop	{r7, pc}

08001226 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001226:	b580      	push	{r7, lr}
 8001228:	b082      	sub	sp, #8
 800122a:	af00      	add	r7, sp, #0
 800122c:	4603      	mov	r3, r0
 800122e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001230:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff ff31 	bl	800109c <__NVIC_EnableIRQ>
}
 800123a:	bf00      	nop
 800123c:	3708      	adds	r7, #8
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	b082      	sub	sp, #8
 8001246:	af00      	add	r7, sp, #0
 8001248:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800124a:	6878      	ldr	r0, [r7, #4]
 800124c:	f7ff ffa2 	bl	8001194 <SysTick_Config>
 8001250:	4603      	mov	r3, r0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3708      	adds	r7, #8
 8001256:	46bd      	mov	sp, r7
 8001258:	bd80      	pop	{r7, pc}

0800125a <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800125a:	b480      	push	{r7}
 800125c:	b085      	sub	sp, #20
 800125e:	af00      	add	r7, sp, #0
 8001260:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	73fb      	strb	r3, [r7, #15]

  /* Check the DMA peripheral state */
  if (hdma->State != HAL_DMA_STATE_BUSY)
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800126c:	b2db      	uxtb	r3, r3
 800126e:	2b02      	cmp	r3, #2
 8001270:	d008      	beq.n	8001284 <HAL_DMA_Abort+0x2a>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	2204      	movs	r2, #4
 8001276:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001278:	687b      	ldr	r3, [r7, #4]
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8001280:	2301      	movs	r3, #1
 8001282:	e022      	b.n	80012ca <HAL_DMA_Abort+0x70>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	681a      	ldr	r2, [r3, #0]
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f022 020e 	bic.w	r2, r2, #14
 8001292:	601a      	str	r2, [r3, #0]
    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
#endif /* DMAMUX1 */

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	681a      	ldr	r2, [r3, #0]
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f022 0201 	bic.w	r2, r2, #1
 80012a2:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012a8:	f003 021c 	and.w	r2, r3, #28
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012b0:	2101      	movs	r1, #1
 80012b2:	fa01 f202 	lsl.w	r2, r1, r2
 80012b6:	605a      	str	r2, [r3, #4]
    }

#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	2201      	movs	r2, #1
 80012bc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	2200      	movs	r2, #0
 80012c4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    return status;
 80012c8:	7bfb      	ldrb	r3, [r7, #15]
  }
}
 80012ca:	4618      	mov	r0, r3
 80012cc:	3714      	adds	r7, #20
 80012ce:	46bd      	mov	sp, r7
 80012d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d4:	4770      	bx	lr

080012d6 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80012d6:	b580      	push	{r7, lr}
 80012d8:	b084      	sub	sp, #16
 80012da:	af00      	add	r7, sp, #0
 80012dc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80012de:	2300      	movs	r3, #0
 80012e0:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b02      	cmp	r3, #2
 80012ec:	d005      	beq.n	80012fa <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	2204      	movs	r2, #4
 80012f2:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80012f4:	2301      	movs	r3, #1
 80012f6:	73fb      	strb	r3, [r7, #15]
 80012f8:	e029      	b.n	800134e <HAL_DMA_Abort_IT+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	681b      	ldr	r3, [r3, #0]
 80012fe:	681a      	ldr	r2, [r3, #0]
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f022 020e 	bic.w	r2, r2, #14
 8001308:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681a      	ldr	r2, [r3, #0]
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	681b      	ldr	r3, [r3, #0]
 8001314:	f022 0201 	bic.w	r2, r2, #1
 8001318:	601a      	str	r2, [r3, #0]
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
    }

#else
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1CU));
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800131e:	f003 021c 	and.w	r2, r3, #28
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001326:	2101      	movs	r1, #1
 8001328:	fa01 f202 	lsl.w	r2, r1, r2
 800132c:	605a      	str	r2, [r3, #4]
#endif /* DMAMUX1 */

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2201      	movs	r2, #1
 8001332:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	2200      	movs	r2, #0
 800133a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001342:	2b00      	cmp	r3, #0
 8001344:	d003      	beq.n	800134e <HAL_DMA_Abort_IT+0x78>
    {
      hdma->XferAbortCallback(hdma);
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800134a:	6878      	ldr	r0, [r7, #4]
 800134c:	4798      	blx	r3
    }
  }
  return status;
 800134e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001350:	4618      	mov	r0, r3
 8001352:	3710      	adds	r7, #16
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}

08001358 <HAL_FLASH_IRQHandler>:
/**
  * @brief Handle FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b084      	sub	sp, #16
 800135c:	af00      	add	r7, sp, #0
  uint32_t tmp_page;
  uint32_t error;
  FLASH_ProcedureTypeDef procedure;

  /* If the operation is completed, disable the PG, PNB, MER1, MER2 and PER Bit */
  CLEAR_BIT(FLASH->CR, (FLASH_CR_PG | FLASH_CR_MER1 | FLASH_CR_PER | FLASH_CR_PNB));
 800135e:	4b67      	ldr	r3, [pc, #412]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 8001360:	695b      	ldr	r3, [r3, #20]
 8001362:	4a66      	ldr	r2, [pc, #408]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 8001364:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8001368:	f023 0307 	bic.w	r3, r3, #7
 800136c:	6153      	str	r3, [r2, #20]
#if defined (STM32L471xx) || defined (STM32L475xx) || defined (STM32L476xx) || defined (STM32L485xx) || defined (STM32L486xx) || \
    defined (STM32L496xx) || defined (STM32L4A6xx) || \
    defined (STM32L4P5xx) || defined (STM32L4Q5xx) || \
    defined (STM32L4R5xx) || defined (STM32L4R7xx) || defined (STM32L4R9xx) || defined (STM32L4S5xx) || defined (STM32L4S7xx) || defined (STM32L4S9xx)
  CLEAR_BIT(FLASH->CR, FLASH_CR_MER2);
 800136e:	4b63      	ldr	r3, [pc, #396]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 8001370:	695b      	ldr	r3, [r3, #20]
 8001372:	4a62      	ldr	r2, [pc, #392]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 8001374:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8001378:	6153      	str	r3, [r2, #20]
#endif

  /* Disable the FSTPG Bit only if it is the last row programmed */
  if(pFlash.ProcedureOnGoing == FLASH_PROC_PROGRAM_LAST)
 800137a:	4b61      	ldr	r3, [pc, #388]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 800137c:	7a1b      	ldrb	r3, [r3, #8]
 800137e:	b2db      	uxtb	r3, r3
 8001380:	2b04      	cmp	r3, #4
 8001382:	d105      	bne.n	8001390 <HAL_FLASH_IRQHandler+0x38>
  {
    CLEAR_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8001384:	4b5d      	ldr	r3, [pc, #372]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 8001386:	695b      	ldr	r3, [r3, #20]
 8001388:	4a5c      	ldr	r2, [pc, #368]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 800138a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800138e:	6153      	str	r3, [r2, #20]
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8001390:	4b5a      	ldr	r3, [pc, #360]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 8001392:	691a      	ldr	r2, [r3, #16]
 8001394:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8001398:	4013      	ands	r3, r2
 800139a:	60fb      	str	r3, [r7, #12]

  if (error !=0U)
 800139c:	68fb      	ldr	r3, [r7, #12]
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d044      	beq.n	800142c <HAL_FLASH_IRQHandler+0xd4>
  {
    /*Save the error code*/
    pFlash.ErrorCode |= error;
 80013a2:	4b57      	ldr	r3, [pc, #348]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80013a4:	685a      	ldr	r2, [r3, #4]
 80013a6:	68fb      	ldr	r3, [r7, #12]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	4a55      	ldr	r2, [pc, #340]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80013ac:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80013ae:	68fb      	ldr	r3, [r7, #12]
 80013b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80013b4:	d307      	bcc.n	80013c6 <HAL_FLASH_IRQHandler+0x6e>
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 80013b8:	699a      	ldr	r2, [r3, #24]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80013c0:	494e      	ldr	r1, [pc, #312]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 80013c2:	4313      	orrs	r3, r2
 80013c4:	618b      	str	r3, [r1, #24]
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d004      	beq.n	80013da <HAL_FLASH_IRQHandler+0x82>
 80013d0:	4a4a      	ldr	r2, [pc, #296]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80013d8:	6113      	str	r3, [r2, #16]

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches() ;
 80013da:	f000 f8dd 	bl	8001598 <FLASH_FlushCaches>

    /* FLASH error interrupt user callback */
    procedure = pFlash.ProcedureOnGoing;
 80013de:	4b48      	ldr	r3, [pc, #288]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80013e0:	7a1b      	ldrb	r3, [r3, #8]
 80013e2:	72fb      	strb	r3, [r7, #11]
    if(procedure == FLASH_PROC_PAGE_ERASE)
 80013e4:	7afb      	ldrb	r3, [r7, #11]
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d105      	bne.n	80013f6 <HAL_FLASH_IRQHandler+0x9e>
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Page);
 80013ea:	4b45      	ldr	r3, [pc, #276]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80013ec:	695b      	ldr	r3, [r3, #20]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f000 f892 	bl	8001518 <HAL_FLASH_OperationErrorCallback>
 80013f4:	e017      	b.n	8001426 <HAL_FLASH_IRQHandler+0xce>
    }
    else if(procedure == FLASH_PROC_MASS_ERASE)
 80013f6:	7afb      	ldrb	r3, [r7, #11]
 80013f8:	2b02      	cmp	r3, #2
 80013fa:	d105      	bne.n	8001408 <HAL_FLASH_IRQHandler+0xb0>
    {
        HAL_FLASH_OperationErrorCallback(pFlash.Bank);
 80013fc:	4b40      	ldr	r3, [pc, #256]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80013fe:	691b      	ldr	r3, [r3, #16]
 8001400:	4618      	mov	r0, r3
 8001402:	f000 f889 	bl	8001518 <HAL_FLASH_OperationErrorCallback>
 8001406:	e00e      	b.n	8001426 <HAL_FLASH_IRQHandler+0xce>
    }
    else if((procedure == FLASH_PROC_PROGRAM) ||
 8001408:	7afb      	ldrb	r3, [r7, #11]
 800140a:	2b03      	cmp	r3, #3
 800140c:	d002      	beq.n	8001414 <HAL_FLASH_IRQHandler+0xbc>
 800140e:	7afb      	ldrb	r3, [r7, #11]
 8001410:	2b04      	cmp	r3, #4
 8001412:	d105      	bne.n	8001420 <HAL_FLASH_IRQHandler+0xc8>
            (procedure == FLASH_PROC_PROGRAM_LAST))
    {
       HAL_FLASH_OperationErrorCallback(pFlash.Address);
 8001414:	4b3a      	ldr	r3, [pc, #232]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001416:	68db      	ldr	r3, [r3, #12]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f87d 	bl	8001518 <HAL_FLASH_OperationErrorCallback>
 800141e:	e002      	b.n	8001426 <HAL_FLASH_IRQHandler+0xce>
    }
    else
    {
       HAL_FLASH_OperationErrorCallback(0U);
 8001420:	2000      	movs	r0, #0
 8001422:	f000 f879 	bl	8001518 <HAL_FLASH_OperationErrorCallback>
    }

    /*Stop the procedure ongoing*/
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8001426:	4b36      	ldr	r3, [pc, #216]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001428:	2200      	movs	r2, #0
 800142a:	721a      	strb	r2, [r3, #8]
  }

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != 0U)
 800142c:	4b33      	ldr	r3, [pc, #204]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 800142e:	691b      	ldr	r3, [r3, #16]
 8001430:	f003 0301 	and.w	r3, r3, #1
 8001434:	2b00      	cmp	r3, #0
 8001436:	d04f      	beq.n	80014d8 <HAL_FLASH_IRQHandler+0x180>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8001438:	4b30      	ldr	r3, [pc, #192]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 800143a:	2201      	movs	r2, #1
 800143c:	611a      	str	r2, [r3, #16]

    if(pFlash.ProcedureOnGoing == FLASH_PROC_PAGE_ERASE)
 800143e:	4b30      	ldr	r3, [pc, #192]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001440:	7a1b      	ldrb	r3, [r3, #8]
 8001442:	b2db      	uxtb	r3, r3
 8001444:	2b01      	cmp	r3, #1
 8001446:	d12b      	bne.n	80014a0 <HAL_FLASH_IRQHandler+0x148>
    {
      /* Nb of pages to erased can be decreased */
      pFlash.NbPagesToErase--;
 8001448:	4b2d      	ldr	r3, [pc, #180]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 800144a:	699b      	ldr	r3, [r3, #24]
 800144c:	3b01      	subs	r3, #1
 800144e:	4a2c      	ldr	r2, [pc, #176]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001450:	6193      	str	r3, [r2, #24]

      /* Check if there are still pages to erase*/
      if(pFlash.NbPagesToErase != 0U)
 8001452:	4b2b      	ldr	r3, [pc, #172]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001454:	699b      	ldr	r3, [r3, #24]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d013      	beq.n	8001482 <HAL_FLASH_IRQHandler+0x12a>
      {
        /* Indicate user which page has been erased*/
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 800145a:	4b29      	ldr	r3, [pc, #164]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 800145c:	695b      	ldr	r3, [r3, #20]
 800145e:	4618      	mov	r0, r3
 8001460:	f000 f850 	bl	8001504 <HAL_FLASH_EndOfOperationCallback>

        /* Increment page number */
        pFlash.Page++;
 8001464:	4b26      	ldr	r3, [pc, #152]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001466:	695b      	ldr	r3, [r3, #20]
 8001468:	3301      	adds	r3, #1
 800146a:	4a25      	ldr	r2, [pc, #148]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 800146c:	6153      	str	r3, [r2, #20]
        tmp_page = pFlash.Page;
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001470:	695b      	ldr	r3, [r3, #20]
 8001472:	607b      	str	r3, [r7, #4]
        FLASH_PageErase(tmp_page, pFlash.Bank);
 8001474:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001476:	691b      	ldr	r3, [r3, #16]
 8001478:	4619      	mov	r1, r3
 800147a:	6878      	ldr	r0, [r7, #4]
 800147c:	f000 f856 	bl	800152c <FLASH_PageErase>
 8001480:	e02a      	b.n	80014d8 <HAL_FLASH_IRQHandler+0x180>
      }
      else
      {
        /* No more pages to Erase */
        /* Reset Address and stop Erase pages procedure */
        pFlash.Page = 0xFFFFFFFFU;
 8001482:	4b1f      	ldr	r3, [pc, #124]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001484:	f04f 32ff 	mov.w	r2, #4294967295
 8001488:	615a      	str	r2, [r3, #20]
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 800148a:	4b1d      	ldr	r3, [pc, #116]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 800148c:	2200      	movs	r2, #0
 800148e:	721a      	strb	r2, [r3, #8]

        /* Flush the caches to be sure of the data consistency */
        FLASH_FlushCaches() ;
 8001490:	f000 f882 	bl	8001598 <FLASH_FlushCaches>

        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Page);
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	4618      	mov	r0, r3
 800149a:	f000 f833 	bl	8001504 <HAL_FLASH_EndOfOperationCallback>
 800149e:	e01b      	b.n	80014d8 <HAL_FLASH_IRQHandler+0x180>
      }
    }
    else
    {
      /* Flush the caches to be sure of the data consistency */
      FLASH_FlushCaches() ;
 80014a0:	f000 f87a 	bl	8001598 <FLASH_FlushCaches>

      procedure = pFlash.ProcedureOnGoing;
 80014a4:	4b16      	ldr	r3, [pc, #88]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80014a6:	7a1b      	ldrb	r3, [r3, #8]
 80014a8:	72fb      	strb	r3, [r7, #11]
      if(procedure == FLASH_PROC_MASS_ERASE)
 80014aa:	7afb      	ldrb	r3, [r7, #11]
 80014ac:	2b02      	cmp	r3, #2
 80014ae:	d105      	bne.n	80014bc <HAL_FLASH_IRQHandler+0x164>
      {
        /* MassErase ended. Return the selected bank */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Bank);
 80014b0:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80014b2:	691b      	ldr	r3, [r3, #16]
 80014b4:	4618      	mov	r0, r3
 80014b6:	f000 f825 	bl	8001504 <HAL_FLASH_EndOfOperationCallback>
 80014ba:	e00a      	b.n	80014d2 <HAL_FLASH_IRQHandler+0x17a>
      }
      else if((procedure == FLASH_PROC_PROGRAM) ||
 80014bc:	7afb      	ldrb	r3, [r7, #11]
 80014be:	2b03      	cmp	r3, #3
 80014c0:	d002      	beq.n	80014c8 <HAL_FLASH_IRQHandler+0x170>
 80014c2:	7afb      	ldrb	r3, [r7, #11]
 80014c4:	2b04      	cmp	r3, #4
 80014c6:	d104      	bne.n	80014d2 <HAL_FLASH_IRQHandler+0x17a>
              (procedure == FLASH_PROC_PROGRAM_LAST))
      {
        /* Program ended. Return the selected address */
        /* FLASH EOP interrupt user callback */
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 80014c8:	4b0d      	ldr	r3, [pc, #52]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80014ca:	68db      	ldr	r3, [r3, #12]
 80014cc:	4618      	mov	r0, r3
 80014ce:	f000 f819 	bl	8001504 <HAL_FLASH_EndOfOperationCallback>
      {
        /* Nothing to do */
      }

      /*Clear the procedure ongoing*/
      pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	721a      	strb	r2, [r3, #8]
    }
  }

  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80014d8:	4b09      	ldr	r3, [pc, #36]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80014da:	7a1b      	ldrb	r3, [r3, #8]
 80014dc:	b2db      	uxtb	r3, r3
 80014de:	2b00      	cmp	r3, #0
 80014e0:	d108      	bne.n	80014f4 <HAL_FLASH_IRQHandler+0x19c>
  {
    /* Disable End of Operation and Error interrupts */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP | FLASH_IT_OPERR);
 80014e2:	4b06      	ldr	r3, [pc, #24]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 80014e4:	695b      	ldr	r3, [r3, #20]
 80014e6:	4a05      	ldr	r2, [pc, #20]	@ (80014fc <HAL_FLASH_IRQHandler+0x1a4>)
 80014e8:	f023 7340 	bic.w	r3, r3, #50331648	@ 0x3000000
 80014ec:	6153      	str	r3, [r2, #20]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <HAL_FLASH_IRQHandler+0x1a8>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
  }
}
 80014f4:	bf00      	nop
 80014f6:	3710      	adds	r7, #16
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40022000 	.word	0x40022000
 8001500:	20000018 	.word	0x20000018

08001504 <HAL_FLASH_EndOfOperationCallback>:
  *                    (if 0xFFFFFFFF, it means that all the selected pages have been erased)
  *                  Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8001504:	b480      	push	{r7}
 8001506:	b083      	sub	sp, #12
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
   */
}
 800150c:	bf00      	nop
 800150e:	370c      	adds	r7, #12
 8001510:	46bd      	mov	sp, r7
 8001512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001516:	4770      	bx	lr

08001518 <HAL_FLASH_OperationErrorCallback>:
  *                 Page Erase: Page number which returned an error
  *                 Program: Address which was selected for data program
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8001518:	b480      	push	{r7}
 800151a:	b083      	sub	sp, #12
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
  UNUSED(ReturnValue);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */
}
 8001520:	bf00      	nop
 8001522:	370c      	adds	r7, #12
 8001524:	46bd      	mov	sp, r7
 8001526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152a:	4770      	bx	lr

0800152c <FLASH_PageErase>:
  *            @arg FLASH_BANK_1: Page in bank 1 to be erased
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 800152c:	b480      	push	{r7}
 800152e:	b083      	sub	sp, #12
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
 8001534:	6039      	str	r1, [r7, #0]
  else
#endif
  {
    assert_param(IS_FLASH_BANK_EXCLUSIVE(Banks));

    if((Banks & FLASH_BANK_1) != 0U)
 8001536:	683b      	ldr	r3, [r7, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	2b00      	cmp	r3, #0
 800153e:	d006      	beq.n	800154e <FLASH_PageErase+0x22>
    {
      CLEAR_BIT(FLASH->CR, FLASH_CR_BKER);
 8001540:	4b14      	ldr	r3, [pc, #80]	@ (8001594 <FLASH_PageErase+0x68>)
 8001542:	695b      	ldr	r3, [r3, #20]
 8001544:	4a13      	ldr	r2, [pc, #76]	@ (8001594 <FLASH_PageErase+0x68>)
 8001546:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800154a:	6153      	str	r3, [r2, #20]
 800154c:	e005      	b.n	800155a <FLASH_PageErase+0x2e>
    }
    else
    {
      SET_BIT(FLASH->CR, FLASH_CR_BKER);
 800154e:	4b11      	ldr	r3, [pc, #68]	@ (8001594 <FLASH_PageErase+0x68>)
 8001550:	695b      	ldr	r3, [r3, #20]
 8001552:	4a10      	ldr	r2, [pc, #64]	@ (8001594 <FLASH_PageErase+0x68>)
 8001554:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001558:	6153      	str	r3, [r2, #20]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 800155a:	4b0e      	ldr	r3, [pc, #56]	@ (8001594 <FLASH_PageErase+0x68>)
 800155c:	695b      	ldr	r3, [r3, #20]
 800155e:	f423 62ff 	bic.w	r2, r3, #2040	@ 0x7f8
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	00db      	lsls	r3, r3, #3
 8001566:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 800156a:	490a      	ldr	r1, [pc, #40]	@ (8001594 <FLASH_PageErase+0x68>)
 800156c:	4313      	orrs	r3, r2
 800156e:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8001570:	4b08      	ldr	r3, [pc, #32]	@ (8001594 <FLASH_PageErase+0x68>)
 8001572:	695b      	ldr	r3, [r3, #20]
 8001574:	4a07      	ldr	r2, [pc, #28]	@ (8001594 <FLASH_PageErase+0x68>)
 8001576:	f043 0302 	orr.w	r3, r3, #2
 800157a:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 800157c:	4b05      	ldr	r3, [pc, #20]	@ (8001594 <FLASH_PageErase+0x68>)
 800157e:	695b      	ldr	r3, [r3, #20]
 8001580:	4a04      	ldr	r2, [pc, #16]	@ (8001594 <FLASH_PageErase+0x68>)
 8001582:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001586:	6153      	str	r3, [r2, #20]
}
 8001588:	bf00      	nop
 800158a:	370c      	adds	r7, #12
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr
 8001594:	40022000 	.word	0x40022000

08001598 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8001598:	b480      	push	{r7}
 800159a:	b083      	sub	sp, #12
 800159c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 800159e:	4b21      	ldr	r3, [pc, #132]	@ (8001624 <FLASH_FlushCaches+0x8c>)
 80015a0:	7f1b      	ldrb	r3, [r3, #28]
 80015a2:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 80015a4:	79fb      	ldrb	r3, [r7, #7]
 80015a6:	2b01      	cmp	r3, #1
 80015a8:	d002      	beq.n	80015b0 <FLASH_FlushCaches+0x18>
 80015aa:	79fb      	ldrb	r3, [r7, #7]
 80015ac:	2b03      	cmp	r3, #3
 80015ae:	d117      	bne.n	80015e0 <FLASH_FlushCaches+0x48>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80015b0:	4b1d      	ldr	r3, [pc, #116]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a1c      	ldr	r2, [pc, #112]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015b6:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80015ba:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80015bc:	4b1a      	ldr	r3, [pc, #104]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	4a19      	ldr	r2, [pc, #100]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015c2:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80015c6:	6013      	str	r3, [r2, #0]
 80015c8:	4b17      	ldr	r3, [pc, #92]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	4a16      	ldr	r2, [pc, #88]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015ce:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80015d2:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80015d4:	4b14      	ldr	r3, [pc, #80]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015d6:	681b      	ldr	r3, [r3, #0]
 80015d8:	4a13      	ldr	r2, [pc, #76]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015da:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80015de:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80015e0:	79fb      	ldrb	r3, [r7, #7]
 80015e2:	2b02      	cmp	r3, #2
 80015e4:	d002      	beq.n	80015ec <FLASH_FlushCaches+0x54>
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b03      	cmp	r3, #3
 80015ea:	d111      	bne.n	8001610 <FLASH_FlushCaches+0x78>
     (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80015ec:	4b0e      	ldr	r3, [pc, #56]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a0d      	ldr	r2, [pc, #52]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015f2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015f6:	6013      	str	r3, [r2, #0]
 80015f8:	4b0b      	ldr	r3, [pc, #44]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	4a0a      	ldr	r2, [pc, #40]	@ (8001628 <FLASH_FlushCaches+0x90>)
 80015fe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001602:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8001604:	4b08      	ldr	r3, [pc, #32]	@ (8001628 <FLASH_FlushCaches+0x90>)
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a07      	ldr	r2, [pc, #28]	@ (8001628 <FLASH_FlushCaches+0x90>)
 800160a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800160e:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8001610:	4b04      	ldr	r3, [pc, #16]	@ (8001624 <FLASH_FlushCaches+0x8c>)
 8001612:	2200      	movs	r2, #0
 8001614:	771a      	strb	r2, [r3, #28]
}
 8001616:	bf00      	nop
 8001618:	370c      	adds	r7, #12
 800161a:	46bd      	mov	sp, r7
 800161c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001620:	4770      	bx	lr
 8001622:	bf00      	nop
 8001624:	20000018 	.word	0x20000018
 8001628:	40022000 	.word	0x40022000

0800162c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800162c:	b480      	push	{r7}
 800162e:	b087      	sub	sp, #28
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
 8001634:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001636:	2300      	movs	r3, #0
 8001638:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800163a:	e17f      	b.n	800193c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800163c:	683b      	ldr	r3, [r7, #0]
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	2101      	movs	r1, #1
 8001642:	697b      	ldr	r3, [r7, #20]
 8001644:	fa01 f303 	lsl.w	r3, r1, r3
 8001648:	4013      	ands	r3, r2
 800164a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	f000 8171 	beq.w	8001936 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001654:	683b      	ldr	r3, [r7, #0]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	f003 0303 	and.w	r3, r3, #3
 800165c:	2b01      	cmp	r3, #1
 800165e:	d005      	beq.n	800166c <HAL_GPIO_Init+0x40>
 8001660:	683b      	ldr	r3, [r7, #0]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	2b02      	cmp	r3, #2
 800166a:	d130      	bne.n	80016ce <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	689b      	ldr	r3, [r3, #8]
 8001670:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001672:	697b      	ldr	r3, [r7, #20]
 8001674:	005b      	lsls	r3, r3, #1
 8001676:	2203      	movs	r2, #3
 8001678:	fa02 f303 	lsl.w	r3, r2, r3
 800167c:	43db      	mvns	r3, r3
 800167e:	693a      	ldr	r2, [r7, #16]
 8001680:	4013      	ands	r3, r2
 8001682:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	68da      	ldr	r2, [r3, #12]
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	005b      	lsls	r3, r3, #1
 800168c:	fa02 f303 	lsl.w	r3, r2, r3
 8001690:	693a      	ldr	r2, [r7, #16]
 8001692:	4313      	orrs	r3, r2
 8001694:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	693a      	ldr	r2, [r7, #16]
 800169a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80016a2:	2201      	movs	r2, #1
 80016a4:	697b      	ldr	r3, [r7, #20]
 80016a6:	fa02 f303 	lsl.w	r3, r2, r3
 80016aa:	43db      	mvns	r3, r3
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	4013      	ands	r3, r2
 80016b0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80016b2:	683b      	ldr	r3, [r7, #0]
 80016b4:	685b      	ldr	r3, [r3, #4]
 80016b6:	091b      	lsrs	r3, r3, #4
 80016b8:	f003 0201 	and.w	r2, r3, #1
 80016bc:	697b      	ldr	r3, [r7, #20]
 80016be:	fa02 f303 	lsl.w	r3, r2, r3
 80016c2:	693a      	ldr	r2, [r7, #16]
 80016c4:	4313      	orrs	r3, r2
 80016c6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	693a      	ldr	r2, [r7, #16]
 80016cc:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80016ce:	683b      	ldr	r3, [r7, #0]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f003 0303 	and.w	r3, r3, #3
 80016d6:	2b03      	cmp	r3, #3
 80016d8:	d118      	bne.n	800170c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016de:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80016e0:	2201      	movs	r2, #1
 80016e2:	697b      	ldr	r3, [r7, #20]
 80016e4:	fa02 f303 	lsl.w	r3, r2, r3
 80016e8:	43db      	mvns	r3, r3
 80016ea:	693a      	ldr	r2, [r7, #16]
 80016ec:	4013      	ands	r3, r2
 80016ee:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 80016f0:	683b      	ldr	r3, [r7, #0]
 80016f2:	685b      	ldr	r3, [r3, #4]
 80016f4:	08db      	lsrs	r3, r3, #3
 80016f6:	f003 0201 	and.w	r2, r3, #1
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001700:	693a      	ldr	r2, [r7, #16]
 8001702:	4313      	orrs	r3, r2
 8001704:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	693a      	ldr	r2, [r7, #16]
 800170a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800170c:	683b      	ldr	r3, [r7, #0]
 800170e:	685b      	ldr	r3, [r3, #4]
 8001710:	f003 0303 	and.w	r3, r3, #3
 8001714:	2b03      	cmp	r3, #3
 8001716:	d017      	beq.n	8001748 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	68db      	ldr	r3, [r3, #12]
 800171c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	005b      	lsls	r3, r3, #1
 8001722:	2203      	movs	r2, #3
 8001724:	fa02 f303 	lsl.w	r3, r2, r3
 8001728:	43db      	mvns	r3, r3
 800172a:	693a      	ldr	r2, [r7, #16]
 800172c:	4013      	ands	r3, r2
 800172e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	689a      	ldr	r2, [r3, #8]
 8001734:	697b      	ldr	r3, [r7, #20]
 8001736:	005b      	lsls	r3, r3, #1
 8001738:	fa02 f303 	lsl.w	r3, r2, r3
 800173c:	693a      	ldr	r2, [r7, #16]
 800173e:	4313      	orrs	r3, r2
 8001740:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	693a      	ldr	r2, [r7, #16]
 8001746:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685b      	ldr	r3, [r3, #4]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	2b02      	cmp	r3, #2
 8001752:	d123      	bne.n	800179c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	08da      	lsrs	r2, r3, #3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	3208      	adds	r2, #8
 800175c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001760:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001762:	697b      	ldr	r3, [r7, #20]
 8001764:	f003 0307 	and.w	r3, r3, #7
 8001768:	009b      	lsls	r3, r3, #2
 800176a:	220f      	movs	r2, #15
 800176c:	fa02 f303 	lsl.w	r3, r2, r3
 8001770:	43db      	mvns	r3, r3
 8001772:	693a      	ldr	r2, [r7, #16]
 8001774:	4013      	ands	r3, r2
 8001776:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001778:	683b      	ldr	r3, [r7, #0]
 800177a:	691a      	ldr	r2, [r3, #16]
 800177c:	697b      	ldr	r3, [r7, #20]
 800177e:	f003 0307 	and.w	r3, r3, #7
 8001782:	009b      	lsls	r3, r3, #2
 8001784:	fa02 f303 	lsl.w	r3, r2, r3
 8001788:	693a      	ldr	r2, [r7, #16]
 800178a:	4313      	orrs	r3, r2
 800178c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800178e:	697b      	ldr	r3, [r7, #20]
 8001790:	08da      	lsrs	r2, r3, #3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	3208      	adds	r2, #8
 8001796:	6939      	ldr	r1, [r7, #16]
 8001798:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80017a2:	697b      	ldr	r3, [r7, #20]
 80017a4:	005b      	lsls	r3, r3, #1
 80017a6:	2203      	movs	r2, #3
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43db      	mvns	r3, r3
 80017ae:	693a      	ldr	r2, [r7, #16]
 80017b0:	4013      	ands	r3, r2
 80017b2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80017b4:	683b      	ldr	r3, [r7, #0]
 80017b6:	685b      	ldr	r3, [r3, #4]
 80017b8:	f003 0203 	and.w	r2, r3, #3
 80017bc:	697b      	ldr	r3, [r7, #20]
 80017be:	005b      	lsls	r3, r3, #1
 80017c0:	fa02 f303 	lsl.w	r3, r2, r3
 80017c4:	693a      	ldr	r2, [r7, #16]
 80017c6:	4313      	orrs	r3, r2
 80017c8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	693a      	ldr	r2, [r7, #16]
 80017ce:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80017d0:	683b      	ldr	r3, [r7, #0]
 80017d2:	685b      	ldr	r3, [r3, #4]
 80017d4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80017d8:	2b00      	cmp	r3, #0
 80017da:	f000 80ac 	beq.w	8001936 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80017de:	4b5f      	ldr	r3, [pc, #380]	@ (800195c <HAL_GPIO_Init+0x330>)
 80017e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017e2:	4a5e      	ldr	r2, [pc, #376]	@ (800195c <HAL_GPIO_Init+0x330>)
 80017e4:	f043 0301 	orr.w	r3, r3, #1
 80017e8:	6613      	str	r3, [r2, #96]	@ 0x60
 80017ea:	4b5c      	ldr	r3, [pc, #368]	@ (800195c <HAL_GPIO_Init+0x330>)
 80017ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	60bb      	str	r3, [r7, #8]
 80017f4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80017f6:	4a5a      	ldr	r2, [pc, #360]	@ (8001960 <HAL_GPIO_Init+0x334>)
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	089b      	lsrs	r3, r3, #2
 80017fc:	3302      	adds	r3, #2
 80017fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001802:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001804:	697b      	ldr	r3, [r7, #20]
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	009b      	lsls	r3, r3, #2
 800180c:	220f      	movs	r2, #15
 800180e:	fa02 f303 	lsl.w	r3, r2, r3
 8001812:	43db      	mvns	r3, r3
 8001814:	693a      	ldr	r2, [r7, #16]
 8001816:	4013      	ands	r3, r2
 8001818:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001820:	d025      	beq.n	800186e <HAL_GPIO_Init+0x242>
 8001822:	687b      	ldr	r3, [r7, #4]
 8001824:	4a4f      	ldr	r2, [pc, #316]	@ (8001964 <HAL_GPIO_Init+0x338>)
 8001826:	4293      	cmp	r3, r2
 8001828:	d01f      	beq.n	800186a <HAL_GPIO_Init+0x23e>
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	4a4e      	ldr	r2, [pc, #312]	@ (8001968 <HAL_GPIO_Init+0x33c>)
 800182e:	4293      	cmp	r3, r2
 8001830:	d019      	beq.n	8001866 <HAL_GPIO_Init+0x23a>
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	4a4d      	ldr	r2, [pc, #308]	@ (800196c <HAL_GPIO_Init+0x340>)
 8001836:	4293      	cmp	r3, r2
 8001838:	d013      	beq.n	8001862 <HAL_GPIO_Init+0x236>
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	4a4c      	ldr	r2, [pc, #304]	@ (8001970 <HAL_GPIO_Init+0x344>)
 800183e:	4293      	cmp	r3, r2
 8001840:	d00d      	beq.n	800185e <HAL_GPIO_Init+0x232>
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a4b      	ldr	r2, [pc, #300]	@ (8001974 <HAL_GPIO_Init+0x348>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d007      	beq.n	800185a <HAL_GPIO_Init+0x22e>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a4a      	ldr	r2, [pc, #296]	@ (8001978 <HAL_GPIO_Init+0x34c>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d101      	bne.n	8001856 <HAL_GPIO_Init+0x22a>
 8001852:	2306      	movs	r3, #6
 8001854:	e00c      	b.n	8001870 <HAL_GPIO_Init+0x244>
 8001856:	2307      	movs	r3, #7
 8001858:	e00a      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800185a:	2305      	movs	r3, #5
 800185c:	e008      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800185e:	2304      	movs	r3, #4
 8001860:	e006      	b.n	8001870 <HAL_GPIO_Init+0x244>
 8001862:	2303      	movs	r3, #3
 8001864:	e004      	b.n	8001870 <HAL_GPIO_Init+0x244>
 8001866:	2302      	movs	r3, #2
 8001868:	e002      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800186a:	2301      	movs	r3, #1
 800186c:	e000      	b.n	8001870 <HAL_GPIO_Init+0x244>
 800186e:	2300      	movs	r3, #0
 8001870:	697a      	ldr	r2, [r7, #20]
 8001872:	f002 0203 	and.w	r2, r2, #3
 8001876:	0092      	lsls	r2, r2, #2
 8001878:	4093      	lsls	r3, r2
 800187a:	693a      	ldr	r2, [r7, #16]
 800187c:	4313      	orrs	r3, r2
 800187e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001880:	4937      	ldr	r1, [pc, #220]	@ (8001960 <HAL_GPIO_Init+0x334>)
 8001882:	697b      	ldr	r3, [r7, #20]
 8001884:	089b      	lsrs	r3, r3, #2
 8001886:	3302      	adds	r3, #2
 8001888:	693a      	ldr	r2, [r7, #16]
 800188a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800188e:	4b3b      	ldr	r3, [pc, #236]	@ (800197c <HAL_GPIO_Init+0x350>)
 8001890:	689b      	ldr	r3, [r3, #8]
 8001892:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	43db      	mvns	r3, r3
 8001898:	693a      	ldr	r2, [r7, #16]
 800189a:	4013      	ands	r3, r2
 800189c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800189e:	683b      	ldr	r3, [r7, #0]
 80018a0:	685b      	ldr	r3, [r3, #4]
 80018a2:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d003      	beq.n	80018b2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80018b2:	4a32      	ldr	r2, [pc, #200]	@ (800197c <HAL_GPIO_Init+0x350>)
 80018b4:	693b      	ldr	r3, [r7, #16]
 80018b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80018b8:	4b30      	ldr	r3, [pc, #192]	@ (800197c <HAL_GPIO_Init+0x350>)
 80018ba:	68db      	ldr	r3, [r3, #12]
 80018bc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	43db      	mvns	r3, r3
 80018c2:	693a      	ldr	r2, [r7, #16]
 80018c4:	4013      	ands	r3, r2
 80018c6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80018c8:	683b      	ldr	r3, [r7, #0]
 80018ca:	685b      	ldr	r3, [r3, #4]
 80018cc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80018d0:	2b00      	cmp	r3, #0
 80018d2:	d003      	beq.n	80018dc <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80018d4:	693a      	ldr	r2, [r7, #16]
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	4313      	orrs	r3, r2
 80018da:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80018dc:	4a27      	ldr	r2, [pc, #156]	@ (800197c <HAL_GPIO_Init+0x350>)
 80018de:	693b      	ldr	r3, [r7, #16]
 80018e0:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 80018e2:	4b26      	ldr	r3, [pc, #152]	@ (800197c <HAL_GPIO_Init+0x350>)
 80018e4:	685b      	ldr	r3, [r3, #4]
 80018e6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	43db      	mvns	r3, r3
 80018ec:	693a      	ldr	r2, [r7, #16]
 80018ee:	4013      	ands	r3, r2
 80018f0:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80018f2:	683b      	ldr	r3, [r7, #0]
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d003      	beq.n	8001906 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80018fe:	693a      	ldr	r2, [r7, #16]
 8001900:	68fb      	ldr	r3, [r7, #12]
 8001902:	4313      	orrs	r3, r2
 8001904:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001906:	4a1d      	ldr	r2, [pc, #116]	@ (800197c <HAL_GPIO_Init+0x350>)
 8001908:	693b      	ldr	r3, [r7, #16]
 800190a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 800190c:	4b1b      	ldr	r3, [pc, #108]	@ (800197c <HAL_GPIO_Init+0x350>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001912:	68fb      	ldr	r3, [r7, #12]
 8001914:	43db      	mvns	r3, r3
 8001916:	693a      	ldr	r2, [r7, #16]
 8001918:	4013      	ands	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800191c:	683b      	ldr	r3, [r7, #0]
 800191e:	685b      	ldr	r3, [r3, #4]
 8001920:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d003      	beq.n	8001930 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001928:	693a      	ldr	r2, [r7, #16]
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	4313      	orrs	r3, r2
 800192e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001930:	4a12      	ldr	r2, [pc, #72]	@ (800197c <HAL_GPIO_Init+0x350>)
 8001932:	693b      	ldr	r3, [r7, #16]
 8001934:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001936:	697b      	ldr	r3, [r7, #20]
 8001938:	3301      	adds	r3, #1
 800193a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800193c:	683b      	ldr	r3, [r7, #0]
 800193e:	681a      	ldr	r2, [r3, #0]
 8001940:	697b      	ldr	r3, [r7, #20]
 8001942:	fa22 f303 	lsr.w	r3, r2, r3
 8001946:	2b00      	cmp	r3, #0
 8001948:	f47f ae78 	bne.w	800163c <HAL_GPIO_Init+0x10>
  }
}
 800194c:	bf00      	nop
 800194e:	bf00      	nop
 8001950:	371c      	adds	r7, #28
 8001952:	46bd      	mov	sp, r7
 8001954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	40021000 	.word	0x40021000
 8001960:	40010000 	.word	0x40010000
 8001964:	48000400 	.word	0x48000400
 8001968:	48000800 	.word	0x48000800
 800196c:	48000c00 	.word	0x48000c00
 8001970:	48001000 	.word	0x48001000
 8001974:	48001400 	.word	0x48001400
 8001978:	48001800 	.word	0x48001800
 800197c:	40010400 	.word	0x40010400

08001980 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001980:	b480      	push	{r7}
 8001982:	b083      	sub	sp, #12
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	460b      	mov	r3, r1
 800198a:	807b      	strh	r3, [r7, #2]
 800198c:	4613      	mov	r3, r2
 800198e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001990:	787b      	ldrb	r3, [r7, #1]
 8001992:	2b00      	cmp	r3, #0
 8001994:	d003      	beq.n	800199e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001996:	887a      	ldrh	r2, [r7, #2]
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 800199c:	e002      	b.n	80019a4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 800199e:	887a      	ldrh	r2, [r7, #2]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	629a      	str	r2, [r3, #40]	@ 0x28
}
 80019a4:	bf00      	nop
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b082      	sub	sp, #8
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	4603      	mov	r3, r0
 80019b8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80019ba:	4b08      	ldr	r3, [pc, #32]	@ (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019bc:	695a      	ldr	r2, [r3, #20]
 80019be:	88fb      	ldrh	r3, [r7, #6]
 80019c0:	4013      	ands	r3, r2
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d006      	beq.n	80019d4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80019c6:	4a05      	ldr	r2, [pc, #20]	@ (80019dc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80019c8:	88fb      	ldrh	r3, [r7, #6]
 80019ca:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80019cc:	88fb      	ldrh	r3, [r7, #6]
 80019ce:	4618      	mov	r0, r3
 80019d0:	f7fe fdaa 	bl	8000528 <HAL_GPIO_EXTI_Callback>
  }
}
 80019d4:	bf00      	nop
 80019d6:	3708      	adds	r7, #8
 80019d8:	46bd      	mov	sp, r7
 80019da:	bd80      	pop	{r7, pc}
 80019dc:	40010400 	.word	0x40010400

080019e0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019e0:	b580      	push	{r7, lr}
 80019e2:	b082      	sub	sp, #8
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e08d      	b.n	8001b0e <HAL_I2C_Init+0x12e>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80019f8:	b2db      	uxtb	r3, r3
 80019fa:	2b00      	cmp	r3, #0
 80019fc:	d106      	bne.n	8001a0c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019fe:	687b      	ldr	r3, [r7, #4]
 8001a00:	2200      	movs	r2, #0
 8001a02:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f7ff f8f0 	bl	8000bec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2224      	movs	r2, #36	@ 0x24
 8001a10:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	681a      	ldr	r2, [r3, #0]
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f022 0201 	bic.w	r2, r2, #1
 8001a22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	685a      	ldr	r2, [r3, #4]
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8001a30:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	689a      	ldr	r2, [r3, #8]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001a40:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b01      	cmp	r3, #1
 8001a48:	d107      	bne.n	8001a5a <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689a      	ldr	r2, [r3, #8]
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001a56:	609a      	str	r2, [r3, #8]
 8001a58:	e006      	b.n	8001a68 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	689a      	ldr	r2, [r3, #8]
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8001a66:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	68db      	ldr	r3, [r3, #12]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d108      	bne.n	8001a82 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	685a      	ldr	r2, [r3, #4]
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001a7e:	605a      	str	r2, [r3, #4]
 8001a80:	e007      	b.n	8001a92 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	685a      	ldr	r2, [r3, #4]
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001a90:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	685b      	ldr	r3, [r3, #4]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aa0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001aa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	68da      	ldr	r2, [r3, #12]
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8001ab4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	691a      	ldr	r2, [r3, #16]
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	695b      	ldr	r3, [r3, #20]
 8001abe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	699b      	ldr	r3, [r3, #24]
 8001ac6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	430a      	orrs	r2, r1
 8001ace:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	69d9      	ldr	r1, [r3, #28]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	6a1a      	ldr	r2, [r3, #32]
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	430a      	orrs	r2, r1
 8001ade:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	681a      	ldr	r2, [r3, #0]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f042 0201 	orr.w	r2, r2, #1
 8001aee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2200      	movs	r2, #0
 8001af4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2220      	movs	r2, #32
 8001afa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	2200      	movs	r2, #0
 8001b08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8001b0c:	2300      	movs	r3, #0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}
	...

08001b18 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001b18:	b580      	push	{r7, lr}
 8001b1a:	b088      	sub	sp, #32
 8001b1c:	af02      	add	r7, sp, #8
 8001b1e:	60f8      	str	r0, [r7, #12]
 8001b20:	4608      	mov	r0, r1
 8001b22:	4611      	mov	r1, r2
 8001b24:	461a      	mov	r2, r3
 8001b26:	4603      	mov	r3, r0
 8001b28:	817b      	strh	r3, [r7, #10]
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	813b      	strh	r3, [r7, #8]
 8001b2e:	4613      	mov	r3, r2
 8001b30:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001b38:	b2db      	uxtb	r3, r3
 8001b3a:	2b20      	cmp	r3, #32
 8001b3c:	f040 80f9 	bne.w	8001d32 <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001b40:	6a3b      	ldr	r3, [r7, #32]
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	d002      	beq.n	8001b4c <HAL_I2C_Mem_Write+0x34>
 8001b46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d105      	bne.n	8001b58 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001b52:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8001b54:	2301      	movs	r3, #1
 8001b56:	e0ed      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001b5e:	2b01      	cmp	r3, #1
 8001b60:	d101      	bne.n	8001b66 <HAL_I2C_Mem_Write+0x4e>
 8001b62:	2302      	movs	r3, #2
 8001b64:	e0e6      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	2201      	movs	r2, #1
 8001b6a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001b6e:	f7ff fa57 	bl	8001020 <HAL_GetTick>
 8001b72:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8001b74:	697b      	ldr	r3, [r7, #20]
 8001b76:	9300      	str	r3, [sp, #0]
 8001b78:	2319      	movs	r3, #25
 8001b7a:	2201      	movs	r2, #1
 8001b7c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f955 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e0d1      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	2221      	movs	r2, #33	@ 0x21
 8001b94:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	2240      	movs	r2, #64	@ 0x40
 8001b9c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001ba0:	68fb      	ldr	r3, [r7, #12]
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8001ba6:	68fb      	ldr	r3, [r7, #12]
 8001ba8:	6a3a      	ldr	r2, [r7, #32]
 8001baa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8001bac:	68fb      	ldr	r3, [r7, #12]
 8001bae:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8001bb0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8001bb2:	68fb      	ldr	r3, [r7, #12]
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8001bb8:	88f8      	ldrh	r0, [r7, #6]
 8001bba:	893a      	ldrh	r2, [r7, #8]
 8001bbc:	8979      	ldrh	r1, [r7, #10]
 8001bbe:	697b      	ldr	r3, [r7, #20]
 8001bc0:	9301      	str	r3, [sp, #4]
 8001bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001bc4:	9300      	str	r3, [sp, #0]
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	68f8      	ldr	r0, [r7, #12]
 8001bca:	f000 f8b9 	bl	8001d40 <I2C_RequestMemoryWrite>
 8001bce:	4603      	mov	r3, r0
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d005      	beq.n	8001be0 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001bd4:	68fb      	ldr	r3, [r7, #12]
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8001bdc:	2301      	movs	r3, #1
 8001bde:	e0a9      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001be0:	68fb      	ldr	r3, [r7, #12]
 8001be2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001be4:	b29b      	uxth	r3, r3
 8001be6:	2bff      	cmp	r3, #255	@ 0xff
 8001be8:	d90e      	bls.n	8001c08 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001bea:	68fb      	ldr	r3, [r7, #12]
 8001bec:	22ff      	movs	r2, #255	@ 0xff
 8001bee:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001bf4:	b2da      	uxtb	r2, r3
 8001bf6:	8979      	ldrh	r1, [r7, #10]
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	9300      	str	r3, [sp, #0]
 8001bfc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c00:	68f8      	ldr	r0, [r7, #12]
 8001c02:	f000 fad9 	bl	80021b8 <I2C_TransferConfig>
 8001c06:	e00f      	b.n	8001c28 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c0c:	b29a      	uxth	r2, r3
 8001c0e:	68fb      	ldr	r3, [r7, #12]
 8001c10:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8001c12:	68fb      	ldr	r3, [r7, #12]
 8001c14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c16:	b2da      	uxtb	r2, r3
 8001c18:	8979      	ldrh	r1, [r7, #10]
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	9300      	str	r3, [sp, #0]
 8001c1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001c22:	68f8      	ldr	r0, [r7, #12]
 8001c24:	f000 fac8 	bl	80021b8 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001c28:	697a      	ldr	r2, [r7, #20]
 8001c2a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001c2c:	68f8      	ldr	r0, [r7, #12]
 8001c2e:	f000 f958 	bl	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001c32:	4603      	mov	r3, r0
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d001      	beq.n	8001c3c <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 8001c38:	2301      	movs	r3, #1
 8001c3a:	e07b      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8001c3c:	68fb      	ldr	r3, [r7, #12]
 8001c3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c40:	781a      	ldrb	r2, [r3, #0]
 8001c42:	68fb      	ldr	r3, [r7, #12]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001c48:	68fb      	ldr	r3, [r7, #12]
 8001c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4c:	1c5a      	adds	r2, r3, #1
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c56:	b29b      	uxth	r3, r3
 8001c58:	3b01      	subs	r3, #1
 8001c5a:	b29a      	uxth	r2, r3
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c64:	3b01      	subs	r3, #1
 8001c66:	b29a      	uxth	r2, r3
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8001c6c:	68fb      	ldr	r3, [r7, #12]
 8001c6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c70:	b29b      	uxth	r3, r3
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d034      	beq.n	8001ce0 <HAL_I2C_Mem_Write+0x1c8>
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d130      	bne.n	8001ce0 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8001c7e:	697b      	ldr	r3, [r7, #20]
 8001c80:	9300      	str	r3, [sp, #0]
 8001c82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001c84:	2200      	movs	r2, #0
 8001c86:	2180      	movs	r1, #128	@ 0x80
 8001c88:	68f8      	ldr	r0, [r7, #12]
 8001c8a:	f000 f8d1 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001c8e:	4603      	mov	r3, r0
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d001      	beq.n	8001c98 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e04d      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	2bff      	cmp	r3, #255	@ 0xff
 8001ca0:	d90e      	bls.n	8001cc0 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	22ff      	movs	r2, #255	@ 0xff
 8001ca6:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cac:	b2da      	uxtb	r2, r3
 8001cae:	8979      	ldrh	r1, [r7, #10]
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	9300      	str	r3, [sp, #0]
 8001cb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001cb8:	68f8      	ldr	r0, [r7, #12]
 8001cba:	f000 fa7d 	bl	80021b8 <I2C_TransferConfig>
 8001cbe:	e00f      	b.n	8001ce0 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001cc0:	68fb      	ldr	r3, [r7, #12]
 8001cc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	8979      	ldrh	r1, [r7, #10]
 8001cd2:	2300      	movs	r3, #0
 8001cd4:	9300      	str	r3, [sp, #0]
 8001cd6:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001cda:	68f8      	ldr	r0, [r7, #12]
 8001cdc:	f000 fa6c 	bl	80021b8 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	d19e      	bne.n	8001c28 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001cea:	697a      	ldr	r2, [r7, #20]
 8001cec:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8001cee:	68f8      	ldr	r0, [r7, #12]
 8001cf0:	f000 f93e 	bl	8001f70 <I2C_WaitOnSTOPFlagUntilTimeout>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d001      	beq.n	8001cfe <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 8001cfa:	2301      	movs	r3, #1
 8001cfc:	e01a      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001cfe:	68fb      	ldr	r3, [r7, #12]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	2220      	movs	r2, #32
 8001d04:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001d06:	68fb      	ldr	r3, [r7, #12]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	6859      	ldr	r1, [r3, #4]
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	681a      	ldr	r2, [r3, #0]
 8001d10:	4b0a      	ldr	r3, [pc, #40]	@ (8001d3c <HAL_I2C_Mem_Write+0x224>)
 8001d12:	400b      	ands	r3, r1
 8001d14:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	2220      	movs	r2, #32
 8001d1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	2200      	movs	r2, #0
 8001d22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	2200      	movs	r2, #0
 8001d2a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	e000      	b.n	8001d34 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 8001d32:	2302      	movs	r3, #2
  }
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	3718      	adds	r7, #24
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bd80      	pop	{r7, pc}
 8001d3c:	fe00e800 	.word	0xfe00e800

08001d40 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8001d40:	b580      	push	{r7, lr}
 8001d42:	b086      	sub	sp, #24
 8001d44:	af02      	add	r7, sp, #8
 8001d46:	60f8      	str	r0, [r7, #12]
 8001d48:	4608      	mov	r0, r1
 8001d4a:	4611      	mov	r1, r2
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	4603      	mov	r3, r0
 8001d50:	817b      	strh	r3, [r7, #10]
 8001d52:	460b      	mov	r3, r1
 8001d54:	813b      	strh	r3, [r7, #8]
 8001d56:	4613      	mov	r3, r2
 8001d58:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8001d5a:	88fb      	ldrh	r3, [r7, #6]
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	8979      	ldrh	r1, [r7, #10]
 8001d60:	4b20      	ldr	r3, [pc, #128]	@ (8001de4 <I2C_RequestMemoryWrite+0xa4>)
 8001d62:	9300      	str	r3, [sp, #0]
 8001d64:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001d68:	68f8      	ldr	r0, [r7, #12]
 8001d6a:	f000 fa25 	bl	80021b8 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d6e:	69fa      	ldr	r2, [r7, #28]
 8001d70:	69b9      	ldr	r1, [r7, #24]
 8001d72:	68f8      	ldr	r0, [r7, #12]
 8001d74:	f000 f8b5 	bl	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e02c      	b.n	8001ddc <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8001d82:	88fb      	ldrh	r3, [r7, #6]
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d105      	bne.n	8001d94 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001d88:	893b      	ldrh	r3, [r7, #8]
 8001d8a:	b2da      	uxtb	r2, r3
 8001d8c:	68fb      	ldr	r3, [r7, #12]
 8001d8e:	681b      	ldr	r3, [r3, #0]
 8001d90:	629a      	str	r2, [r3, #40]	@ 0x28
 8001d92:	e015      	b.n	8001dc0 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8001d94:	893b      	ldrh	r3, [r7, #8]
 8001d96:	0a1b      	lsrs	r3, r3, #8
 8001d98:	b29b      	uxth	r3, r3
 8001d9a:	b2da      	uxtb	r2, r3
 8001d9c:	68fb      	ldr	r3, [r7, #12]
 8001d9e:	681b      	ldr	r3, [r3, #0]
 8001da0:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8001da2:	69fa      	ldr	r2, [r7, #28]
 8001da4:	69b9      	ldr	r1, [r7, #24]
 8001da6:	68f8      	ldr	r0, [r7, #12]
 8001da8:	f000 f89b 	bl	8001ee2 <I2C_WaitOnTXISFlagUntilTimeout>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	d001      	beq.n	8001db6 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 8001db2:	2301      	movs	r3, #1
 8001db4:	e012      	b.n	8001ddc <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8001db6:	893b      	ldrh	r3, [r7, #8]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	9300      	str	r3, [sp, #0]
 8001dc4:	69bb      	ldr	r3, [r7, #24]
 8001dc6:	2200      	movs	r2, #0
 8001dc8:	2180      	movs	r1, #128	@ 0x80
 8001dca:	68f8      	ldr	r0, [r7, #12]
 8001dcc:	f000 f830 	bl	8001e30 <I2C_WaitOnFlagUntilTimeout>
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d001      	beq.n	8001dda <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e000      	b.n	8001ddc <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 8001dda:	2300      	movs	r3, #0
}
 8001ddc:	4618      	mov	r0, r3
 8001dde:	3710      	adds	r7, #16
 8001de0:	46bd      	mov	sp, r7
 8001de2:	bd80      	pop	{r7, pc}
 8001de4:	80002000 	.word	0x80002000

08001de8 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001de8:	b480      	push	{r7}
 8001dea:	b083      	sub	sp, #12
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	699b      	ldr	r3, [r3, #24]
 8001df6:	f003 0302 	and.w	r3, r3, #2
 8001dfa:	2b02      	cmp	r3, #2
 8001dfc:	d103      	bne.n	8001e06 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	2200      	movs	r2, #0
 8001e04:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	d007      	beq.n	8001e24 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	699a      	ldr	r2, [r3, #24]
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f042 0201 	orr.w	r2, r2, #1
 8001e22:	619a      	str	r2, [r3, #24]
  }
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr

08001e30 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b084      	sub	sp, #16
 8001e34:	af00      	add	r7, sp, #0
 8001e36:	60f8      	str	r0, [r7, #12]
 8001e38:	60b9      	str	r1, [r7, #8]
 8001e3a:	603b      	str	r3, [r7, #0]
 8001e3c:	4613      	mov	r3, r2
 8001e3e:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001e40:	e03b      	b.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	6839      	ldr	r1, [r7, #0]
 8001e46:	68f8      	ldr	r0, [r7, #12]
 8001e48:	f000 f8d6 	bl	8001ff8 <I2C_IsErrorOccurred>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d001      	beq.n	8001e56 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8001e52:	2301      	movs	r3, #1
 8001e54:	e041      	b.n	8001eda <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001e56:	683b      	ldr	r3, [r7, #0]
 8001e58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001e5c:	d02d      	beq.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001e5e:	f7ff f8df 	bl	8001020 <HAL_GetTick>
 8001e62:	4602      	mov	r2, r0
 8001e64:	69bb      	ldr	r3, [r7, #24]
 8001e66:	1ad3      	subs	r3, r2, r3
 8001e68:	683a      	ldr	r2, [r7, #0]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d302      	bcc.n	8001e74 <I2C_WaitOnFlagUntilTimeout+0x44>
 8001e6e:	683b      	ldr	r3, [r7, #0]
 8001e70:	2b00      	cmp	r3, #0
 8001e72:	d122      	bne.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	699a      	ldr	r2, [r3, #24]
 8001e7a:	68bb      	ldr	r3, [r7, #8]
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	68ba      	ldr	r2, [r7, #8]
 8001e80:	429a      	cmp	r2, r3
 8001e82:	bf0c      	ite	eq
 8001e84:	2301      	moveq	r3, #1
 8001e86:	2300      	movne	r3, #0
 8001e88:	b2db      	uxtb	r3, r3
 8001e8a:	461a      	mov	r2, r3
 8001e8c:	79fb      	ldrb	r3, [r7, #7]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d113      	bne.n	8001eba <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e96:	f043 0220 	orr.w	r2, r3, #32
 8001e9a:	68fb      	ldr	r3, [r7, #12]
 8001e9c:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001e9e:	68fb      	ldr	r3, [r7, #12]
 8001ea0:	2220      	movs	r2, #32
 8001ea2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	2200      	movs	r2, #0
 8001eaa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	2200      	movs	r2, #0
 8001eb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8001eb6:	2301      	movs	r3, #1
 8001eb8:	e00f      	b.n	8001eda <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001eba:	68fb      	ldr	r3, [r7, #12]
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	699a      	ldr	r2, [r3, #24]
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	4013      	ands	r3, r2
 8001ec4:	68ba      	ldr	r2, [r7, #8]
 8001ec6:	429a      	cmp	r2, r3
 8001ec8:	bf0c      	ite	eq
 8001eca:	2301      	moveq	r3, #1
 8001ecc:	2300      	movne	r3, #0
 8001ece:	b2db      	uxtb	r3, r3
 8001ed0:	461a      	mov	r2, r3
 8001ed2:	79fb      	ldrb	r3, [r7, #7]
 8001ed4:	429a      	cmp	r2, r3
 8001ed6:	d0b4      	beq.n	8001e42 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8001ed8:	2300      	movs	r3, #0
}
 8001eda:	4618      	mov	r0, r3
 8001edc:	3710      	adds	r7, #16
 8001ede:	46bd      	mov	sp, r7
 8001ee0:	bd80      	pop	{r7, pc}

08001ee2 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	60f8      	str	r0, [r7, #12]
 8001eea:	60b9      	str	r1, [r7, #8]
 8001eec:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001eee:	e033      	b.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ef0:	687a      	ldr	r2, [r7, #4]
 8001ef2:	68b9      	ldr	r1, [r7, #8]
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f87f 	bl	8001ff8 <I2C_IsErrorOccurred>
 8001efa:	4603      	mov	r3, r0
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d001      	beq.n	8001f04 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e031      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f0a:	d025      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f0c:	f7ff f888 	bl	8001020 <HAL_GetTick>
 8001f10:	4602      	mov	r2, r0
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	68ba      	ldr	r2, [r7, #8]
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d302      	bcc.n	8001f22 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001f1c:	68bb      	ldr	r3, [r7, #8]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d11a      	bne.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8001f22:	68fb      	ldr	r3, [r7, #12]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	699b      	ldr	r3, [r3, #24]
 8001f28:	f003 0302 	and.w	r3, r3, #2
 8001f2c:	2b02      	cmp	r3, #2
 8001f2e:	d013      	beq.n	8001f58 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f34:	f043 0220 	orr.w	r2, r3, #32
 8001f38:	68fb      	ldr	r3, [r7, #12]
 8001f3a:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	2220      	movs	r2, #32
 8001f40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001f44:	68fb      	ldr	r3, [r7, #12]
 8001f46:	2200      	movs	r2, #0
 8001f48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2200      	movs	r2, #0
 8001f50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e007      	b.n	8001f68 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b02      	cmp	r3, #2
 8001f64:	d1c4      	bne.n	8001ef0 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8001f66:	2300      	movs	r3, #0
}
 8001f68:	4618      	mov	r0, r3
 8001f6a:	3710      	adds	r7, #16
 8001f6c:	46bd      	mov	sp, r7
 8001f6e:	bd80      	pop	{r7, pc}

08001f70 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b084      	sub	sp, #16
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	60f8      	str	r0, [r7, #12]
 8001f78:	60b9      	str	r1, [r7, #8]
 8001f7a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001f7c:	e02f      	b.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8001f7e:	687a      	ldr	r2, [r7, #4]
 8001f80:	68b9      	ldr	r1, [r7, #8]
 8001f82:	68f8      	ldr	r0, [r7, #12]
 8001f84:	f000 f838 	bl	8001ff8 <I2C_IsErrorOccurred>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d001      	beq.n	8001f92 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	e02d      	b.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f92:	f7ff f845 	bl	8001020 <HAL_GetTick>
 8001f96:	4602      	mov	r2, r0
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	1ad3      	subs	r3, r2, r3
 8001f9c:	68ba      	ldr	r2, [r7, #8]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d302      	bcc.n	8001fa8 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001fa2:	68bb      	ldr	r3, [r7, #8]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d11a      	bne.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	699b      	ldr	r3, [r3, #24]
 8001fae:	f003 0320 	and.w	r3, r3, #32
 8001fb2:	2b20      	cmp	r3, #32
 8001fb4:	d013      	beq.n	8001fde <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001fb6:	68fb      	ldr	r3, [r7, #12]
 8001fb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fba:	f043 0220 	orr.w	r2, r3, #32
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	2220      	movs	r2, #32
 8001fc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	2200      	movs	r2, #0
 8001fce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001fd2:	68fb      	ldr	r3, [r7, #12]
 8001fd4:	2200      	movs	r2, #0
 8001fd6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e007      	b.n	8001fee <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001fde:	68fb      	ldr	r3, [r7, #12]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	699b      	ldr	r3, [r3, #24]
 8001fe4:	f003 0320 	and.w	r3, r3, #32
 8001fe8:	2b20      	cmp	r3, #32
 8001fea:	d1c8      	bne.n	8001f7e <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001fec:	2300      	movs	r3, #0
}
 8001fee:	4618      	mov	r0, r3
 8001ff0:	3710      	adds	r7, #16
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	bd80      	pop	{r7, pc}
	...

08001ff8 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001ff8:	b580      	push	{r7, lr}
 8001ffa:	b08a      	sub	sp, #40	@ 0x28
 8001ffc:	af00      	add	r7, sp, #0
 8001ffe:	60f8      	str	r0, [r7, #12]
 8002000:	60b9      	str	r1, [r7, #8]
 8002002:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002004:	2300      	movs	r3, #0
 8002006:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800200a:	68fb      	ldr	r3, [r7, #12]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	699b      	ldr	r3, [r3, #24]
 8002010:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002012:	2300      	movs	r3, #0
 8002014:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800201a:	69bb      	ldr	r3, [r7, #24]
 800201c:	f003 0310 	and.w	r3, r3, #16
 8002020:	2b00      	cmp	r3, #0
 8002022:	d068      	beq.n	80020f6 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	2210      	movs	r2, #16
 800202a:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800202c:	e049      	b.n	80020c2 <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800202e:	68bb      	ldr	r3, [r7, #8]
 8002030:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002034:	d045      	beq.n	80020c2 <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002036:	f7fe fff3 	bl	8001020 <HAL_GetTick>
 800203a:	4602      	mov	r2, r0
 800203c:	69fb      	ldr	r3, [r7, #28]
 800203e:	1ad3      	subs	r3, r2, r3
 8002040:	68ba      	ldr	r2, [r7, #8]
 8002042:	429a      	cmp	r2, r3
 8002044:	d302      	bcc.n	800204c <I2C_IsErrorOccurred+0x54>
 8002046:	68bb      	ldr	r3, [r7, #8]
 8002048:	2b00      	cmp	r3, #0
 800204a:	d13a      	bne.n	80020c2 <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	681b      	ldr	r3, [r3, #0]
 8002050:	685b      	ldr	r3, [r3, #4]
 8002052:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002056:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800205e:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	699b      	ldr	r3, [r3, #24]
 8002066:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800206a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800206e:	d121      	bne.n	80020b4 <I2C_IsErrorOccurred+0xbc>
 8002070:	697b      	ldr	r3, [r7, #20]
 8002072:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002076:	d01d      	beq.n	80020b4 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8002078:	7cfb      	ldrb	r3, [r7, #19]
 800207a:	2b20      	cmp	r3, #32
 800207c:	d01a      	beq.n	80020b4 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	685a      	ldr	r2, [r3, #4]
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800208c:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800208e:	f7fe ffc7 	bl	8001020 <HAL_GetTick>
 8002092:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002094:	e00e      	b.n	80020b4 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002096:	f7fe ffc3 	bl	8001020 <HAL_GetTick>
 800209a:	4602      	mov	r2, r0
 800209c:	69fb      	ldr	r3, [r7, #28]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b19      	cmp	r3, #25
 80020a2:	d907      	bls.n	80020b4 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80020a4:	6a3b      	ldr	r3, [r7, #32]
 80020a6:	f043 0320 	orr.w	r3, r3, #32
 80020aa:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 80020ac:	2301      	movs	r3, #1
 80020ae:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 80020b2:	e006      	b.n	80020c2 <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	699b      	ldr	r3, [r3, #24]
 80020ba:	f003 0320 	and.w	r3, r3, #32
 80020be:	2b20      	cmp	r3, #32
 80020c0:	d1e9      	bne.n	8002096 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	699b      	ldr	r3, [r3, #24]
 80020c8:	f003 0320 	and.w	r3, r3, #32
 80020cc:	2b20      	cmp	r3, #32
 80020ce:	d003      	beq.n	80020d8 <I2C_IsErrorOccurred+0xe0>
 80020d0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d0aa      	beq.n	800202e <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80020d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d103      	bne.n	80020e8 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2220      	movs	r2, #32
 80020e6:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80020e8:	6a3b      	ldr	r3, [r7, #32]
 80020ea:	f043 0304 	orr.w	r3, r3, #4
 80020ee:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80020f0:	2301      	movs	r3, #1
 80020f2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	699b      	ldr	r3, [r3, #24]
 80020fc:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80020fe:	69bb      	ldr	r3, [r7, #24]
 8002100:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002104:	2b00      	cmp	r3, #0
 8002106:	d00b      	beq.n	8002120 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002108:	6a3b      	ldr	r3, [r7, #32]
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002118:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800211a:	2301      	movs	r3, #1
 800211c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002120:	69bb      	ldr	r3, [r7, #24]
 8002122:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002126:	2b00      	cmp	r3, #0
 8002128:	d00b      	beq.n	8002142 <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800212a:	6a3b      	ldr	r3, [r7, #32]
 800212c:	f043 0308 	orr.w	r3, r3, #8
 8002130:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800213a:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800213c:	2301      	movs	r3, #1
 800213e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002142:	69bb      	ldr	r3, [r7, #24]
 8002144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002148:	2b00      	cmp	r3, #0
 800214a:	d00b      	beq.n	8002164 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800214c:	6a3b      	ldr	r3, [r7, #32]
 800214e:	f043 0302 	orr.w	r3, r3, #2
 8002152:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002154:	68fb      	ldr	r3, [r7, #12]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800215c:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800215e:	2301      	movs	r3, #1
 8002160:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8002164:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002168:	2b00      	cmp	r3, #0
 800216a:	d01c      	beq.n	80021a6 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fe3b 	bl	8001de8 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	6859      	ldr	r1, [r3, #4]
 8002178:	68fb      	ldr	r3, [r7, #12]
 800217a:	681a      	ldr	r2, [r3, #0]
 800217c:	4b0d      	ldr	r3, [pc, #52]	@ (80021b4 <I2C_IsErrorOccurred+0x1bc>)
 800217e:	400b      	ands	r3, r1
 8002180:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8002182:	68fb      	ldr	r3, [r7, #12]
 8002184:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002186:	6a3b      	ldr	r3, [r7, #32]
 8002188:	431a      	orrs	r2, r3
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800218e:	68fb      	ldr	r3, [r7, #12]
 8002190:	2220      	movs	r2, #32
 8002192:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002196:	68fb      	ldr	r3, [r7, #12]
 8002198:	2200      	movs	r2, #0
 800219a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	2200      	movs	r2, #0
 80021a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 80021a6:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3728      	adds	r7, #40	@ 0x28
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	fe00e800 	.word	0xfe00e800

080021b8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80021b8:	b480      	push	{r7}
 80021ba:	b087      	sub	sp, #28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	60f8      	str	r0, [r7, #12]
 80021c0:	607b      	str	r3, [r7, #4]
 80021c2:	460b      	mov	r3, r1
 80021c4:	817b      	strh	r3, [r7, #10]
 80021c6:	4613      	mov	r3, r2
 80021c8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021ca:	897b      	ldrh	r3, [r7, #10]
 80021cc:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021d0:	7a7b      	ldrb	r3, [r7, #9]
 80021d2:	041b      	lsls	r3, r3, #16
 80021d4:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021d8:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80021de:	6a3b      	ldr	r3, [r7, #32]
 80021e0:	4313      	orrs	r3, r2
 80021e2:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80021e6:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80021e8:	68fb      	ldr	r3, [r7, #12]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	685a      	ldr	r2, [r3, #4]
 80021ee:	6a3b      	ldr	r3, [r7, #32]
 80021f0:	0d5b      	lsrs	r3, r3, #21
 80021f2:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 80021f6:	4b08      	ldr	r3, [pc, #32]	@ (8002218 <I2C_TransferConfig+0x60>)
 80021f8:	430b      	orrs	r3, r1
 80021fa:	43db      	mvns	r3, r3
 80021fc:	ea02 0103 	and.w	r1, r2, r3
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	697a      	ldr	r2, [r7, #20]
 8002206:	430a      	orrs	r2, r1
 8002208:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800220a:	bf00      	nop
 800220c:	371c      	adds	r7, #28
 800220e:	46bd      	mov	sp, r7
 8002210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002214:	4770      	bx	lr
 8002216:	bf00      	nop
 8002218:	03ff63ff 	.word	0x03ff63ff

0800221c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800221c:	b480      	push	{r7}
 800221e:	b083      	sub	sp, #12
 8002220:	af00      	add	r7, sp, #0
 8002222:	6078      	str	r0, [r7, #4]
 8002224:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800222c:	b2db      	uxtb	r3, r3
 800222e:	2b20      	cmp	r3, #32
 8002230:	d138      	bne.n	80022a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002238:	2b01      	cmp	r3, #1
 800223a:	d101      	bne.n	8002240 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800223c:	2302      	movs	r3, #2
 800223e:	e032      	b.n	80022a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2224      	movs	r2, #36	@ 0x24
 800224c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	681a      	ldr	r2, [r3, #0]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f022 0201 	bic.w	r2, r2, #1
 800225e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	681a      	ldr	r2, [r3, #0]
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800226e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	6819      	ldr	r1, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	683a      	ldr	r2, [r7, #0]
 800227c:	430a      	orrs	r2, r1
 800227e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0201 	orr.w	r2, r2, #1
 800228e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	2220      	movs	r2, #32
 8002294:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	2200      	movs	r2, #0
 800229c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80022a0:	2300      	movs	r3, #0
 80022a2:	e000      	b.n	80022a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80022a4:	2302      	movs	r3, #2
  }
}
 80022a6:	4618      	mov	r0, r3
 80022a8:	370c      	adds	r7, #12
 80022aa:	46bd      	mov	sp, r7
 80022ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b0:	4770      	bx	lr

080022b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80022b2:	b480      	push	{r7}
 80022b4:	b085      	sub	sp, #20
 80022b6:	af00      	add	r7, sp, #0
 80022b8:	6078      	str	r0, [r7, #4]
 80022ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80022c2:	b2db      	uxtb	r3, r3
 80022c4:	2b20      	cmp	r3, #32
 80022c6:	d139      	bne.n	800233c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80022ce:	2b01      	cmp	r3, #1
 80022d0:	d101      	bne.n	80022d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80022d2:	2302      	movs	r3, #2
 80022d4:	e033      	b.n	800233e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2224      	movs	r2, #36	@ 0x24
 80022e2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	f022 0201 	bic.w	r2, r2, #1
 80022f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8002304:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8002306:	683b      	ldr	r3, [r7, #0]
 8002308:	021b      	lsls	r3, r3, #8
 800230a:	68fa      	ldr	r2, [r7, #12]
 800230c:	4313      	orrs	r3, r2
 800230e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	68fa      	ldr	r2, [r7, #12]
 8002316:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681a      	ldr	r2, [r3, #0]
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f042 0201 	orr.w	r2, r2, #1
 8002326:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	2220      	movs	r2, #32
 800232c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	2200      	movs	r2, #0
 8002334:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8002338:	2300      	movs	r3, #0
 800233a:	e000      	b.n	800233e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800233c:	2302      	movs	r3, #2
  }
}
 800233e:	4618      	mov	r0, r3
 8002340:	3714      	adds	r7, #20
 8002342:	46bd      	mov	sp, r7
 8002344:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002348:	4770      	bx	lr
	...

0800234c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8002350:	4b04      	ldr	r3, [pc, #16]	@ (8002364 <HAL_PWREx_GetVoltageRange+0x18>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
#endif
}
 8002358:	4618      	mov	r0, r3
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	40007000 	.word	0x40007000

08002368 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002368:	b480      	push	{r7}
 800236a:	b085      	sub	sp, #20
 800236c:	af00      	add	r7, sp, #0
 800236e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002376:	d130      	bne.n	80023da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8002378:	4b23      	ldr	r3, [pc, #140]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8002380:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002384:	d038      	beq.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002386:	4b20      	ldr	r3, [pc, #128]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800238e:	4a1e      	ldr	r2, [pc, #120]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8002390:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002394:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8002396:	4b1d      	ldr	r3, [pc, #116]	@ (800240c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	2232      	movs	r2, #50	@ 0x32
 800239c:	fb02 f303 	mul.w	r3, r2, r3
 80023a0:	4a1b      	ldr	r2, [pc, #108]	@ (8002410 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80023a2:	fba2 2303 	umull	r2, r3, r2, r3
 80023a6:	0c9b      	lsrs	r3, r3, #18
 80023a8:	3301      	adds	r3, #1
 80023aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ac:	e002      	b.n	80023b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	3b01      	subs	r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023b4:	4b14      	ldr	r3, [pc, #80]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023b6:	695b      	ldr	r3, [r3, #20]
 80023b8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023bc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023c0:	d102      	bne.n	80023c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1f2      	bne.n	80023ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023c8:	4b0f      	ldr	r3, [pc, #60]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ca:	695b      	ldr	r3, [r3, #20]
 80023cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80023d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023d4:	d110      	bne.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80023d6:	2303      	movs	r3, #3
 80023d8:	e00f      	b.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80023da:	4b0b      	ldr	r3, [pc, #44]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80023e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80023e6:	d007      	beq.n	80023f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023e8:	4b07      	ldr	r3, [pc, #28]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80023f0:	4a05      	ldr	r2, [pc, #20]	@ (8002408 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80023f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80023f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80023f8:	2300      	movs	r3, #0
}
 80023fa:	4618      	mov	r0, r3
 80023fc:	3714      	adds	r7, #20
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr
 8002406:	bf00      	nop
 8002408:	40007000 	.word	0x40007000
 800240c:	2000000c 	.word	0x2000000c
 8002410:	431bde83 	.word	0x431bde83

08002414 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	b088      	sub	sp, #32
 8002418:	af00      	add	r7, sp, #0
 800241a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2b00      	cmp	r3, #0
 8002420:	d101      	bne.n	8002426 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	e3ca      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002426:	4b97      	ldr	r3, [pc, #604]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	f003 030c 	and.w	r3, r3, #12
 800242e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002430:	4b94      	ldr	r3, [pc, #592]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002432:	68db      	ldr	r3, [r3, #12]
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	f003 0310 	and.w	r3, r3, #16
 8002442:	2b00      	cmp	r3, #0
 8002444:	f000 80e4 	beq.w	8002610 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002448:	69bb      	ldr	r3, [r7, #24]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d007      	beq.n	800245e <HAL_RCC_OscConfig+0x4a>
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	2b0c      	cmp	r3, #12
 8002452:	f040 808b 	bne.w	800256c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8002456:	697b      	ldr	r3, [r7, #20]
 8002458:	2b01      	cmp	r3, #1
 800245a:	f040 8087 	bne.w	800256c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800245e:	4b89      	ldr	r3, [pc, #548]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	f003 0302 	and.w	r3, r3, #2
 8002466:	2b00      	cmp	r3, #0
 8002468:	d005      	beq.n	8002476 <HAL_RCC_OscConfig+0x62>
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	699b      	ldr	r3, [r3, #24]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d101      	bne.n	8002476 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e3a2      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1a      	ldr	r2, [r3, #32]
 800247a:	4b82      	ldr	r3, [pc, #520]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f003 0308 	and.w	r3, r3, #8
 8002482:	2b00      	cmp	r3, #0
 8002484:	d004      	beq.n	8002490 <HAL_RCC_OscConfig+0x7c>
 8002486:	4b7f      	ldr	r3, [pc, #508]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800248e:	e005      	b.n	800249c <HAL_RCC_OscConfig+0x88>
 8002490:	4b7c      	ldr	r3, [pc, #496]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002492:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002496:	091b      	lsrs	r3, r3, #4
 8002498:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800249c:	4293      	cmp	r3, r2
 800249e:	d223      	bcs.n	80024e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6a1b      	ldr	r3, [r3, #32]
 80024a4:	4618      	mov	r0, r3
 80024a6:	f000 fd55 	bl	8002f54 <RCC_SetFlashLatencyFromMSIRange>
 80024aa:	4603      	mov	r3, r0
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d001      	beq.n	80024b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80024b0:	2301      	movs	r3, #1
 80024b2:	e383      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024b4:	4b73      	ldr	r3, [pc, #460]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a72      	ldr	r2, [pc, #456]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024ba:	f043 0308 	orr.w	r3, r3, #8
 80024be:	6013      	str	r3, [r2, #0]
 80024c0:	4b70      	ldr	r3, [pc, #448]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6a1b      	ldr	r3, [r3, #32]
 80024cc:	496d      	ldr	r1, [pc, #436]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024ce:	4313      	orrs	r3, r2
 80024d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80024d2:	4b6c      	ldr	r3, [pc, #432]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	69db      	ldr	r3, [r3, #28]
 80024de:	021b      	lsls	r3, r3, #8
 80024e0:	4968      	ldr	r1, [pc, #416]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024e2:	4313      	orrs	r3, r2
 80024e4:	604b      	str	r3, [r1, #4]
 80024e6:	e025      	b.n	8002534 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80024e8:	4b66      	ldr	r3, [pc, #408]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a65      	ldr	r2, [pc, #404]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024ee:	f043 0308 	orr.w	r3, r3, #8
 80024f2:	6013      	str	r3, [r2, #0]
 80024f4:	4b63      	ldr	r3, [pc, #396]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a1b      	ldr	r3, [r3, #32]
 8002500:	4960      	ldr	r1, [pc, #384]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002502:	4313      	orrs	r3, r2
 8002504:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002506:	4b5f      	ldr	r3, [pc, #380]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	69db      	ldr	r3, [r3, #28]
 8002512:	021b      	lsls	r3, r3, #8
 8002514:	495b      	ldr	r1, [pc, #364]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002516:	4313      	orrs	r3, r2
 8002518:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800251a:	69bb      	ldr	r3, [r7, #24]
 800251c:	2b00      	cmp	r3, #0
 800251e:	d109      	bne.n	8002534 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6a1b      	ldr	r3, [r3, #32]
 8002524:	4618      	mov	r0, r3
 8002526:	f000 fd15 	bl	8002f54 <RCC_SetFlashLatencyFromMSIRange>
 800252a:	4603      	mov	r3, r0
 800252c:	2b00      	cmp	r3, #0
 800252e:	d001      	beq.n	8002534 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e343      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002534:	f000 fc4a 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002538:	4602      	mov	r2, r0
 800253a:	4b52      	ldr	r3, [pc, #328]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	091b      	lsrs	r3, r3, #4
 8002540:	f003 030f 	and.w	r3, r3, #15
 8002544:	4950      	ldr	r1, [pc, #320]	@ (8002688 <HAL_RCC_OscConfig+0x274>)
 8002546:	5ccb      	ldrb	r3, [r1, r3]
 8002548:	f003 031f 	and.w	r3, r3, #31
 800254c:	fa22 f303 	lsr.w	r3, r2, r3
 8002550:	4a4e      	ldr	r2, [pc, #312]	@ (800268c <HAL_RCC_OscConfig+0x278>)
 8002552:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002554:	4b4e      	ldr	r3, [pc, #312]	@ (8002690 <HAL_RCC_OscConfig+0x27c>)
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f7fe fd11 	bl	8000f80 <HAL_InitTick>
 800255e:	4603      	mov	r3, r0
 8002560:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002562:	7bfb      	ldrb	r3, [r7, #15]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d052      	beq.n	800260e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8002568:	7bfb      	ldrb	r3, [r7, #15]
 800256a:	e327      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	699b      	ldr	r3, [r3, #24]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d032      	beq.n	80025da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002574:	4b43      	ldr	r3, [pc, #268]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a42      	ldr	r2, [pc, #264]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800257a:	f043 0301 	orr.w	r3, r3, #1
 800257e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8002580:	f7fe fd4e 	bl	8001020 <HAL_GetTick>
 8002584:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002586:	e008      	b.n	800259a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002588:	f7fe fd4a 	bl	8001020 <HAL_GetTick>
 800258c:	4602      	mov	r2, r0
 800258e:	693b      	ldr	r3, [r7, #16]
 8002590:	1ad3      	subs	r3, r2, r3
 8002592:	2b02      	cmp	r3, #2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e310      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800259a:	4b3a      	ldr	r3, [pc, #232]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0f0      	beq.n	8002588 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025a6:	4b37      	ldr	r3, [pc, #220]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	4a36      	ldr	r2, [pc, #216]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025ac:	f043 0308 	orr.w	r3, r3, #8
 80025b0:	6013      	str	r3, [r2, #0]
 80025b2:	4b34      	ldr	r3, [pc, #208]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	6a1b      	ldr	r3, [r3, #32]
 80025be:	4931      	ldr	r1, [pc, #196]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025c0:	4313      	orrs	r3, r2
 80025c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80025c4:	4b2f      	ldr	r3, [pc, #188]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025c6:	685b      	ldr	r3, [r3, #4]
 80025c8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	69db      	ldr	r3, [r3, #28]
 80025d0:	021b      	lsls	r3, r3, #8
 80025d2:	492c      	ldr	r1, [pc, #176]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025d4:	4313      	orrs	r3, r2
 80025d6:	604b      	str	r3, [r1, #4]
 80025d8:	e01a      	b.n	8002610 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80025da:	4b2a      	ldr	r3, [pc, #168]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	4a29      	ldr	r2, [pc, #164]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 80025e0:	f023 0301 	bic.w	r3, r3, #1
 80025e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025e6:	f7fe fd1b 	bl	8001020 <HAL_GetTick>
 80025ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80025ec:	e008      	b.n	8002600 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025ee:	f7fe fd17 	bl	8001020 <HAL_GetTick>
 80025f2:	4602      	mov	r2, r0
 80025f4:	693b      	ldr	r3, [r7, #16]
 80025f6:	1ad3      	subs	r3, r2, r3
 80025f8:	2b02      	cmp	r3, #2
 80025fa:	d901      	bls.n	8002600 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80025fc:	2303      	movs	r3, #3
 80025fe:	e2dd      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002600:	4b20      	ldr	r3, [pc, #128]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f003 0302 	and.w	r3, r3, #2
 8002608:	2b00      	cmp	r3, #0
 800260a:	d1f0      	bne.n	80025ee <HAL_RCC_OscConfig+0x1da>
 800260c:	e000      	b.n	8002610 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800260e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	f003 0301 	and.w	r3, r3, #1
 8002618:	2b00      	cmp	r3, #0
 800261a:	d074      	beq.n	8002706 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	2b08      	cmp	r3, #8
 8002620:	d005      	beq.n	800262e <HAL_RCC_OscConfig+0x21a>
 8002622:	69bb      	ldr	r3, [r7, #24]
 8002624:	2b0c      	cmp	r3, #12
 8002626:	d10e      	bne.n	8002646 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	2b03      	cmp	r3, #3
 800262c:	d10b      	bne.n	8002646 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800262e:	4b15      	ldr	r3, [pc, #84]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002636:	2b00      	cmp	r3, #0
 8002638:	d064      	beq.n	8002704 <HAL_RCC_OscConfig+0x2f0>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	685b      	ldr	r3, [r3, #4]
 800263e:	2b00      	cmp	r3, #0
 8002640:	d160      	bne.n	8002704 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002642:	2301      	movs	r3, #1
 8002644:	e2ba      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800264e:	d106      	bne.n	800265e <HAL_RCC_OscConfig+0x24a>
 8002650:	4b0c      	ldr	r3, [pc, #48]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	4a0b      	ldr	r2, [pc, #44]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002656:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800265a:	6013      	str	r3, [r2, #0]
 800265c:	e026      	b.n	80026ac <HAL_RCC_OscConfig+0x298>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	685b      	ldr	r3, [r3, #4]
 8002662:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002666:	d115      	bne.n	8002694 <HAL_RCC_OscConfig+0x280>
 8002668:	4b06      	ldr	r3, [pc, #24]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a05      	ldr	r2, [pc, #20]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800266e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002672:	6013      	str	r3, [r2, #0]
 8002674:	4b03      	ldr	r3, [pc, #12]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	4a02      	ldr	r2, [pc, #8]	@ (8002684 <HAL_RCC_OscConfig+0x270>)
 800267a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800267e:	6013      	str	r3, [r2, #0]
 8002680:	e014      	b.n	80026ac <HAL_RCC_OscConfig+0x298>
 8002682:	bf00      	nop
 8002684:	40021000 	.word	0x40021000
 8002688:	080054ec 	.word	0x080054ec
 800268c:	2000000c 	.word	0x2000000c
 8002690:	20000010 	.word	0x20000010
 8002694:	4ba0      	ldr	r3, [pc, #640]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	4a9f      	ldr	r2, [pc, #636]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800269a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800269e:	6013      	str	r3, [r2, #0]
 80026a0:	4b9d      	ldr	r3, [pc, #628]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4a9c      	ldr	r2, [pc, #624]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80026aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	685b      	ldr	r3, [r3, #4]
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d013      	beq.n	80026dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026b4:	f7fe fcb4 	bl	8001020 <HAL_GetTick>
 80026b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ba:	e008      	b.n	80026ce <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026bc:	f7fe fcb0 	bl	8001020 <HAL_GetTick>
 80026c0:	4602      	mov	r2, r0
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	1ad3      	subs	r3, r2, r3
 80026c6:	2b64      	cmp	r3, #100	@ 0x64
 80026c8:	d901      	bls.n	80026ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80026ca:	2303      	movs	r3, #3
 80026cc:	e276      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026ce:	4b92      	ldr	r3, [pc, #584]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d0f0      	beq.n	80026bc <HAL_RCC_OscConfig+0x2a8>
 80026da:	e014      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026dc:	f7fe fca0 	bl	8001020 <HAL_GetTick>
 80026e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026e2:	e008      	b.n	80026f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80026e4:	f7fe fc9c 	bl	8001020 <HAL_GetTick>
 80026e8:	4602      	mov	r2, r0
 80026ea:	693b      	ldr	r3, [r7, #16]
 80026ec:	1ad3      	subs	r3, r2, r3
 80026ee:	2b64      	cmp	r3, #100	@ 0x64
 80026f0:	d901      	bls.n	80026f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80026f2:	2303      	movs	r3, #3
 80026f4:	e262      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80026f6:	4b88      	ldr	r3, [pc, #544]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d1f0      	bne.n	80026e4 <HAL_RCC_OscConfig+0x2d0>
 8002702:	e000      	b.n	8002706 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002704:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	f003 0302 	and.w	r3, r3, #2
 800270e:	2b00      	cmp	r3, #0
 8002710:	d060      	beq.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002712:	69bb      	ldr	r3, [r7, #24]
 8002714:	2b04      	cmp	r3, #4
 8002716:	d005      	beq.n	8002724 <HAL_RCC_OscConfig+0x310>
 8002718:	69bb      	ldr	r3, [r7, #24]
 800271a:	2b0c      	cmp	r3, #12
 800271c:	d119      	bne.n	8002752 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	2b02      	cmp	r3, #2
 8002722:	d116      	bne.n	8002752 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	4b7c      	ldr	r3, [pc, #496]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002726:	681b      	ldr	r3, [r3, #0]
 8002728:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800272c:	2b00      	cmp	r3, #0
 800272e:	d005      	beq.n	800273c <HAL_RCC_OscConfig+0x328>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d101      	bne.n	800273c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8002738:	2301      	movs	r3, #1
 800273a:	e23f      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800273c:	4b76      	ldr	r3, [pc, #472]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	691b      	ldr	r3, [r3, #16]
 8002748:	061b      	lsls	r3, r3, #24
 800274a:	4973      	ldr	r1, [pc, #460]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800274c:	4313      	orrs	r3, r2
 800274e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002750:	e040      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d023      	beq.n	80027a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800275a:	4b6f      	ldr	r3, [pc, #444]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	4a6e      	ldr	r2, [pc, #440]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002760:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002764:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fc5b 	bl	8001020 <HAL_GetTick>
 800276a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800276c:	e008      	b.n	8002780 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800276e:	f7fe fc57 	bl	8001020 <HAL_GetTick>
 8002772:	4602      	mov	r2, r0
 8002774:	693b      	ldr	r3, [r7, #16]
 8002776:	1ad3      	subs	r3, r2, r3
 8002778:	2b02      	cmp	r3, #2
 800277a:	d901      	bls.n	8002780 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800277c:	2303      	movs	r3, #3
 800277e:	e21d      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002780:	4b65      	ldr	r3, [pc, #404]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002788:	2b00      	cmp	r3, #0
 800278a:	d0f0      	beq.n	800276e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800278c:	4b62      	ldr	r3, [pc, #392]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800278e:	685b      	ldr	r3, [r3, #4]
 8002790:	f023 52f8 	bic.w	r2, r3, #520093696	@ 0x1f000000
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	691b      	ldr	r3, [r3, #16]
 8002798:	061b      	lsls	r3, r3, #24
 800279a:	495f      	ldr	r1, [pc, #380]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800279c:	4313      	orrs	r3, r2
 800279e:	604b      	str	r3, [r1, #4]
 80027a0:	e018      	b.n	80027d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027a2:	4b5d      	ldr	r3, [pc, #372]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a5c      	ldr	r2, [pc, #368]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80027ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ae:	f7fe fc37 	bl	8001020 <HAL_GetTick>
 80027b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027b4:	e008      	b.n	80027c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027b6:	f7fe fc33 	bl	8001020 <HAL_GetTick>
 80027ba:	4602      	mov	r2, r0
 80027bc:	693b      	ldr	r3, [r7, #16]
 80027be:	1ad3      	subs	r3, r2, r3
 80027c0:	2b02      	cmp	r3, #2
 80027c2:	d901      	bls.n	80027c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80027c4:	2303      	movs	r3, #3
 80027c6:	e1f9      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80027c8:	4b53      	ldr	r3, [pc, #332]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d1f0      	bne.n	80027b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f003 0308 	and.w	r3, r3, #8
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d03c      	beq.n	800285a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	695b      	ldr	r3, [r3, #20]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d01c      	beq.n	8002822 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80027e8:	4b4b      	ldr	r3, [pc, #300]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80027ee:	4a4a      	ldr	r2, [pc, #296]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80027f0:	f043 0301 	orr.w	r3, r3, #1
 80027f4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80027f8:	f7fe fc12 	bl	8001020 <HAL_GetTick>
 80027fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80027fe:	e008      	b.n	8002812 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002800:	f7fe fc0e 	bl	8001020 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	693b      	ldr	r3, [r7, #16]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	2b02      	cmp	r3, #2
 800280c:	d901      	bls.n	8002812 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800280e:	2303      	movs	r3, #3
 8002810:	e1d4      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002812:	4b41      	ldr	r3, [pc, #260]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002814:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002818:	f003 0302 	and.w	r3, r3, #2
 800281c:	2b00      	cmp	r3, #0
 800281e:	d0ef      	beq.n	8002800 <HAL_RCC_OscConfig+0x3ec>
 8002820:	e01b      	b.n	800285a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002822:	4b3d      	ldr	r3, [pc, #244]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002824:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002828:	4a3b      	ldr	r2, [pc, #236]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800282a:	f023 0301 	bic.w	r3, r3, #1
 800282e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002832:	f7fe fbf5 	bl	8001020 <HAL_GetTick>
 8002836:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002838:	e008      	b.n	800284c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800283a:	f7fe fbf1 	bl	8001020 <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	693b      	ldr	r3, [r7, #16]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	2b02      	cmp	r3, #2
 8002846:	d901      	bls.n	800284c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002848:	2303      	movs	r3, #3
 800284a:	e1b7      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800284c:	4b32      	ldr	r3, [pc, #200]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800284e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002852:	f003 0302 	and.w	r3, r3, #2
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1ef      	bne.n	800283a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f003 0304 	and.w	r3, r3, #4
 8002862:	2b00      	cmp	r3, #0
 8002864:	f000 80a6 	beq.w	80029b4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002868:	2300      	movs	r3, #0
 800286a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800286c:	4b2a      	ldr	r3, [pc, #168]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800286e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002870:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002874:	2b00      	cmp	r3, #0
 8002876:	d10d      	bne.n	8002894 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002878:	4b27      	ldr	r3, [pc, #156]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800287a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800287c:	4a26      	ldr	r2, [pc, #152]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800287e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002882:	6593      	str	r3, [r2, #88]	@ 0x58
 8002884:	4b24      	ldr	r3, [pc, #144]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002886:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002888:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800288c:	60bb      	str	r3, [r7, #8]
 800288e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002890:	2301      	movs	r3, #1
 8002892:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002894:	4b21      	ldr	r3, [pc, #132]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800289c:	2b00      	cmp	r3, #0
 800289e:	d118      	bne.n	80028d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80028a0:	4b1e      	ldr	r3, [pc, #120]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	4a1d      	ldr	r2, [pc, #116]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 80028a6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80028aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80028ac:	f7fe fbb8 	bl	8001020 <HAL_GetTick>
 80028b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028b2:	e008      	b.n	80028c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80028b4:	f7fe fbb4 	bl	8001020 <HAL_GetTick>
 80028b8:	4602      	mov	r2, r0
 80028ba:	693b      	ldr	r3, [r7, #16]
 80028bc:	1ad3      	subs	r3, r2, r3
 80028be:	2b02      	cmp	r3, #2
 80028c0:	d901      	bls.n	80028c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80028c2:	2303      	movs	r3, #3
 80028c4:	e17a      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80028c6:	4b15      	ldr	r3, [pc, #84]	@ (800291c <HAL_RCC_OscConfig+0x508>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80028ce:	2b00      	cmp	r3, #0
 80028d0:	d0f0      	beq.n	80028b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d108      	bne.n	80028ec <HAL_RCC_OscConfig+0x4d8>
 80028da:	4b0f      	ldr	r3, [pc, #60]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028e0:	4a0d      	ldr	r2, [pc, #52]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028e2:	f043 0301 	orr.w	r3, r3, #1
 80028e6:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80028ea:	e029      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b05      	cmp	r3, #5
 80028f2:	d115      	bne.n	8002920 <HAL_RCC_OscConfig+0x50c>
 80028f4:	4b08      	ldr	r3, [pc, #32]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80028fa:	4a07      	ldr	r2, [pc, #28]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 80028fc:	f043 0304 	orr.w	r3, r3, #4
 8002900:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002904:	4b04      	ldr	r3, [pc, #16]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 8002906:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800290a:	4a03      	ldr	r2, [pc, #12]	@ (8002918 <HAL_RCC_OscConfig+0x504>)
 800290c:	f043 0301 	orr.w	r3, r3, #1
 8002910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002914:	e014      	b.n	8002940 <HAL_RCC_OscConfig+0x52c>
 8002916:	bf00      	nop
 8002918:	40021000 	.word	0x40021000
 800291c:	40007000 	.word	0x40007000
 8002920:	4b9c      	ldr	r3, [pc, #624]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002922:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002926:	4a9b      	ldr	r2, [pc, #620]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002928:	f023 0301 	bic.w	r3, r3, #1
 800292c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8002930:	4b98      	ldr	r3, [pc, #608]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002932:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002936:	4a97      	ldr	r2, [pc, #604]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002938:	f023 0304 	bic.w	r3, r3, #4
 800293c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	689b      	ldr	r3, [r3, #8]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d016      	beq.n	8002976 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002948:	f7fe fb6a 	bl	8001020 <HAL_GetTick>
 800294c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800294e:	e00a      	b.n	8002966 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002950:	f7fe fb66 	bl	8001020 <HAL_GetTick>
 8002954:	4602      	mov	r2, r0
 8002956:	693b      	ldr	r3, [r7, #16]
 8002958:	1ad3      	subs	r3, r2, r3
 800295a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800295e:	4293      	cmp	r3, r2
 8002960:	d901      	bls.n	8002966 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 8002962:	2303      	movs	r3, #3
 8002964:	e12a      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002966:	4b8b      	ldr	r3, [pc, #556]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002968:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0ed      	beq.n	8002950 <HAL_RCC_OscConfig+0x53c>
 8002974:	e015      	b.n	80029a2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002976:	f7fe fb53 	bl	8001020 <HAL_GetTick>
 800297a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800297c:	e00a      	b.n	8002994 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800297e:	f7fe fb4f 	bl	8001020 <HAL_GetTick>
 8002982:	4602      	mov	r2, r0
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	1ad3      	subs	r3, r2, r3
 8002988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298c:	4293      	cmp	r3, r2
 800298e:	d901      	bls.n	8002994 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8002990:	2303      	movs	r3, #3
 8002992:	e113      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002994:	4b7f      	ldr	r3, [pc, #508]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002996:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800299a:	f003 0302 	and.w	r3, r3, #2
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d1ed      	bne.n	800297e <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80029a2:	7ffb      	ldrb	r3, [r7, #31]
 80029a4:	2b01      	cmp	r3, #1
 80029a6:	d105      	bne.n	80029b4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80029a8:	4b7a      	ldr	r3, [pc, #488]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 80029aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80029ac:	4a79      	ldr	r2, [pc, #484]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 80029ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80029b2:	6593      	str	r3, [r2, #88]	@ 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029b8:	2b00      	cmp	r3, #0
 80029ba:	f000 80fe 	beq.w	8002bba <HAL_RCC_OscConfig+0x7a6>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80029c2:	2b02      	cmp	r3, #2
 80029c4:	f040 80d0 	bne.w	8002b68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 80029c8:	4b72      	ldr	r3, [pc, #456]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 80029ca:	68db      	ldr	r3, [r3, #12]
 80029cc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	f003 0203 	and.w	r2, r3, #3
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029d8:	429a      	cmp	r2, r3
 80029da:	d130      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029dc:	697b      	ldr	r3, [r7, #20]
 80029de:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029e6:	3b01      	subs	r3, #1
 80029e8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80029ea:	429a      	cmp	r2, r3
 80029ec:	d127      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80029f8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80029fa:	429a      	cmp	r2, r3
 80029fc:	d11f      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80029fe:	697b      	ldr	r3, [r7, #20]
 8002a00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a04:	687a      	ldr	r2, [r7, #4]
 8002a06:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002a08:	2a07      	cmp	r2, #7
 8002a0a:	bf14      	ite	ne
 8002a0c:	2201      	movne	r2, #1
 8002a0e:	2200      	moveq	r2, #0
 8002a10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002a12:	4293      	cmp	r3, r2
 8002a14:	d113      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002a20:	085b      	lsrs	r3, r3, #1
 8002a22:	3b01      	subs	r3, #1
 8002a24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8002a26:	429a      	cmp	r2, r3
 8002a28:	d109      	bne.n	8002a3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002a2a:	697b      	ldr	r3, [r7, #20]
 8002a2c:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a34:	085b      	lsrs	r3, r3, #1
 8002a36:	3b01      	subs	r3, #1
 8002a38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002a3a:	429a      	cmp	r2, r3
 8002a3c:	d06e      	beq.n	8002b1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002a3e:	69bb      	ldr	r3, [r7, #24]
 8002a40:	2b0c      	cmp	r3, #12
 8002a42:	d069      	beq.n	8002b18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002a44:	4b53      	ldr	r3, [pc, #332]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d105      	bne.n	8002a5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002a50:	4b50      	ldr	r3, [pc, #320]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a58:	2b00      	cmp	r3, #0
 8002a5a:	d001      	beq.n	8002a60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e0ad      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002a60:	4b4c      	ldr	r3, [pc, #304]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4a4b      	ldr	r2, [pc, #300]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002a66:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002a6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002a6c:	f7fe fad8 	bl	8001020 <HAL_GetTick>
 8002a70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a72:	e008      	b.n	8002a86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a74:	f7fe fad4 	bl	8001020 <HAL_GetTick>
 8002a78:	4602      	mov	r2, r0
 8002a7a:	693b      	ldr	r3, [r7, #16]
 8002a7c:	1ad3      	subs	r3, r2, r3
 8002a7e:	2b02      	cmp	r3, #2
 8002a80:	d901      	bls.n	8002a86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8002a82:	2303      	movs	r3, #3
 8002a84:	e09a      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a86:	4b43      	ldr	r3, [pc, #268]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a8e:	2b00      	cmp	r3, #0
 8002a90:	d1f0      	bne.n	8002a74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a92:	4b40      	ldr	r3, [pc, #256]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002a94:	68da      	ldr	r2, [r3, #12]
 8002a96:	4b40      	ldr	r3, [pc, #256]	@ (8002b98 <HAL_RCC_OscConfig+0x784>)
 8002a98:	4013      	ands	r3, r2
 8002a9a:	687a      	ldr	r2, [r7, #4]
 8002a9c:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 8002a9e:	687a      	ldr	r2, [r7, #4]
 8002aa0:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 8002aa2:	3a01      	subs	r2, #1
 8002aa4:	0112      	lsls	r2, r2, #4
 8002aa6:	4311      	orrs	r1, r2
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8002aac:	0212      	lsls	r2, r2, #8
 8002aae:	4311      	orrs	r1, r2
 8002ab0:	687a      	ldr	r2, [r7, #4]
 8002ab2:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002ab4:	0852      	lsrs	r2, r2, #1
 8002ab6:	3a01      	subs	r2, #1
 8002ab8:	0552      	lsls	r2, r2, #21
 8002aba:	4311      	orrs	r1, r2
 8002abc:	687a      	ldr	r2, [r7, #4]
 8002abe:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 8002ac0:	0852      	lsrs	r2, r2, #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	0652      	lsls	r2, r2, #25
 8002ac6:	4311      	orrs	r1, r2
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002acc:	0912      	lsrs	r2, r2, #4
 8002ace:	0452      	lsls	r2, r2, #17
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	4930      	ldr	r1, [pc, #192]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002ad4:	4313      	orrs	r3, r2
 8002ad6:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002ad8:	4b2e      	ldr	r3, [pc, #184]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	4a2d      	ldr	r2, [pc, #180]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002ade:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ae2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002ae6:	68db      	ldr	r3, [r3, #12]
 8002ae8:	4a2a      	ldr	r2, [pc, #168]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002aea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002aee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002af0:	f7fe fa96 	bl	8001020 <HAL_GetTick>
 8002af4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002af6:	e008      	b.n	8002b0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002af8:	f7fe fa92 	bl	8001020 <HAL_GetTick>
 8002afc:	4602      	mov	r2, r0
 8002afe:	693b      	ldr	r3, [r7, #16]
 8002b00:	1ad3      	subs	r3, r2, r3
 8002b02:	2b02      	cmp	r3, #2
 8002b04:	d901      	bls.n	8002b0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8002b06:	2303      	movs	r3, #3
 8002b08:	e058      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b0a:	4b22      	ldr	r3, [pc, #136]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d0f0      	beq.n	8002af8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b16:	e050      	b.n	8002bba <HAL_RCC_OscConfig+0x7a6>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002b18:	2301      	movs	r3, #1
 8002b1a:	e04f      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b1c:	4b1d      	ldr	r3, [pc, #116]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d148      	bne.n	8002bba <HAL_RCC_OscConfig+0x7a6>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002b28:	4b1a      	ldr	r3, [pc, #104]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	4a19      	ldr	r2, [pc, #100]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b2e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002b34:	4b17      	ldr	r3, [pc, #92]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b36:	68db      	ldr	r3, [r3, #12]
 8002b38:	4a16      	ldr	r2, [pc, #88]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b3a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002b3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002b40:	f7fe fa6e 	bl	8001020 <HAL_GetTick>
 8002b44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b46:	e008      	b.n	8002b5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b48:	f7fe fa6a 	bl	8001020 <HAL_GetTick>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d901      	bls.n	8002b5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e030      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002b5a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d0f0      	beq.n	8002b48 <HAL_RCC_OscConfig+0x734>
 8002b66:	e028      	b.n	8002bba <HAL_RCC_OscConfig+0x7a6>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002b68:	69bb      	ldr	r3, [r7, #24]
 8002b6a:	2b0c      	cmp	r3, #12
 8002b6c:	d023      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x7a2>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4a08      	ldr	r2, [pc, #32]	@ (8002b94 <HAL_RCC_OscConfig+0x780>)
 8002b74:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8002b78:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b7a:	f7fe fa51 	bl	8001020 <HAL_GetTick>
 8002b7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b80:	e00c      	b.n	8002b9c <HAL_RCC_OscConfig+0x788>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b82:	f7fe fa4d 	bl	8001020 <HAL_GetTick>
 8002b86:	4602      	mov	r2, r0
 8002b88:	693b      	ldr	r3, [r7, #16]
 8002b8a:	1ad3      	subs	r3, r2, r3
 8002b8c:	2b02      	cmp	r3, #2
 8002b8e:	d905      	bls.n	8002b9c <HAL_RCC_OscConfig+0x788>
          {
            return HAL_TIMEOUT;
 8002b90:	2303      	movs	r3, #3
 8002b92:	e013      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
 8002b94:	40021000 	.word	0x40021000
 8002b98:	f99d808c 	.word	0xf99d808c
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002b9c:	4b09      	ldr	r3, [pc, #36]	@ (8002bc4 <HAL_RCC_OscConfig+0x7b0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d1ec      	bne.n	8002b82 <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002ba8:	4b06      	ldr	r3, [pc, #24]	@ (8002bc4 <HAL_RCC_OscConfig+0x7b0>)
 8002baa:	68da      	ldr	r2, [r3, #12]
 8002bac:	4905      	ldr	r1, [pc, #20]	@ (8002bc4 <HAL_RCC_OscConfig+0x7b0>)
 8002bae:	4b06      	ldr	r3, [pc, #24]	@ (8002bc8 <HAL_RCC_OscConfig+0x7b4>)
 8002bb0:	4013      	ands	r3, r2
 8002bb2:	60cb      	str	r3, [r1, #12]
 8002bb4:	e001      	b.n	8002bba <HAL_RCC_OscConfig+0x7a6>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <HAL_RCC_OscConfig+0x7a8>
      }
    }
  }
  return HAL_OK;
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	3720      	adds	r7, #32
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40021000 	.word	0x40021000
 8002bc8:	feeefffc 	.word	0xfeeefffc

08002bcc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2b00      	cmp	r3, #0
 8002bda:	d101      	bne.n	8002be0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e0e7      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002be0:	4b75      	ldr	r3, [pc, #468]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f003 0307 	and.w	r3, r3, #7
 8002be8:	683a      	ldr	r2, [r7, #0]
 8002bea:	429a      	cmp	r2, r3
 8002bec:	d910      	bls.n	8002c10 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bee:	4b72      	ldr	r3, [pc, #456]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 0207 	bic.w	r2, r3, #7
 8002bf6:	4970      	ldr	r1, [pc, #448]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002bf8:	683b      	ldr	r3, [r7, #0]
 8002bfa:	4313      	orrs	r3, r2
 8002bfc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002bfe:	4b6e      	ldr	r3, [pc, #440]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	f003 0307 	and.w	r3, r3, #7
 8002c06:	683a      	ldr	r2, [r7, #0]
 8002c08:	429a      	cmp	r2, r3
 8002c0a:	d001      	beq.n	8002c10 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e0cf      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	f003 0302 	and.w	r3, r3, #2
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d010      	beq.n	8002c3e <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	689a      	ldr	r2, [r3, #8]
 8002c20:	4b66      	ldr	r3, [pc, #408]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c22:	689b      	ldr	r3, [r3, #8]
 8002c24:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c28:	429a      	cmp	r2, r3
 8002c2a:	d908      	bls.n	8002c3e <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c2c:	4b63      	ldr	r3, [pc, #396]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	689b      	ldr	r3, [r3, #8]
 8002c38:	4960      	ldr	r1, [pc, #384]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c3a:	4313      	orrs	r3, r2
 8002c3c:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	f003 0301 	and.w	r3, r3, #1
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d04c      	beq.n	8002ce4 <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	685b      	ldr	r3, [r3, #4]
 8002c4e:	2b03      	cmp	r3, #3
 8002c50:	d107      	bne.n	8002c62 <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c52:	4b5a      	ldr	r3, [pc, #360]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d121      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e0a6      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	2b02      	cmp	r3, #2
 8002c68:	d107      	bne.n	8002c7a <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c6a:	4b54      	ldr	r3, [pc, #336]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c72:	2b00      	cmp	r3, #0
 8002c74:	d115      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c76:	2301      	movs	r3, #1
 8002c78:	e09a      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	685b      	ldr	r3, [r3, #4]
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d107      	bne.n	8002c92 <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002c82:	4b4e      	ldr	r3, [pc, #312]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	f003 0302 	and.w	r3, r3, #2
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e08e      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c92:	4b4a      	ldr	r3, [pc, #296]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e086      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002ca2:	4b46      	ldr	r3, [pc, #280]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002ca4:	689b      	ldr	r3, [r3, #8]
 8002ca6:	f023 0203 	bic.w	r2, r3, #3
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	4943      	ldr	r1, [pc, #268]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002cb0:	4313      	orrs	r3, r2
 8002cb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cb4:	f7fe f9b4 	bl	8001020 <HAL_GetTick>
 8002cb8:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cba:	e00a      	b.n	8002cd2 <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cbc:	f7fe f9b0 	bl	8001020 <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	68fb      	ldr	r3, [r7, #12]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002cca:	4293      	cmp	r3, r2
 8002ccc:	d901      	bls.n	8002cd2 <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8002cce:	2303      	movs	r3, #3
 8002cd0:	e06e      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cd2:	4b3a      	ldr	r3, [pc, #232]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002cd4:	689b      	ldr	r3, [r3, #8]
 8002cd6:	f003 020c 	and.w	r2, r3, #12
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	009b      	lsls	r3, r3, #2
 8002ce0:	429a      	cmp	r2, r3
 8002ce2:	d1eb      	bne.n	8002cbc <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0302 	and.w	r3, r3, #2
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d010      	beq.n	8002d12 <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	689a      	ldr	r2, [r3, #8]
 8002cf4:	4b31      	ldr	r3, [pc, #196]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	689b      	ldr	r3, [r3, #8]
 8002cf8:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d208      	bcs.n	8002d12 <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d00:	4b2e      	ldr	r3, [pc, #184]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d02:	689b      	ldr	r3, [r3, #8]
 8002d04:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	492b      	ldr	r1, [pc, #172]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d0e:	4313      	orrs	r3, r2
 8002d10:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002d12:	4b29      	ldr	r3, [pc, #164]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f003 0307 	and.w	r3, r3, #7
 8002d1a:	683a      	ldr	r2, [r7, #0]
 8002d1c:	429a      	cmp	r2, r3
 8002d1e:	d210      	bcs.n	8002d42 <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d20:	4b25      	ldr	r3, [pc, #148]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f023 0207 	bic.w	r2, r3, #7
 8002d28:	4923      	ldr	r1, [pc, #140]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4313      	orrs	r3, r2
 8002d2e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d30:	4b21      	ldr	r3, [pc, #132]	@ (8002db8 <HAL_RCC_ClockConfig+0x1ec>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f003 0307 	and.w	r3, r3, #7
 8002d38:	683a      	ldr	r2, [r7, #0]
 8002d3a:	429a      	cmp	r2, r3
 8002d3c:	d001      	beq.n	8002d42 <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e036      	b.n	8002db0 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f003 0304 	and.w	r3, r3, #4
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	d008      	beq.n	8002d60 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d50:	689b      	ldr	r3, [r3, #8]
 8002d52:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	68db      	ldr	r3, [r3, #12]
 8002d5a:	4918      	ldr	r1, [pc, #96]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	f003 0308 	and.w	r3, r3, #8
 8002d68:	2b00      	cmp	r3, #0
 8002d6a:	d009      	beq.n	8002d80 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002d6c:	4b13      	ldr	r3, [pc, #76]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d6e:	689b      	ldr	r3, [r3, #8]
 8002d70:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	691b      	ldr	r3, [r3, #16]
 8002d78:	00db      	lsls	r3, r3, #3
 8002d7a:	4910      	ldr	r1, [pc, #64]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002d80:	f000 f824 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8002d84:	4602      	mov	r2, r0
 8002d86:	4b0d      	ldr	r3, [pc, #52]	@ (8002dbc <HAL_RCC_ClockConfig+0x1f0>)
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	091b      	lsrs	r3, r3, #4
 8002d8c:	f003 030f 	and.w	r3, r3, #15
 8002d90:	490b      	ldr	r1, [pc, #44]	@ (8002dc0 <HAL_RCC_ClockConfig+0x1f4>)
 8002d92:	5ccb      	ldrb	r3, [r1, r3]
 8002d94:	f003 031f 	and.w	r3, r3, #31
 8002d98:	fa22 f303 	lsr.w	r3, r2, r3
 8002d9c:	4a09      	ldr	r2, [pc, #36]	@ (8002dc4 <HAL_RCC_ClockConfig+0x1f8>)
 8002d9e:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002da0:	4b09      	ldr	r3, [pc, #36]	@ (8002dc8 <HAL_RCC_ClockConfig+0x1fc>)
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	4618      	mov	r0, r3
 8002da6:	f7fe f8eb 	bl	8000f80 <HAL_InitTick>
 8002daa:	4603      	mov	r3, r0
 8002dac:	72fb      	strb	r3, [r7, #11]

  return status;
 8002dae:	7afb      	ldrb	r3, [r7, #11]
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	3710      	adds	r7, #16
 8002db4:	46bd      	mov	sp, r7
 8002db6:	bd80      	pop	{r7, pc}
 8002db8:	40022000 	.word	0x40022000
 8002dbc:	40021000 	.word	0x40021000
 8002dc0:	080054ec 	.word	0x080054ec
 8002dc4:	2000000c 	.word	0x2000000c
 8002dc8:	20000010 	.word	0x20000010

08002dcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002dcc:	b480      	push	{r7}
 8002dce:	b089      	sub	sp, #36	@ 0x24
 8002dd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	61fb      	str	r3, [r7, #28]
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002dda:	4b3e      	ldr	r3, [pc, #248]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002ddc:	689b      	ldr	r3, [r3, #8]
 8002dde:	f003 030c 	and.w	r3, r3, #12
 8002de2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002de4:	4b3b      	ldr	r3, [pc, #236]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002de6:	68db      	ldr	r3, [r3, #12]
 8002de8:	f003 0303 	and.w	r3, r3, #3
 8002dec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002dee:	693b      	ldr	r3, [r7, #16]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d005      	beq.n	8002e00 <HAL_RCC_GetSysClockFreq+0x34>
 8002df4:	693b      	ldr	r3, [r7, #16]
 8002df6:	2b0c      	cmp	r3, #12
 8002df8:	d121      	bne.n	8002e3e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2b01      	cmp	r3, #1
 8002dfe:	d11e      	bne.n	8002e3e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002e00:	4b34      	ldr	r3, [pc, #208]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	f003 0308 	and.w	r3, r3, #8
 8002e08:	2b00      	cmp	r3, #0
 8002e0a:	d107      	bne.n	8002e1c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002e0c:	4b31      	ldr	r3, [pc, #196]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e0e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002e12:	0a1b      	lsrs	r3, r3, #8
 8002e14:	f003 030f 	and.w	r3, r3, #15
 8002e18:	61fb      	str	r3, [r7, #28]
 8002e1a:	e005      	b.n	8002e28 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002e1c:	4b2d      	ldr	r3, [pc, #180]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8002e28:	4a2b      	ldr	r2, [pc, #172]	@ (8002ed8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8002e2a:	69fb      	ldr	r3, [r7, #28]
 8002e2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e30:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e32:	693b      	ldr	r3, [r7, #16]
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d10d      	bne.n	8002e54 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002e3c:	e00a      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8002e3e:	693b      	ldr	r3, [r7, #16]
 8002e40:	2b04      	cmp	r3, #4
 8002e42:	d102      	bne.n	8002e4a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8002e44:	4b25      	ldr	r3, [pc, #148]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x110>)
 8002e46:	61bb      	str	r3, [r7, #24]
 8002e48:	e004      	b.n	8002e54 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8002e4a:	693b      	ldr	r3, [r7, #16]
 8002e4c:	2b08      	cmp	r3, #8
 8002e4e:	d101      	bne.n	8002e54 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002e50:	4b23      	ldr	r3, [pc, #140]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e52:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002e54:	693b      	ldr	r3, [r7, #16]
 8002e56:	2b0c      	cmp	r3, #12
 8002e58:	d134      	bne.n	8002ec4 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002e5a:	4b1e      	ldr	r3, [pc, #120]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e5c:	68db      	ldr	r3, [r3, #12]
 8002e5e:	f003 0303 	and.w	r3, r3, #3
 8002e62:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e64:	68bb      	ldr	r3, [r7, #8]
 8002e66:	2b02      	cmp	r3, #2
 8002e68:	d003      	beq.n	8002e72 <HAL_RCC_GetSysClockFreq+0xa6>
 8002e6a:	68bb      	ldr	r3, [r7, #8]
 8002e6c:	2b03      	cmp	r3, #3
 8002e6e:	d003      	beq.n	8002e78 <HAL_RCC_GetSysClockFreq+0xac>
 8002e70:	e005      	b.n	8002e7e <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002e72:	4b1a      	ldr	r3, [pc, #104]	@ (8002edc <HAL_RCC_GetSysClockFreq+0x110>)
 8002e74:	617b      	str	r3, [r7, #20]
      break;
 8002e76:	e005      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002e78:	4b19      	ldr	r3, [pc, #100]	@ (8002ee0 <HAL_RCC_GetSysClockFreq+0x114>)
 8002e7a:	617b      	str	r3, [r7, #20]
      break;
 8002e7c:	e002      	b.n	8002e84 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	617b      	str	r3, [r7, #20]
      break;
 8002e82:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002e84:	4b13      	ldr	r3, [pc, #76]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e86:	68db      	ldr	r3, [r3, #12]
 8002e88:	091b      	lsrs	r3, r3, #4
 8002e8a:	f003 0307 	and.w	r3, r3, #7
 8002e8e:	3301      	adds	r3, #1
 8002e90:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002e92:	4b10      	ldr	r3, [pc, #64]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002e94:	68db      	ldr	r3, [r3, #12]
 8002e96:	0a1b      	lsrs	r3, r3, #8
 8002e98:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002e9c:	697a      	ldr	r2, [r7, #20]
 8002e9e:	fb03 f202 	mul.w	r2, r3, r2
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea8:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002eaa:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x108>)
 8002eac:	68db      	ldr	r3, [r3, #12]
 8002eae:	0e5b      	lsrs	r3, r3, #25
 8002eb0:	f003 0303 	and.w	r3, r3, #3
 8002eb4:	3301      	adds	r3, #1
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002eba:	697a      	ldr	r2, [r7, #20]
 8002ebc:	683b      	ldr	r3, [r7, #0]
 8002ebe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ec2:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002ec4:	69bb      	ldr	r3, [r7, #24]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3724      	adds	r7, #36	@ 0x24
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ed0:	4770      	bx	lr
 8002ed2:	bf00      	nop
 8002ed4:	40021000 	.word	0x40021000
 8002ed8:	08005504 	.word	0x08005504
 8002edc:	00f42400 	.word	0x00f42400
 8002ee0:	007a1200 	.word	0x007a1200

08002ee4 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee8:	4b03      	ldr	r3, [pc, #12]	@ (8002ef8 <HAL_RCC_GetHCLKFreq+0x14>)
 8002eea:	681b      	ldr	r3, [r3, #0]
}
 8002eec:	4618      	mov	r0, r3
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ef4:	4770      	bx	lr
 8002ef6:	bf00      	nop
 8002ef8:	2000000c 	.word	0x2000000c

08002efc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002efc:	b580      	push	{r7, lr}
 8002efe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002f00:	f7ff fff0 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f04:	4602      	mov	r2, r0
 8002f06:	4b06      	ldr	r3, [pc, #24]	@ (8002f20 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f08:	689b      	ldr	r3, [r3, #8]
 8002f0a:	0a1b      	lsrs	r3, r3, #8
 8002f0c:	f003 0307 	and.w	r3, r3, #7
 8002f10:	4904      	ldr	r1, [pc, #16]	@ (8002f24 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002f12:	5ccb      	ldrb	r3, [r1, r3]
 8002f14:	f003 031f 	and.w	r3, r3, #31
 8002f18:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	bd80      	pop	{r7, pc}
 8002f20:	40021000 	.word	0x40021000
 8002f24:	080054fc 	.word	0x080054fc

08002f28 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8002f2c:	f7ff ffda 	bl	8002ee4 <HAL_RCC_GetHCLKFreq>
 8002f30:	4602      	mov	r2, r0
 8002f32:	4b06      	ldr	r3, [pc, #24]	@ (8002f4c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f34:	689b      	ldr	r3, [r3, #8]
 8002f36:	0adb      	lsrs	r3, r3, #11
 8002f38:	f003 0307 	and.w	r3, r3, #7
 8002f3c:	4904      	ldr	r1, [pc, #16]	@ (8002f50 <HAL_RCC_GetPCLK2Freq+0x28>)
 8002f3e:	5ccb      	ldrb	r3, [r1, r3]
 8002f40:	f003 031f 	and.w	r3, r3, #31
 8002f44:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f48:	4618      	mov	r0, r3
 8002f4a:	bd80      	pop	{r7, pc}
 8002f4c:	40021000 	.word	0x40021000
 8002f50:	080054fc 	.word	0x080054fc

08002f54 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b086      	sub	sp, #24
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002f5c:	2300      	movs	r3, #0
 8002f5e:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002f60:	4b2a      	ldr	r3, [pc, #168]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f64:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d003      	beq.n	8002f74 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002f6c:	f7ff f9ee 	bl	800234c <HAL_PWREx_GetVoltageRange>
 8002f70:	6178      	str	r0, [r7, #20]
 8002f72:	e014      	b.n	8002f9e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002f74:	4b25      	ldr	r3, [pc, #148]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f78:	4a24      	ldr	r2, [pc, #144]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f7a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002f7e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002f80:	4b22      	ldr	r3, [pc, #136]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f82:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f84:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002f88:	60fb      	str	r3, [r7, #12]
 8002f8a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002f8c:	f7ff f9de 	bl	800234c <HAL_PWREx_GetVoltageRange>
 8002f90:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002f92:	4b1e      	ldr	r3, [pc, #120]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002f96:	4a1d      	ldr	r2, [pc, #116]	@ (800300c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002f98:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002f9c:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002fa4:	d10b      	bne.n	8002fbe <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	2b80      	cmp	r3, #128	@ 0x80
 8002faa:	d919      	bls.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2ba0      	cmp	r3, #160	@ 0xa0
 8002fb0:	d902      	bls.n	8002fb8 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fb2:	2302      	movs	r3, #2
 8002fb4:	613b      	str	r3, [r7, #16]
 8002fb6:	e013      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fb8:	2301      	movs	r3, #1
 8002fba:	613b      	str	r3, [r7, #16]
 8002fbc:	e010      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2b80      	cmp	r3, #128	@ 0x80
 8002fc2:	d902      	bls.n	8002fca <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002fc4:	2303      	movs	r3, #3
 8002fc6:	613b      	str	r3, [r7, #16]
 8002fc8:	e00a      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2b80      	cmp	r3, #128	@ 0x80
 8002fce:	d102      	bne.n	8002fd6 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002fd0:	2302      	movs	r3, #2
 8002fd2:	613b      	str	r3, [r7, #16]
 8002fd4:	e004      	b.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	2b70      	cmp	r3, #112	@ 0x70
 8002fda:	d101      	bne.n	8002fe0 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002fdc:	2301      	movs	r3, #1
 8002fde:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8003010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f023 0207 	bic.w	r2, r3, #7
 8002fe8:	4909      	ldr	r1, [pc, #36]	@ (8003010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002ff0:	4b07      	ldr	r3, [pc, #28]	@ (8003010 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	f003 0307 	and.w	r3, r3, #7
 8002ff8:	693a      	ldr	r2, [r7, #16]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	d001      	beq.n	8003002 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8002ffe:	2301      	movs	r3, #1
 8003000:	e000      	b.n	8003004 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8003002:	2300      	movs	r3, #0
}
 8003004:	4618      	mov	r0, r3
 8003006:	3718      	adds	r7, #24
 8003008:	46bd      	mov	sp, r7
 800300a:	bd80      	pop	{r7, pc}
 800300c:	40021000 	.word	0x40021000
 8003010:	40022000 	.word	0x40022000

08003014 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003014:	b580      	push	{r7, lr}
 8003016:	b086      	sub	sp, #24
 8003018:	af00      	add	r7, sp, #0
 800301a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800301c:	2300      	movs	r3, #0
 800301e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003020:	2300      	movs	r3, #0
 8003022:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800302c:	2b00      	cmp	r3, #0
 800302e:	d041      	beq.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8003034:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8003038:	d02a      	beq.n	8003090 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 800303a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800303e:	d824      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x76>
 8003040:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8003044:	d008      	beq.n	8003058 <HAL_RCCEx_PeriphCLKConfig+0x44>
 8003046:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800304a:	d81e      	bhi.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x76>
 800304c:	2b00      	cmp	r3, #0
 800304e:	d00a      	beq.n	8003066 <HAL_RCCEx_PeriphCLKConfig+0x52>
 8003050:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003054:	d010      	beq.n	8003078 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8003056:	e018      	b.n	800308a <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003058:	4b86      	ldr	r3, [pc, #536]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	4a85      	ldr	r2, [pc, #532]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800305e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003062:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003064:	e015      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	3304      	adds	r3, #4
 800306a:	2100      	movs	r1, #0
 800306c:	4618      	mov	r0, r3
 800306e:	f000 fabb 	bl	80035e8 <RCCEx_PLLSAI1_Config>
 8003072:	4603      	mov	r3, r0
 8003074:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003076:	e00c      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	3320      	adds	r3, #32
 800307c:	2100      	movs	r1, #0
 800307e:	4618      	mov	r0, r3
 8003080:	f000 fba6 	bl	80037d0 <RCCEx_PLLSAI2_Config>
 8003084:	4603      	mov	r3, r0
 8003086:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003088:	e003      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800308a:	2301      	movs	r3, #1
 800308c:	74fb      	strb	r3, [r7, #19]
      break;
 800308e:	e000      	b.n	8003092 <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8003090:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003092:	7cfb      	ldrb	r3, [r7, #19]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d10b      	bne.n	80030b0 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003098:	4b76      	ldr	r3, [pc, #472]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800309a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800309e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80030a6:	4973      	ldr	r1, [pc, #460]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030a8:	4313      	orrs	r3, r2
 80030aa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80030ae:	e001      	b.n	80030b4 <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030b0:	7cfb      	ldrb	r3, [r7, #19]
 80030b2:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030bc:	2b00      	cmp	r3, #0
 80030be:	d041      	beq.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80030c4:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030c8:	d02a      	beq.n	8003120 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 80030ca:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80030ce:	d824      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030d0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030d4:	d008      	beq.n	80030e8 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80030d6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80030da:	d81e      	bhi.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x106>
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d00a      	beq.n	80030f6 <HAL_RCCEx_PeriphCLKConfig+0xe2>
 80030e0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80030e4:	d010      	beq.n	8003108 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 80030e6:	e018      	b.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80030e8:	4b62      	ldr	r3, [pc, #392]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	4a61      	ldr	r2, [pc, #388]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80030ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030f2:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80030f4:	e015      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	3304      	adds	r3, #4
 80030fa:	2100      	movs	r1, #0
 80030fc:	4618      	mov	r0, r3
 80030fe:	f000 fa73 	bl	80035e8 <RCCEx_PLLSAI1_Config>
 8003102:	4603      	mov	r3, r0
 8003104:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003106:	e00c      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	3320      	adds	r3, #32
 800310c:	2100      	movs	r1, #0
 800310e:	4618      	mov	r0, r3
 8003110:	f000 fb5e 	bl	80037d0 <RCCEx_PLLSAI2_Config>
 8003114:	4603      	mov	r3, r0
 8003116:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8003118:	e003      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800311a:	2301      	movs	r3, #1
 800311c:	74fb      	strb	r3, [r7, #19]
      break;
 800311e:	e000      	b.n	8003122 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 8003120:	bf00      	nop
    }

    if(ret == HAL_OK)
 8003122:	7cfb      	ldrb	r3, [r7, #19]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d10b      	bne.n	8003140 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8003128:	4b52      	ldr	r3, [pc, #328]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800312a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800312e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003136:	494f      	ldr	r1, [pc, #316]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003138:	4313      	orrs	r3, r2
 800313a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 800313e:	e001      	b.n	8003144 <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003140:	7cfb      	ldrb	r3, [r7, #19]
 8003142:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800314c:	2b00      	cmp	r3, #0
 800314e:	f000 80a0 	beq.w	8003292 <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003152:	2300      	movs	r3, #0
 8003154:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003156:	4b47      	ldr	r3, [pc, #284]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003158:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800315a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d101      	bne.n	8003166 <HAL_RCCEx_PeriphCLKConfig+0x152>
 8003162:	2301      	movs	r3, #1
 8003164:	e000      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x154>
 8003166:	2300      	movs	r3, #0
 8003168:	2b00      	cmp	r3, #0
 800316a:	d00d      	beq.n	8003188 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800316c:	4b41      	ldr	r3, [pc, #260]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800316e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003170:	4a40      	ldr	r2, [pc, #256]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003172:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003176:	6593      	str	r3, [r2, #88]	@ 0x58
 8003178:	4b3e      	ldr	r3, [pc, #248]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800317a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800317c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003180:	60bb      	str	r3, [r7, #8]
 8003182:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003184:	2301      	movs	r3, #1
 8003186:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003188:	4b3b      	ldr	r3, [pc, #236]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4a3a      	ldr	r2, [pc, #232]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800318e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003192:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003194:	f7fd ff44 	bl	8001020 <HAL_GetTick>
 8003198:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800319a:	e009      	b.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800319c:	f7fd ff40 	bl	8001020 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	2b02      	cmp	r3, #2
 80031a8:	d902      	bls.n	80031b0 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 80031aa:	2303      	movs	r3, #3
 80031ac:	74fb      	strb	r3, [r7, #19]
        break;
 80031ae:	e005      	b.n	80031bc <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 80031b0:	4b31      	ldr	r3, [pc, #196]	@ (8003278 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	d0ef      	beq.n	800319c <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 80031bc:	7cfb      	ldrb	r3, [r7, #19]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d15c      	bne.n	800327c <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80031c2:	4b2c      	ldr	r3, [pc, #176]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031c8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80031cc:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d01f      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x200>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80031da:	697a      	ldr	r2, [r7, #20]
 80031dc:	429a      	cmp	r2, r3
 80031de:	d019      	beq.n	8003214 <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80031e0:	4b24      	ldr	r3, [pc, #144]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80031ec:	4b21      	ldr	r3, [pc, #132]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80031f2:	4a20      	ldr	r2, [pc, #128]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80031f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80031fc:	4b1d      	ldr	r3, [pc, #116]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80031fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003202:	4a1c      	ldr	r2, [pc, #112]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003204:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003208:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800320c:	4a19      	ldr	r2, [pc, #100]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800320e:	697b      	ldr	r3, [r7, #20]
 8003210:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003214:	697b      	ldr	r3, [r7, #20]
 8003216:	f003 0301 	and.w	r3, r3, #1
 800321a:	2b00      	cmp	r3, #0
 800321c:	d016      	beq.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800321e:	f7fd feff 	bl	8001020 <HAL_GetTick>
 8003222:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003224:	e00b      	b.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003226:	f7fd fefb 	bl	8001020 <HAL_GetTick>
 800322a:	4602      	mov	r2, r0
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	1ad3      	subs	r3, r2, r3
 8003230:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003234:	4293      	cmp	r3, r2
 8003236:	d902      	bls.n	800323e <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 8003238:	2303      	movs	r3, #3
 800323a:	74fb      	strb	r3, [r7, #19]
            break;
 800323c:	e006      	b.n	800324c <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800323e:	4b0d      	ldr	r3, [pc, #52]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003240:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003244:	f003 0302 	and.w	r3, r3, #2
 8003248:	2b00      	cmp	r3, #0
 800324a:	d0ec      	beq.n	8003226 <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 800324c:	7cfb      	ldrb	r3, [r7, #19]
 800324e:	2b00      	cmp	r3, #0
 8003250:	d10c      	bne.n	800326c <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003252:	4b08      	ldr	r3, [pc, #32]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003254:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8003258:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003262:	4904      	ldr	r1, [pc, #16]	@ (8003274 <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8003264:	4313      	orrs	r3, r2
 8003266:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800326a:	e009      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800326c:	7cfb      	ldrb	r3, [r7, #19]
 800326e:	74bb      	strb	r3, [r7, #18]
 8003270:	e006      	b.n	8003280 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 8003272:	bf00      	nop
 8003274:	40021000 	.word	0x40021000
 8003278:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800327c:	7cfb      	ldrb	r3, [r7, #19]
 800327e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003280:	7c7b      	ldrb	r3, [r7, #17]
 8003282:	2b01      	cmp	r3, #1
 8003284:	d105      	bne.n	8003292 <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003286:	4b9e      	ldr	r3, [pc, #632]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003288:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800328a:	4a9d      	ldr	r2, [pc, #628]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800328c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003290:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	f003 0301 	and.w	r3, r3, #1
 800329a:	2b00      	cmp	r3, #0
 800329c:	d00a      	beq.n	80032b4 <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800329e:	4b98      	ldr	r3, [pc, #608]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032a4:	f023 0203 	bic.w	r2, r3, #3
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032ac:	4994      	ldr	r1, [pc, #592]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032ae:	4313      	orrs	r3, r2
 80032b0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	f003 0302 	and.w	r3, r3, #2
 80032bc:	2b00      	cmp	r3, #0
 80032be:	d00a      	beq.n	80032d6 <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80032c0:	4b8f      	ldr	r3, [pc, #572]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032c6:	f023 020c 	bic.w	r2, r3, #12
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032ce:	498c      	ldr	r1, [pc, #560]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032d0:	4313      	orrs	r3, r2
 80032d2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f003 0304 	and.w	r3, r3, #4
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d00a      	beq.n	80032f8 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80032e2:	4b87      	ldr	r3, [pc, #540]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80032e8:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032f0:	4983      	ldr	r1, [pc, #524]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80032f2:	4313      	orrs	r3, r2
 80032f4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	f003 0308 	and.w	r3, r3, #8
 8003300:	2b00      	cmp	r3, #0
 8003302:	d00a      	beq.n	800331a <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8003304:	4b7e      	ldr	r3, [pc, #504]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003306:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800330a:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003312:	497b      	ldr	r1, [pc, #492]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003314:	4313      	orrs	r3, r2
 8003316:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f003 0310 	and.w	r3, r3, #16
 8003322:	2b00      	cmp	r3, #0
 8003324:	d00a      	beq.n	800333c <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8003326:	4b76      	ldr	r3, [pc, #472]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003328:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800332c:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003334:	4972      	ldr	r1, [pc, #456]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003336:	4313      	orrs	r3, r2
 8003338:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 0320 	and.w	r3, r3, #32
 8003344:	2b00      	cmp	r3, #0
 8003346:	d00a      	beq.n	800335e <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003348:	4b6d      	ldr	r3, [pc, #436]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800334a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800334e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003356:	496a      	ldr	r1, [pc, #424]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003358:	4313      	orrs	r3, r2
 800335a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003366:	2b00      	cmp	r3, #0
 8003368:	d00a      	beq.n	8003380 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800336a:	4b65      	ldr	r3, [pc, #404]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800336c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003370:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003378:	4961      	ldr	r1, [pc, #388]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800337a:	4313      	orrs	r3, r2
 800337c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003388:	2b00      	cmp	r3, #0
 800338a:	d00a      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800338c:	4b5c      	ldr	r3, [pc, #368]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800338e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003392:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800339a:	4959      	ldr	r1, [pc, #356]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800339c:	4313      	orrs	r3, r2
 800339e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d00a      	beq.n	80033c4 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80033ae:	4b54      	ldr	r3, [pc, #336]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033b4:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80033bc:	4950      	ldr	r1, [pc, #320]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033be:	4313      	orrs	r3, r2
 80033c0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d00a      	beq.n	80033e6 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80033d0:	4b4b      	ldr	r3, [pc, #300]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033d6:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033de:	4948      	ldr	r1, [pc, #288]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d00a      	beq.n	8003408 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80033f2:	4b43      	ldr	r3, [pc, #268]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80033f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80033f8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003400:	493f      	ldr	r1, [pc, #252]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003402:	4313      	orrs	r3, r2
 8003404:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8003410:	2b00      	cmp	r3, #0
 8003412:	d028      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003414:	4b3a      	ldr	r3, [pc, #232]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003416:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800341a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003422:	4937      	ldr	r1, [pc, #220]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003424:	4313      	orrs	r3, r2
 8003426:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800342e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003432:	d106      	bne.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003434:	4b32      	ldr	r3, [pc, #200]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003436:	68db      	ldr	r3, [r3, #12]
 8003438:	4a31      	ldr	r2, [pc, #196]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800343a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800343e:	60d3      	str	r3, [r2, #12]
 8003440:	e011      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8003446:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800344a:	d10c      	bne.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	3304      	adds	r3, #4
 8003450:	2101      	movs	r1, #1
 8003452:	4618      	mov	r0, r3
 8003454:	f000 f8c8 	bl	80035e8 <RCCEx_PLLSAI1_Config>
 8003458:	4603      	mov	r3, r0
 800345a:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d001      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 8003462:	7cfb      	ldrb	r3, [r7, #19]
 8003464:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d028      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003472:	4b23      	ldr	r3, [pc, #140]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003474:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8003478:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003480:	491f      	ldr	r1, [pc, #124]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003482:	4313      	orrs	r3, r2
 8003484:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800348c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8003490:	d106      	bne.n	80034a0 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003492:	4b1b      	ldr	r3, [pc, #108]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003494:	68db      	ldr	r3, [r3, #12]
 8003496:	4a1a      	ldr	r2, [pc, #104]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003498:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800349c:	60d3      	str	r3, [r2, #12]
 800349e:	e011      	b.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80034a4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80034a8:	d10c      	bne.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	3304      	adds	r3, #4
 80034ae:	2101      	movs	r1, #1
 80034b0:	4618      	mov	r0, r3
 80034b2:	f000 f899 	bl	80035e8 <RCCEx_PLLSAI1_Config>
 80034b6:	4603      	mov	r3, r0
 80034b8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80034ba:	7cfb      	ldrb	r3, [r7, #19]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d001      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 80034c0:	7cfb      	ldrb	r3, [r7, #19]
 80034c2:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d02b      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034d6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034de:	4908      	ldr	r1, [pc, #32]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034e0:	4313      	orrs	r3, r2
 80034e2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80034ea:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80034ee:	d109      	bne.n	8003504 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80034f0:	4b03      	ldr	r3, [pc, #12]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f2:	68db      	ldr	r3, [r3, #12]
 80034f4:	4a02      	ldr	r2, [pc, #8]	@ (8003500 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80034f6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80034fa:	60d3      	str	r3, [r2, #12]
 80034fc:	e014      	b.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80034fe:	bf00      	nop
 8003500:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003508:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800350c:	d10c      	bne.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	3304      	adds	r3, #4
 8003512:	2101      	movs	r1, #1
 8003514:	4618      	mov	r0, r3
 8003516:	f000 f867 	bl	80035e8 <RCCEx_PLLSAI1_Config>
 800351a:	4603      	mov	r3, r0
 800351c:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800351e:	7cfb      	ldrb	r3, [r7, #19]
 8003520:	2b00      	cmp	r3, #0
 8003522:	d001      	beq.n	8003528 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 8003524:	7cfb      	ldrb	r3, [r7, #19]
 8003526:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003530:	2b00      	cmp	r3, #0
 8003532:	d02f      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003534:	4b2b      	ldr	r3, [pc, #172]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003536:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800353a:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003542:	4928      	ldr	r1, [pc, #160]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8003544:	4313      	orrs	r3, r2
 8003546:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800354e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8003552:	d10d      	bne.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	3304      	adds	r3, #4
 8003558:	2102      	movs	r1, #2
 800355a:	4618      	mov	r0, r3
 800355c:	f000 f844 	bl	80035e8 <RCCEx_PLLSAI1_Config>
 8003560:	4603      	mov	r3, r0
 8003562:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003564:	7cfb      	ldrb	r3, [r7, #19]
 8003566:	2b00      	cmp	r3, #0
 8003568:	d014      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 800356a:	7cfb      	ldrb	r3, [r7, #19]
 800356c:	74bb      	strb	r3, [r7, #18]
 800356e:	e011      	b.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8003574:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003578:	d10c      	bne.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	3320      	adds	r3, #32
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f000 f925 	bl	80037d0 <RCCEx_PLLSAI2_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800358a:	7cfb      	ldrb	r3, [r7, #19]
 800358c:	2b00      	cmp	r3, #0
 800358e:	d001      	beq.n	8003594 <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8003590:	7cfb      	ldrb	r3, [r7, #19]
 8003592:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800359c:	2b00      	cmp	r3, #0
 800359e:	d00a      	beq.n	80035b6 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80035a0:	4b10      	ldr	r3, [pc, #64]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035a6:	f023 4280 	bic.w	r2, r3, #1073741824	@ 0x40000000
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80035ae:	490d      	ldr	r1, [pc, #52]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035b0:	4313      	orrs	r3, r2
 80035b2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035be:	2b00      	cmp	r3, #0
 80035c0:	d00b      	beq.n	80035da <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80035c2:	4b08      	ldr	r3, [pc, #32]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80035c8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80035d2:	4904      	ldr	r1, [pc, #16]	@ (80035e4 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80035d4:	4313      	orrs	r3, r2
 80035d6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80035da:	7cbb      	ldrb	r3, [r7, #18]
}
 80035dc:	4618      	mov	r0, r3
 80035de:	3718      	adds	r7, #24
 80035e0:	46bd      	mov	sp, r7
 80035e2:	bd80      	pop	{r7, pc}
 80035e4:	40021000 	.word	0x40021000

080035e8 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80035e8:	b580      	push	{r7, lr}
 80035ea:	b084      	sub	sp, #16
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
 80035f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80035f2:	2300      	movs	r3, #0
 80035f4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80035f6:	4b75      	ldr	r3, [pc, #468]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	f003 0303 	and.w	r3, r3, #3
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d018      	beq.n	8003634 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8003602:	4b72      	ldr	r3, [pc, #456]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003604:	68db      	ldr	r3, [r3, #12]
 8003606:	f003 0203 	and.w	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	429a      	cmp	r2, r3
 8003610:	d10d      	bne.n	800362e <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
       ||
 8003616:	2b00      	cmp	r3, #0
 8003618:	d009      	beq.n	800362e <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 800361a:	4b6c      	ldr	r3, [pc, #432]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800361c:	68db      	ldr	r3, [r3, #12]
 800361e:	091b      	lsrs	r3, r3, #4
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	1c5a      	adds	r2, r3, #1
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	685b      	ldr	r3, [r3, #4]
       ||
 800362a:	429a      	cmp	r2, r3
 800362c:	d047      	beq.n	80036be <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	73fb      	strb	r3, [r7, #15]
 8003632:	e044      	b.n	80036be <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d018      	beq.n	800366e <RCCEx_PLLSAI1_Config+0x86>
 800363c:	2b03      	cmp	r3, #3
 800363e:	d825      	bhi.n	800368c <RCCEx_PLLSAI1_Config+0xa4>
 8003640:	2b01      	cmp	r3, #1
 8003642:	d002      	beq.n	800364a <RCCEx_PLLSAI1_Config+0x62>
 8003644:	2b02      	cmp	r3, #2
 8003646:	d009      	beq.n	800365c <RCCEx_PLLSAI1_Config+0x74>
 8003648:	e020      	b.n	800368c <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 800364a:	4b60      	ldr	r3, [pc, #384]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0302 	and.w	r3, r3, #2
 8003652:	2b00      	cmp	r3, #0
 8003654:	d11d      	bne.n	8003692 <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800365a:	e01a      	b.n	8003692 <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 800365c:	4b5b      	ldr	r3, [pc, #364]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003664:	2b00      	cmp	r3, #0
 8003666:	d116      	bne.n	8003696 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 8003668:	2301      	movs	r3, #1
 800366a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800366c:	e013      	b.n	8003696 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 800366e:	4b57      	ldr	r3, [pc, #348]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003676:	2b00      	cmp	r3, #0
 8003678:	d10f      	bne.n	800369a <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800367a:	4b54      	ldr	r3, [pc, #336]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8003682:	2b00      	cmp	r3, #0
 8003684:	d109      	bne.n	800369a <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8003686:	2301      	movs	r3, #1
 8003688:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 800368a:	e006      	b.n	800369a <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 800368c:	2301      	movs	r3, #1
 800368e:	73fb      	strb	r3, [r7, #15]
      break;
 8003690:	e004      	b.n	800369c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003692:	bf00      	nop
 8003694:	e002      	b.n	800369c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8003696:	bf00      	nop
 8003698:	e000      	b.n	800369c <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800369a:	bf00      	nop
    }

    if(status == HAL_OK)
 800369c:	7bfb      	ldrb	r3, [r7, #15]
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d10d      	bne.n	80036be <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80036a2:	4b4a      	ldr	r3, [pc, #296]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6819      	ldr	r1, [r3, #0]
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	3b01      	subs	r3, #1
 80036b4:	011b      	lsls	r3, r3, #4
 80036b6:	430b      	orrs	r3, r1
 80036b8:	4944      	ldr	r1, [pc, #272]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80036be:	7bfb      	ldrb	r3, [r7, #15]
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d17d      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 80036c4:	4b41      	ldr	r3, [pc, #260]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a40      	ldr	r2, [pc, #256]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ca:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80036ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fd fca6 	bl	8001020 <HAL_GetTick>
 80036d4:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036d6:	e009      	b.n	80036ec <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80036d8:	f7fd fca2 	bl	8001020 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	68bb      	ldr	r3, [r7, #8]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b02      	cmp	r3, #2
 80036e4:	d902      	bls.n	80036ec <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	73fb      	strb	r3, [r7, #15]
        break;
 80036ea:	e005      	b.n	80036f8 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80036ec:	4b37      	ldr	r3, [pc, #220]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1ef      	bne.n	80036d8 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80036f8:	7bfb      	ldrb	r3, [r7, #15]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	d160      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80036fe:	683b      	ldr	r3, [r7, #0]
 8003700:	2b00      	cmp	r3, #0
 8003702:	d111      	bne.n	8003728 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003704:	4b31      	ldr	r3, [pc, #196]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003706:	691b      	ldr	r3, [r3, #16]
 8003708:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 800370c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003710:	687a      	ldr	r2, [r7, #4]
 8003712:	6892      	ldr	r2, [r2, #8]
 8003714:	0211      	lsls	r1, r2, #8
 8003716:	687a      	ldr	r2, [r7, #4]
 8003718:	68d2      	ldr	r2, [r2, #12]
 800371a:	0912      	lsrs	r2, r2, #4
 800371c:	0452      	lsls	r2, r2, #17
 800371e:	430a      	orrs	r2, r1
 8003720:	492a      	ldr	r1, [pc, #168]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003722:	4313      	orrs	r3, r2
 8003724:	610b      	str	r3, [r1, #16]
 8003726:	e027      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d112      	bne.n	8003754 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800372e:	4b27      	ldr	r3, [pc, #156]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003730:	691b      	ldr	r3, [r3, #16]
 8003732:	f423 03c0 	bic.w	r3, r3, #6291456	@ 0x600000
 8003736:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800373a:	687a      	ldr	r2, [r7, #4]
 800373c:	6892      	ldr	r2, [r2, #8]
 800373e:	0211      	lsls	r1, r2, #8
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	6912      	ldr	r2, [r2, #16]
 8003744:	0852      	lsrs	r2, r2, #1
 8003746:	3a01      	subs	r2, #1
 8003748:	0552      	lsls	r2, r2, #21
 800374a:	430a      	orrs	r2, r1
 800374c:	491f      	ldr	r1, [pc, #124]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800374e:	4313      	orrs	r3, r2
 8003750:	610b      	str	r3, [r1, #16]
 8003752:	e011      	b.n	8003778 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003754:	4b1d      	ldr	r3, [pc, #116]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003756:	691b      	ldr	r3, [r3, #16]
 8003758:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 800375c:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	6892      	ldr	r2, [r2, #8]
 8003764:	0211      	lsls	r1, r2, #8
 8003766:	687a      	ldr	r2, [r7, #4]
 8003768:	6952      	ldr	r2, [r2, #20]
 800376a:	0852      	lsrs	r2, r2, #1
 800376c:	3a01      	subs	r2, #1
 800376e:	0652      	lsls	r2, r2, #25
 8003770:	430a      	orrs	r2, r1
 8003772:	4916      	ldr	r1, [pc, #88]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 8003774:	4313      	orrs	r3, r2
 8003776:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003778:	4b14      	ldr	r3, [pc, #80]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	4a13      	ldr	r2, [pc, #76]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 800377e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003782:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003784:	f7fd fc4c 	bl	8001020 <HAL_GetTick>
 8003788:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800378a:	e009      	b.n	80037a0 <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800378c:	f7fd fc48 	bl	8001020 <HAL_GetTick>
 8003790:	4602      	mov	r2, r0
 8003792:	68bb      	ldr	r3, [r7, #8]
 8003794:	1ad3      	subs	r3, r2, r3
 8003796:	2b02      	cmp	r3, #2
 8003798:	d902      	bls.n	80037a0 <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 800379a:	2303      	movs	r3, #3
 800379c:	73fb      	strb	r3, [r7, #15]
          break;
 800379e:	e005      	b.n	80037ac <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80037a0:	4b0a      	ldr	r3, [pc, #40]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d0ef      	beq.n	800378c <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 80037ac:	7bfb      	ldrb	r3, [r7, #15]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d106      	bne.n	80037c0 <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80037b2:	4b06      	ldr	r3, [pc, #24]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037b4:	691a      	ldr	r2, [r3, #16]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	699b      	ldr	r3, [r3, #24]
 80037ba:	4904      	ldr	r1, [pc, #16]	@ (80037cc <RCCEx_PLLSAI1_Config+0x1e4>)
 80037bc:	4313      	orrs	r3, r2
 80037be:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 80037c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80037c2:	4618      	mov	r0, r3
 80037c4:	3710      	adds	r7, #16
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40021000 	.word	0x40021000

080037d0 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b084      	sub	sp, #16
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
 80037d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80037da:	2300      	movs	r3, #0
 80037dc:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80037de:	4b6a      	ldr	r3, [pc, #424]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	f003 0303 	and.w	r3, r3, #3
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d018      	beq.n	800381c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80037ea:	4b67      	ldr	r3, [pc, #412]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80037ec:	68db      	ldr	r3, [r3, #12]
 80037ee:	f003 0203 	and.w	r2, r3, #3
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	429a      	cmp	r2, r3
 80037f8:	d10d      	bne.n	8003816 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
       ||
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d009      	beq.n	8003816 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8003802:	4b61      	ldr	r3, [pc, #388]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	091b      	lsrs	r3, r3, #4
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
       ||
 8003812:	429a      	cmp	r2, r3
 8003814:	d047      	beq.n	80038a6 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8003816:	2301      	movs	r3, #1
 8003818:	73fb      	strb	r3, [r7, #15]
 800381a:	e044      	b.n	80038a6 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	2b03      	cmp	r3, #3
 8003822:	d018      	beq.n	8003856 <RCCEx_PLLSAI2_Config+0x86>
 8003824:	2b03      	cmp	r3, #3
 8003826:	d825      	bhi.n	8003874 <RCCEx_PLLSAI2_Config+0xa4>
 8003828:	2b01      	cmp	r3, #1
 800382a:	d002      	beq.n	8003832 <RCCEx_PLLSAI2_Config+0x62>
 800382c:	2b02      	cmp	r3, #2
 800382e:	d009      	beq.n	8003844 <RCCEx_PLLSAI2_Config+0x74>
 8003830:	e020      	b.n	8003874 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003832:	4b55      	ldr	r3, [pc, #340]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0302 	and.w	r3, r3, #2
 800383a:	2b00      	cmp	r3, #0
 800383c:	d11d      	bne.n	800387a <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 800383e:	2301      	movs	r3, #1
 8003840:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003842:	e01a      	b.n	800387a <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003844:	4b50      	ldr	r3, [pc, #320]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800384c:	2b00      	cmp	r3, #0
 800384e:	d116      	bne.n	800387e <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 8003850:	2301      	movs	r3, #1
 8003852:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003854:	e013      	b.n	800387e <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003856:	4b4c      	ldr	r3, [pc, #304]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d10f      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003862:	4b49      	ldr	r3, [pc, #292]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800386a:	2b00      	cmp	r3, #0
 800386c:	d109      	bne.n	8003882 <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 800386e:	2301      	movs	r3, #1
 8003870:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003872:	e006      	b.n	8003882 <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	73fb      	strb	r3, [r7, #15]
      break;
 8003878:	e004      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800387a:	bf00      	nop
 800387c:	e002      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 800387e:	bf00      	nop
 8003880:	e000      	b.n	8003884 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 8003882:	bf00      	nop
    }

    if(status == HAL_OK)
 8003884:	7bfb      	ldrb	r3, [r7, #15]
 8003886:	2b00      	cmp	r3, #0
 8003888:	d10d      	bne.n	80038a6 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800388a:	4b3f      	ldr	r3, [pc, #252]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 800388c:	68db      	ldr	r3, [r3, #12]
 800388e:	f023 0273 	bic.w	r2, r3, #115	@ 0x73
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6819      	ldr	r1, [r3, #0]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	685b      	ldr	r3, [r3, #4]
 800389a:	3b01      	subs	r3, #1
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	430b      	orrs	r3, r1
 80038a0:	4939      	ldr	r1, [pc, #228]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80038a6:	7bfb      	ldrb	r3, [r7, #15]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d167      	bne.n	800397c <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038ac:	4b36      	ldr	r3, [pc, #216]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	4a35      	ldr	r2, [pc, #212]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038b2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80038b6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038b8:	f7fd fbb2 	bl	8001020 <HAL_GetTick>
 80038bc:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038be:	e009      	b.n	80038d4 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038c0:	f7fd fbae 	bl	8001020 <HAL_GetTick>
 80038c4:	4602      	mov	r2, r0
 80038c6:	68bb      	ldr	r3, [r7, #8]
 80038c8:	1ad3      	subs	r3, r2, r3
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d902      	bls.n	80038d4 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	73fb      	strb	r3, [r7, #15]
        break;
 80038d2:	e005      	b.n	80038e0 <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038d4:	4b2c      	ldr	r3, [pc, #176]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d1ef      	bne.n	80038c0 <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 80038e0:	7bfb      	ldrb	r3, [r7, #15]
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d14a      	bne.n	800397c <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80038e6:	683b      	ldr	r3, [r7, #0]
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d111      	bne.n	8003910 <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80038ec:	4b26      	ldr	r3, [pc, #152]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 80038ee:	695b      	ldr	r3, [r3, #20]
 80038f0:	f423 331f 	bic.w	r3, r3, #162816	@ 0x27c00
 80038f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80038f8:	687a      	ldr	r2, [r7, #4]
 80038fa:	6892      	ldr	r2, [r2, #8]
 80038fc:	0211      	lsls	r1, r2, #8
 80038fe:	687a      	ldr	r2, [r7, #4]
 8003900:	68d2      	ldr	r2, [r2, #12]
 8003902:	0912      	lsrs	r2, r2, #4
 8003904:	0452      	lsls	r2, r2, #17
 8003906:	430a      	orrs	r2, r1
 8003908:	491f      	ldr	r1, [pc, #124]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 800390a:	4313      	orrs	r3, r2
 800390c:	614b      	str	r3, [r1, #20]
 800390e:	e011      	b.n	8003934 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003910:	4b1d      	ldr	r3, [pc, #116]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003912:	695b      	ldr	r3, [r3, #20]
 8003914:	f023 63c0 	bic.w	r3, r3, #100663296	@ 0x6000000
 8003918:	f423 43fe 	bic.w	r3, r3, #32512	@ 0x7f00
 800391c:	687a      	ldr	r2, [r7, #4]
 800391e:	6892      	ldr	r2, [r2, #8]
 8003920:	0211      	lsls	r1, r2, #8
 8003922:	687a      	ldr	r2, [r7, #4]
 8003924:	6912      	ldr	r2, [r2, #16]
 8003926:	0852      	lsrs	r2, r2, #1
 8003928:	3a01      	subs	r2, #1
 800392a:	0652      	lsls	r2, r2, #25
 800392c:	430a      	orrs	r2, r1
 800392e:	4916      	ldr	r1, [pc, #88]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003930:	4313      	orrs	r3, r2
 8003932:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003934:	4b14      	ldr	r3, [pc, #80]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	4a13      	ldr	r2, [pc, #76]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 800393a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800393e:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003940:	f7fd fb6e 	bl	8001020 <HAL_GetTick>
 8003944:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003946:	e009      	b.n	800395c <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003948:	f7fd fb6a 	bl	8001020 <HAL_GetTick>
 800394c:	4602      	mov	r2, r0
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	1ad3      	subs	r3, r2, r3
 8003952:	2b02      	cmp	r3, #2
 8003954:	d902      	bls.n	800395c <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 8003956:	2303      	movs	r3, #3
 8003958:	73fb      	strb	r3, [r7, #15]
          break;
 800395a:	e005      	b.n	8003968 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800395c:	4b0a      	ldr	r3, [pc, #40]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8003964:	2b00      	cmp	r3, #0
 8003966:	d0ef      	beq.n	8003948 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 8003968:	7bfb      	ldrb	r3, [r7, #15]
 800396a:	2b00      	cmp	r3, #0
 800396c:	d106      	bne.n	800397c <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 800396e:	4b06      	ldr	r3, [pc, #24]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003970:	695a      	ldr	r2, [r3, #20]
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	695b      	ldr	r3, [r3, #20]
 8003976:	4904      	ldr	r1, [pc, #16]	@ (8003988 <RCCEx_PLLSAI2_Config+0x1b8>)
 8003978:	4313      	orrs	r3, r2
 800397a:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 800397c:	7bfb      	ldrb	r3, [r7, #15]
}
 800397e:	4618      	mov	r0, r3
 8003980:	3710      	adds	r7, #16
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}
 8003986:	bf00      	nop
 8003988:	40021000 	.word	0x40021000

0800398c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b082      	sub	sp, #8
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d101      	bne.n	800399e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e040      	b.n	8003a20 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d106      	bne.n	80039b4 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	f7fd f97a 	bl	8000ca8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2224      	movs	r2, #36	@ 0x24
 80039b8:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f022 0201 	bic.w	r2, r2, #1
 80039c8:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039ce:	2b00      	cmp	r3, #0
 80039d0:	d002      	beq.n	80039d8 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fedc 	bl	8004790 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 fc21 	bl	8004220 <UART_SetConfig>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b01      	cmp	r3, #1
 80039e2:	d101      	bne.n	80039e8 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	e01b      	b.n	8003a20 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	685a      	ldr	r2, [r3, #4]
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80039f6:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	689a      	ldr	r2, [r3, #8]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003a06:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003a08:	687b      	ldr	r3, [r7, #4]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	681a      	ldr	r2, [r3, #0]
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	f042 0201 	orr.w	r2, r2, #1
 8003a16:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	f000 ff5b 	bl	80048d4 <UART_CheckIdleState>
 8003a1e:	4603      	mov	r3, r0
}
 8003a20:	4618      	mov	r0, r3
 8003a22:	3708      	adds	r7, #8
 8003a24:	46bd      	mov	sp, r7
 8003a26:	bd80      	pop	{r7, pc}

08003a28 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a28:	b580      	push	{r7, lr}
 8003a2a:	b08a      	sub	sp, #40	@ 0x28
 8003a2c:	af02      	add	r7, sp, #8
 8003a2e:	60f8      	str	r0, [r7, #12]
 8003a30:	60b9      	str	r1, [r7, #8]
 8003a32:	603b      	str	r3, [r7, #0]
 8003a34:	4613      	mov	r3, r2
 8003a36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003a3c:	2b20      	cmp	r3, #32
 8003a3e:	d177      	bne.n	8003b30 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a40:	68bb      	ldr	r3, [r7, #8]
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d002      	beq.n	8003a4c <HAL_UART_Transmit+0x24>
 8003a46:	88fb      	ldrh	r3, [r7, #6]
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d101      	bne.n	8003a50 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e070      	b.n	8003b32 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	2200      	movs	r2, #0
 8003a54:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2221      	movs	r2, #33	@ 0x21
 8003a5c:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003a5e:	f7fd fadf 	bl	8001020 <HAL_GetTick>
 8003a62:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	88fa      	ldrh	r2, [r7, #6]
 8003a68:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	88fa      	ldrh	r2, [r7, #6]
 8003a70:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003a7c:	d108      	bne.n	8003a90 <HAL_UART_Transmit+0x68>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	691b      	ldr	r3, [r3, #16]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d104      	bne.n	8003a90 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003a86:	2300      	movs	r3, #0
 8003a88:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003a8a:	68bb      	ldr	r3, [r7, #8]
 8003a8c:	61bb      	str	r3, [r7, #24]
 8003a8e:	e003      	b.n	8003a98 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003a94:	2300      	movs	r3, #0
 8003a96:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003a98:	e02f      	b.n	8003afa <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003a9a:	683b      	ldr	r3, [r7, #0]
 8003a9c:	9300      	str	r3, [sp, #0]
 8003a9e:	697b      	ldr	r3, [r7, #20]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	2180      	movs	r1, #128	@ 0x80
 8003aa4:	68f8      	ldr	r0, [r7, #12]
 8003aa6:	f000 ffbd 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d004      	beq.n	8003aba <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	2220      	movs	r2, #32
 8003ab4:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8003ab6:	2303      	movs	r3, #3
 8003ab8:	e03b      	b.n	8003b32 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d10b      	bne.n	8003ad8 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	881a      	ldrh	r2, [r3, #0]
 8003ac4:	68fb      	ldr	r3, [r7, #12]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003acc:	b292      	uxth	r2, r2
 8003ace:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8003ad0:	69bb      	ldr	r3, [r7, #24]
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	61bb      	str	r3, [r7, #24]
 8003ad6:	e007      	b.n	8003ae8 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003ad8:	69fb      	ldr	r3, [r7, #28]
 8003ada:	781a      	ldrb	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8003ae2:	69fb      	ldr	r3, [r7, #28]
 8003ae4:	3301      	adds	r3, #1
 8003ae6:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003aee:	b29b      	uxth	r3, r3
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8003b00:	b29b      	uxth	r3, r3
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d1c9      	bne.n	8003a9a <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003b06:	683b      	ldr	r3, [r7, #0]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	697b      	ldr	r3, [r7, #20]
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	2140      	movs	r1, #64	@ 0x40
 8003b10:	68f8      	ldr	r0, [r7, #12]
 8003b12:	f000 ff87 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8003b16:	4603      	mov	r3, r0
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d004      	beq.n	8003b26 <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	2220      	movs	r2, #32
 8003b20:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8003b22:	2303      	movs	r3, #3
 8003b24:	e005      	b.n	8003b32 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	2220      	movs	r2, #32
 8003b2a:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
 8003b2e:	e000      	b.n	8003b32 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8003b30:	2302      	movs	r3, #2
  }
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	3720      	adds	r7, #32
 8003b36:	46bd      	mov	sp, r7
 8003b38:	bd80      	pop	{r7, pc}
	...

08003b3c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b08a      	sub	sp, #40	@ 0x28
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	60f8      	str	r0, [r7, #12]
 8003b44:	60b9      	str	r1, [r7, #8]
 8003b46:	4613      	mov	r3, r2
 8003b48:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b50:	2b20      	cmp	r3, #32
 8003b52:	d137      	bne.n	8003bc4 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d002      	beq.n	8003b60 <HAL_UART_Receive_IT+0x24>
 8003b5a:	88fb      	ldrh	r3, [r7, #6]
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d101      	bne.n	8003b64 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	e030      	b.n	8003bc6 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	2200      	movs	r2, #0
 8003b68:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	4a18      	ldr	r2, [pc, #96]	@ (8003bd0 <HAL_UART_Receive_IT+0x94>)
 8003b70:	4293      	cmp	r3, r2
 8003b72:	d01f      	beq.n	8003bb4 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d018      	beq.n	8003bb4 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	e853 3f00 	ldrex	r3, [r3]
 8003b8e:	613b      	str	r3, [r7, #16]
   return(result);
 8003b90:	693b      	ldr	r3, [r7, #16]
 8003b92:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8003b96:	627b      	str	r3, [r7, #36]	@ 0x24
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	461a      	mov	r2, r3
 8003b9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ba4:	69f9      	ldr	r1, [r7, #28]
 8003ba6:	6a3a      	ldr	r2, [r7, #32]
 8003ba8:	e841 2300 	strex	r3, r2, [r1]
 8003bac:	61bb      	str	r3, [r7, #24]
   return(result);
 8003bae:	69bb      	ldr	r3, [r7, #24]
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d1e6      	bne.n	8003b82 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003bb4:	88fb      	ldrh	r3, [r7, #6]
 8003bb6:	461a      	mov	r2, r3
 8003bb8:	68b9      	ldr	r1, [r7, #8]
 8003bba:	68f8      	ldr	r0, [r7, #12]
 8003bbc:	f000 ffa0 	bl	8004b00 <UART_Start_Receive_IT>
 8003bc0:	4603      	mov	r3, r0
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003bc4:	2302      	movs	r3, #2
  }
}
 8003bc6:	4618      	mov	r0, r3
 8003bc8:	3728      	adds	r7, #40	@ 0x28
 8003bca:	46bd      	mov	sp, r7
 8003bcc:	bd80      	pop	{r7, pc}
 8003bce:	bf00      	nop
 8003bd0:	40008000 	.word	0x40008000

08003bd4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b0ba      	sub	sp, #232	@ 0xe8
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	69db      	ldr	r3, [r3, #28]
 8003be2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	681b      	ldr	r3, [r3, #0]
 8003bf4:	689b      	ldr	r3, [r3, #8]
 8003bf6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8003bfa:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8003bfe:	f640 030f 	movw	r3, #2063	@ 0x80f
 8003c02:	4013      	ands	r3, r2
 8003c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8003c08:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	d115      	bne.n	8003c3c <HAL_UART_IRQHandler+0x68>
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8003c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c14:	f003 0320 	and.w	r3, r3, #32
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d00f      	beq.n	8003c3c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c20:	f003 0320 	and.w	r3, r3, #32
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d009      	beq.n	8003c3c <HAL_UART_IRQHandler+0x68>
#endif /* USART_CR1_FIFOEN */
    {
      if (huart->RxISR != NULL)
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	f000 82ca 	beq.w	80041c6 <HAL_UART_IRQHandler+0x5f2>
      {
        huart->RxISR(huart);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003c36:	6878      	ldr	r0, [r7, #4]
 8003c38:	4798      	blx	r3
      }
      return;
 8003c3a:	e2c4      	b.n	80041c6 <HAL_UART_IRQHandler+0x5f2>
#if defined(USART_CR1_FIFOEN)
  if ((errorflags != 0U)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
#else
  if ((errorflags != 0U)
 8003c3c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8117 	beq.w	8003e74 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8003c46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003c4a:	f003 0301 	and.w	r3, r3, #1
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d106      	bne.n	8003c60 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8003c52:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8003c56:	4b85      	ldr	r3, [pc, #532]	@ (8003e6c <HAL_UART_IRQHandler+0x298>)
 8003c58:	4013      	ands	r3, r2
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	f000 810a 	beq.w	8003e74 <HAL_UART_IRQHandler+0x2a0>
#endif /* USART_CR1_FIFOEN */
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8003c60:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c64:	f003 0301 	and.w	r3, r3, #1
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d011      	beq.n	8003c90 <HAL_UART_IRQHandler+0xbc>
 8003c6c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003c70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d00b      	beq.n	8003c90 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003c86:	f043 0201 	orr.w	r2, r3, #1
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003c90:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d011      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xec>
 8003c9c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ca0:	f003 0301 	and.w	r3, r3, #1
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d00b      	beq.n	8003cc0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	2202      	movs	r2, #2
 8003cae:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003cb6:	f043 0204 	orr.w	r2, r3, #4
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8003cc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cc4:	f003 0304 	and.w	r3, r3, #4
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d011      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x11c>
 8003ccc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003cd0:	f003 0301 	and.w	r3, r3, #1
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d00b      	beq.n	8003cf0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	2204      	movs	r2, #4
 8003cde:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003ce6:	f043 0202 	orr.w	r2, r3, #2
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(USART_CR1_FIFOEN)
    if (((isrflags & USART_ISR_ORE) != 0U)
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
#else
    if (((isrflags & USART_ISR_ORE) != 0U)
 8003cf0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003cf4:	f003 0308 	and.w	r3, r3, #8
 8003cf8:	2b00      	cmp	r3, #0
 8003cfa:	d017      	beq.n	8003d2c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003cfc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d00:	f003 0320 	and.w	r3, r3, #32
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d105      	bne.n	8003d14 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8003d08:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003d0c:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d00b      	beq.n	8003d2c <HAL_UART_IRQHandler+0x158>
#endif /* USART_CR1_FIFOEN */
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	2208      	movs	r2, #8
 8003d1a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d22:	f043 0208 	orr.w	r2, r3, #8
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8003d2c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d30:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d012      	beq.n	8003d5e <HAL_UART_IRQHandler+0x18a>
 8003d38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d3c:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8003d40:	2b00      	cmp	r3, #0
 8003d42:	d00c      	beq.n	8003d5e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003d4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d54:	f043 0220 	orr.w	r2, r3, #32
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	f000 8230 	beq.w	80041ca <HAL_UART_IRQHandler+0x5f6>
#if defined(USART_CR1_FIFOEN)
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
#else
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8003d6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003d6e:	f003 0320 	and.w	r3, r3, #32
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d00d      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8003d76:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003d7a:	f003 0320 	and.w	r3, r3, #32
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d007      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1be>
#endif /* USART_CR1_FIFOEN */
      {
        if (huart->RxISR != NULL)
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d003      	beq.n	8003d92 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8003d8e:	6878      	ldr	r0, [r7, #4]
 8003d90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003d98:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003da6:	2b40      	cmp	r3, #64	@ 0x40
 8003da8:	d005      	beq.n	8003db6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8003daa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003dae:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d04f      	beq.n	8003e56 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 ff68 	bl	8004c8c <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	689b      	ldr	r3, [r3, #8]
 8003dc2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc6:	2b40      	cmp	r3, #64	@ 0x40
 8003dc8:	d141      	bne.n	8003e4e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	3308      	adds	r3, #8
 8003dd0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003dd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003dd8:	e853 3f00 	ldrex	r3, [r3]
 8003ddc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003de0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003de4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003de8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	3308      	adds	r3, #8
 8003df2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003df6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003dfa:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003e02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003e0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d1d9      	bne.n	8003dca <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d013      	beq.n	8003e46 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e22:	4a13      	ldr	r2, [pc, #76]	@ (8003e70 <HAL_UART_IRQHandler+0x29c>)
 8003e24:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f7fd fa53 	bl	80012d6 <HAL_DMA_Abort_IT>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d017      	beq.n	8003e66 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8003e40:	4610      	mov	r0, r2
 8003e42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e44:	e00f      	b.n	8003e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003e46:	6878      	ldr	r0, [r7, #4]
 8003e48:	f000 f9d4 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e4c:	e00b      	b.n	8003e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9d0 	bl	80041f4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e54:	e007      	b.n	8003e66 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003e56:	6878      	ldr	r0, [r7, #4]
 8003e58:	f000 f9cc 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2200      	movs	r2, #0
 8003e60:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
      }
    }
    return;
 8003e64:	e1b1      	b.n	80041ca <HAL_UART_IRQHandler+0x5f6>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003e66:	bf00      	nop
    return;
 8003e68:	e1af      	b.n	80041ca <HAL_UART_IRQHandler+0x5f6>
 8003e6a:	bf00      	nop
 8003e6c:	04000120 	.word	0x04000120
 8003e70:	08004d55 	.word	0x08004d55

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003e78:	2b01      	cmp	r3, #1
 8003e7a:	f040 816a 	bne.w	8004152 <HAL_UART_IRQHandler+0x57e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8003e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003e82:	f003 0310 	and.w	r3, r3, #16
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	f000 8163 	beq.w	8004152 <HAL_UART_IRQHandler+0x57e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8003e8c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003e90:	f003 0310 	and.w	r3, r3, #16
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	f000 815c 	beq.w	8004152 <HAL_UART_IRQHandler+0x57e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2210      	movs	r2, #16
 8003ea0:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	689b      	ldr	r3, [r3, #8]
 8003ea8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003eac:	2b40      	cmp	r3, #64	@ 0x40
 8003eae:	f040 80d4 	bne.w	800405a <HAL_UART_IRQHandler+0x486>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	685b      	ldr	r3, [r3, #4]
 8003eba:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ebe:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	f000 80ad 	beq.w	8004022 <HAL_UART_IRQHandler+0x44e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8003ece:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ed2:	429a      	cmp	r2, r3
 8003ed4:	f080 80a5 	bcs.w	8004022 <HAL_UART_IRQHandler+0x44e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003ede:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 0320 	and.w	r3, r3, #32
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	f040 8086 	bne.w	8004000 <HAL_UART_IRQHandler+0x42c>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003efc:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003f00:	e853 3f00 	ldrex	r3, [r3]
 8003f04:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003f08:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f10:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	461a      	mov	r2, r3
 8003f1a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8003f1e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8003f22:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f26:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003f2a:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003f2e:	e841 2300 	strex	r3, r2, [r1]
 8003f32:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003f36:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d1da      	bne.n	8003ef4 <HAL_UART_IRQHandler+0x320>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	3308      	adds	r3, #8
 8003f44:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003f48:	e853 3f00 	ldrex	r3, [r3]
 8003f4c:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003f4e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003f50:	f023 0301 	bic.w	r3, r3, #1
 8003f54:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	3308      	adds	r3, #8
 8003f5e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003f62:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003f66:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f68:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003f6a:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003f6e:	e841 2300 	strex	r3, r2, [r1]
 8003f72:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003f74:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d1e1      	bne.n	8003f3e <HAL_UART_IRQHandler+0x36a>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	3308      	adds	r3, #8
 8003f80:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003f82:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003f84:	e853 3f00 	ldrex	r3, [r3]
 8003f88:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003f8a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003f8c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003f90:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	3308      	adds	r3, #8
 8003f9a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003f9e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003fa0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fa2:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003fa4:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003fa6:	e841 2300 	strex	r3, r2, [r1]
 8003faa:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003fac:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003fae:	2b00      	cmp	r3, #0
 8003fb0:	d1e3      	bne.n	8003f7a <HAL_UART_IRQHandler+0x3a6>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2220      	movs	r2, #32
 8003fb6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	2200      	movs	r2, #0
 8003fbe:	661a      	str	r2, [r3, #96]	@ 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fc6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003fc8:	e853 3f00 	ldrex	r3, [r3]
 8003fcc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003fce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003fd0:	f023 0310 	bic.w	r3, r3, #16
 8003fd4:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	461a      	mov	r2, r3
 8003fde:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8003fe2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8003fe4:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003fe6:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003fe8:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003fea:	e841 2300 	strex	r3, r2, [r1]
 8003fee:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003ff0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d1e4      	bne.n	8003fc0 <HAL_UART_IRQHandler+0x3ec>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	f7fd f92d 	bl	800125a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	2202      	movs	r2, #2
 8004004:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004012:	b29b      	uxth	r3, r3
 8004014:	1ad3      	subs	r3, r2, r3
 8004016:	b29b      	uxth	r3, r3
 8004018:	4619      	mov	r1, r3
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f8f4 	bl	8004208 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004020:	e0d5      	b.n	80041ce <HAL_UART_IRQHandler+0x5fa>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004028:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800402c:	429a      	cmp	r2, r3
 800402e:	f040 80ce 	bne.w	80041ce <HAL_UART_IRQHandler+0x5fa>
          if (HAL_IS_BIT_SET(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0320 	and.w	r3, r3, #32
 800403e:	2b20      	cmp	r3, #32
 8004040:	f040 80c5 	bne.w	80041ce <HAL_UART_IRQHandler+0x5fa>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2202      	movs	r2, #2
 8004048:	665a      	str	r2, [r3, #100]	@ 0x64
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004050:	4619      	mov	r1, r3
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 f8d8 	bl	8004208 <HAL_UARTEx_RxEventCallback>
      return;
 8004058:	e0b9      	b.n	80041ce <HAL_UART_IRQHandler+0x5fa>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	@ 0x58
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004066:	b29b      	uxth	r3, r3
 8004068:	1ad3      	subs	r3, r2, r3
 800406a:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004074:	b29b      	uxth	r3, r3
 8004076:	2b00      	cmp	r3, #0
 8004078:	f000 80ab 	beq.w	80041d2 <HAL_UART_IRQHandler+0x5fe>
          && (nb_rx_data > 0U))
 800407c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004080:	2b00      	cmp	r3, #0
 8004082:	f000 80a6 	beq.w	80041d2 <HAL_UART_IRQHandler+0x5fe>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800408c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800408e:	e853 3f00 	ldrex	r3, [r3]
 8004092:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004094:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004096:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800409a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	461a      	mov	r2, r3
 80040a4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80040a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80040aa:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040ac:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80040ae:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80040b0:	e841 2300 	strex	r3, r2, [r1]
 80040b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80040b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80040b8:	2b00      	cmp	r3, #0
 80040ba:	d1e4      	bne.n	8004086 <HAL_UART_IRQHandler+0x4b2>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	3308      	adds	r3, #8
 80040c2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040c6:	e853 3f00 	ldrex	r3, [r3]
 80040ca:	623b      	str	r3, [r7, #32]
   return(result);
 80040cc:	6a3b      	ldr	r3, [r7, #32]
 80040ce:	f023 0301 	bic.w	r3, r3, #1
 80040d2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	3308      	adds	r3, #8
 80040dc:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80040e0:	633a      	str	r2, [r7, #48]	@ 0x30
 80040e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80040e4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80040e6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80040e8:	e841 2300 	strex	r3, r2, [r1]
 80040ec:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80040ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d1e3      	bne.n	80040bc <HAL_UART_IRQHandler+0x4e8>
#endif /* USART_CR1_FIFOEN */

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2220      	movs	r2, #32
 80040f8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2200      	movs	r2, #0
 8004100:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2200      	movs	r2, #0
 8004106:	669a      	str	r2, [r3, #104]	@ 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	e853 3f00 	ldrex	r3, [r3]
 8004114:	60fb      	str	r3, [r7, #12]
   return(result);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f023 0310 	bic.w	r3, r3, #16
 800411c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	461a      	mov	r2, r3
 8004126:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800412a:	61fb      	str	r3, [r7, #28]
 800412c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800412e:	69b9      	ldr	r1, [r7, #24]
 8004130:	69fa      	ldr	r2, [r7, #28]
 8004132:	e841 2300 	strex	r3, r2, [r1]
 8004136:	617b      	str	r3, [r7, #20]
   return(result);
 8004138:	697b      	ldr	r3, [r7, #20]
 800413a:	2b00      	cmp	r3, #0
 800413c:	d1e4      	bne.n	8004108 <HAL_UART_IRQHandler+0x534>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	2202      	movs	r2, #2
 8004142:	665a      	str	r2, [r3, #100]	@ 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004144:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004148:	4619      	mov	r1, r3
 800414a:	6878      	ldr	r0, [r7, #4]
 800414c:	f000 f85c 	bl	8004208 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8004150:	e03f      	b.n	80041d2 <HAL_UART_IRQHandler+0x5fe>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8004152:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004156:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800415a:	2b00      	cmp	r3, #0
 800415c:	d00e      	beq.n	800417c <HAL_UART_IRQHandler+0x5a8>
 800415e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004162:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004166:	2b00      	cmp	r3, #0
 8004168:	d008      	beq.n	800417c <HAL_UART_IRQHandler+0x5a8>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8004172:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	f000 ffe9 	bl	800514c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800417a:	e02d      	b.n	80041d8 <HAL_UART_IRQHandler+0x604>
#if defined(USART_CR1_FIFOEN)
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
#else
  if (((isrflags & USART_ISR_TXE) != 0U)
 800417c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004180:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004184:	2b00      	cmp	r3, #0
 8004186:	d00e      	beq.n	80041a6 <HAL_UART_IRQHandler+0x5d2>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8004188:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800418c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004190:	2b00      	cmp	r3, #0
 8004192:	d008      	beq.n	80041a6 <HAL_UART_IRQHandler+0x5d2>
#endif /* USART_CR1_FIFOEN */
  {
    if (huart->TxISR != NULL)
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8004198:	2b00      	cmp	r3, #0
 800419a:	d01c      	beq.n	80041d6 <HAL_UART_IRQHandler+0x602>
    {
      huart->TxISR(huart);
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80041a0:	6878      	ldr	r0, [r7, #4]
 80041a2:	4798      	blx	r3
    }
    return;
 80041a4:	e017      	b.n	80041d6 <HAL_UART_IRQHandler+0x602>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80041a6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80041aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d012      	beq.n	80041d8 <HAL_UART_IRQHandler+0x604>
 80041b2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80041b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d00c      	beq.n	80041d8 <HAL_UART_IRQHandler+0x604>
  {
    UART_EndTransmit_IT(huart);
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	f000 fdde 	bl	8004d80 <UART_EndTransmit_IT>
    return;
 80041c4:	e008      	b.n	80041d8 <HAL_UART_IRQHandler+0x604>
      return;
 80041c6:	bf00      	nop
 80041c8:	e006      	b.n	80041d8 <HAL_UART_IRQHandler+0x604>
    return;
 80041ca:	bf00      	nop
 80041cc:	e004      	b.n	80041d8 <HAL_UART_IRQHandler+0x604>
      return;
 80041ce:	bf00      	nop
 80041d0:	e002      	b.n	80041d8 <HAL_UART_IRQHandler+0x604>
      return;
 80041d2:	bf00      	nop
 80041d4:	e000      	b.n	80041d8 <HAL_UART_IRQHandler+0x604>
    return;
 80041d6:	bf00      	nop
    HAL_UARTEx_RxFifoFullCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
  }
#endif /* USART_CR1_FIFOEN */
}
 80041d8:	37e8      	adds	r7, #232	@ 0xe8
 80041da:	46bd      	mov	sp, r7
 80041dc:	bd80      	pop	{r7, pc}
 80041de:	bf00      	nop

080041e0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	460b      	mov	r3, r1
 8004212:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004214:	bf00      	nop
 8004216:	370c      	adds	r7, #12
 8004218:	46bd      	mov	sp, r7
 800421a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421e:	4770      	bx	lr

08004220 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004220:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004224:	b08a      	sub	sp, #40	@ 0x28
 8004226:	af00      	add	r7, sp, #0
 8004228:	60f8      	str	r0, [r7, #12]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800422a:	2300      	movs	r3, #0
 800422c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	689a      	ldr	r2, [r3, #8]
 8004234:	68fb      	ldr	r3, [r7, #12]
 8004236:	691b      	ldr	r3, [r3, #16]
 8004238:	431a      	orrs	r2, r3
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	695b      	ldr	r3, [r3, #20]
 800423e:	431a      	orrs	r2, r3
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	69db      	ldr	r3, [r3, #28]
 8004244:	4313      	orrs	r3, r2
 8004246:	627b      	str	r3, [r7, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	681a      	ldr	r2, [r3, #0]
 800424e:	4ba4      	ldr	r3, [pc, #656]	@ (80044e0 <UART_SetConfig+0x2c0>)
 8004250:	4013      	ands	r3, r2
 8004252:	68fa      	ldr	r2, [r7, #12]
 8004254:	6812      	ldr	r2, [r2, #0]
 8004256:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004258:	430b      	orrs	r3, r1
 800425a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	685b      	ldr	r3, [r3, #4]
 8004262:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	68da      	ldr	r2, [r3, #12]
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	430a      	orrs	r2, r1
 8004270:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	699b      	ldr	r3, [r3, #24]
 8004276:	627b      	str	r3, [r7, #36]	@ 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a99      	ldr	r2, [pc, #612]	@ (80044e4 <UART_SetConfig+0x2c4>)
 800427e:	4293      	cmp	r3, r2
 8004280:	d004      	beq.n	800428c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a1b      	ldr	r3, [r3, #32]
 8004286:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004288:	4313      	orrs	r3, r2
 800428a:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800429c:	430a      	orrs	r2, r1
 800429e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	4a90      	ldr	r2, [pc, #576]	@ (80044e8 <UART_SetConfig+0x2c8>)
 80042a6:	4293      	cmp	r3, r2
 80042a8:	d126      	bne.n	80042f8 <UART_SetConfig+0xd8>
 80042aa:	4b90      	ldr	r3, [pc, #576]	@ (80044ec <UART_SetConfig+0x2cc>)
 80042ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042b0:	f003 0303 	and.w	r3, r3, #3
 80042b4:	2b03      	cmp	r3, #3
 80042b6:	d81b      	bhi.n	80042f0 <UART_SetConfig+0xd0>
 80042b8:	a201      	add	r2, pc, #4	@ (adr r2, 80042c0 <UART_SetConfig+0xa0>)
 80042ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042be:	bf00      	nop
 80042c0:	080042d1 	.word	0x080042d1
 80042c4:	080042e1 	.word	0x080042e1
 80042c8:	080042d9 	.word	0x080042d9
 80042cc:	080042e9 	.word	0x080042e9
 80042d0:	2301      	movs	r3, #1
 80042d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042d6:	e116      	b.n	8004506 <UART_SetConfig+0x2e6>
 80042d8:	2302      	movs	r3, #2
 80042da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042de:	e112      	b.n	8004506 <UART_SetConfig+0x2e6>
 80042e0:	2304      	movs	r3, #4
 80042e2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042e6:	e10e      	b.n	8004506 <UART_SetConfig+0x2e6>
 80042e8:	2308      	movs	r3, #8
 80042ea:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042ee:	e10a      	b.n	8004506 <UART_SetConfig+0x2e6>
 80042f0:	2310      	movs	r3, #16
 80042f2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80042f6:	e106      	b.n	8004506 <UART_SetConfig+0x2e6>
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a7c      	ldr	r2, [pc, #496]	@ (80044f0 <UART_SetConfig+0x2d0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d138      	bne.n	8004374 <UART_SetConfig+0x154>
 8004302:	4b7a      	ldr	r3, [pc, #488]	@ (80044ec <UART_SetConfig+0x2cc>)
 8004304:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004308:	f003 030c 	and.w	r3, r3, #12
 800430c:	2b0c      	cmp	r3, #12
 800430e:	d82d      	bhi.n	800436c <UART_SetConfig+0x14c>
 8004310:	a201      	add	r2, pc, #4	@ (adr r2, 8004318 <UART_SetConfig+0xf8>)
 8004312:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004316:	bf00      	nop
 8004318:	0800434d 	.word	0x0800434d
 800431c:	0800436d 	.word	0x0800436d
 8004320:	0800436d 	.word	0x0800436d
 8004324:	0800436d 	.word	0x0800436d
 8004328:	0800435d 	.word	0x0800435d
 800432c:	0800436d 	.word	0x0800436d
 8004330:	0800436d 	.word	0x0800436d
 8004334:	0800436d 	.word	0x0800436d
 8004338:	08004355 	.word	0x08004355
 800433c:	0800436d 	.word	0x0800436d
 8004340:	0800436d 	.word	0x0800436d
 8004344:	0800436d 	.word	0x0800436d
 8004348:	08004365 	.word	0x08004365
 800434c:	2300      	movs	r3, #0
 800434e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004352:	e0d8      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004354:	2302      	movs	r3, #2
 8004356:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800435a:	e0d4      	b.n	8004506 <UART_SetConfig+0x2e6>
 800435c:	2304      	movs	r3, #4
 800435e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004362:	e0d0      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004364:	2308      	movs	r3, #8
 8004366:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800436a:	e0cc      	b.n	8004506 <UART_SetConfig+0x2e6>
 800436c:	2310      	movs	r3, #16
 800436e:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004372:	e0c8      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	4a5e      	ldr	r2, [pc, #376]	@ (80044f4 <UART_SetConfig+0x2d4>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d125      	bne.n	80043ca <UART_SetConfig+0x1aa>
 800437e:	4b5b      	ldr	r3, [pc, #364]	@ (80044ec <UART_SetConfig+0x2cc>)
 8004380:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004384:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8004388:	2b30      	cmp	r3, #48	@ 0x30
 800438a:	d016      	beq.n	80043ba <UART_SetConfig+0x19a>
 800438c:	2b30      	cmp	r3, #48	@ 0x30
 800438e:	d818      	bhi.n	80043c2 <UART_SetConfig+0x1a2>
 8004390:	2b20      	cmp	r3, #32
 8004392:	d00a      	beq.n	80043aa <UART_SetConfig+0x18a>
 8004394:	2b20      	cmp	r3, #32
 8004396:	d814      	bhi.n	80043c2 <UART_SetConfig+0x1a2>
 8004398:	2b00      	cmp	r3, #0
 800439a:	d002      	beq.n	80043a2 <UART_SetConfig+0x182>
 800439c:	2b10      	cmp	r3, #16
 800439e:	d008      	beq.n	80043b2 <UART_SetConfig+0x192>
 80043a0:	e00f      	b.n	80043c2 <UART_SetConfig+0x1a2>
 80043a2:	2300      	movs	r3, #0
 80043a4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043a8:	e0ad      	b.n	8004506 <UART_SetConfig+0x2e6>
 80043aa:	2302      	movs	r3, #2
 80043ac:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b0:	e0a9      	b.n	8004506 <UART_SetConfig+0x2e6>
 80043b2:	2304      	movs	r3, #4
 80043b4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043b8:	e0a5      	b.n	8004506 <UART_SetConfig+0x2e6>
 80043ba:	2308      	movs	r3, #8
 80043bc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c0:	e0a1      	b.n	8004506 <UART_SetConfig+0x2e6>
 80043c2:	2310      	movs	r3, #16
 80043c4:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043c8:	e09d      	b.n	8004506 <UART_SetConfig+0x2e6>
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	4a4a      	ldr	r2, [pc, #296]	@ (80044f8 <UART_SetConfig+0x2d8>)
 80043d0:	4293      	cmp	r3, r2
 80043d2:	d125      	bne.n	8004420 <UART_SetConfig+0x200>
 80043d4:	4b45      	ldr	r3, [pc, #276]	@ (80044ec <UART_SetConfig+0x2cc>)
 80043d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80043da:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80043de:	2bc0      	cmp	r3, #192	@ 0xc0
 80043e0:	d016      	beq.n	8004410 <UART_SetConfig+0x1f0>
 80043e2:	2bc0      	cmp	r3, #192	@ 0xc0
 80043e4:	d818      	bhi.n	8004418 <UART_SetConfig+0x1f8>
 80043e6:	2b80      	cmp	r3, #128	@ 0x80
 80043e8:	d00a      	beq.n	8004400 <UART_SetConfig+0x1e0>
 80043ea:	2b80      	cmp	r3, #128	@ 0x80
 80043ec:	d814      	bhi.n	8004418 <UART_SetConfig+0x1f8>
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d002      	beq.n	80043f8 <UART_SetConfig+0x1d8>
 80043f2:	2b40      	cmp	r3, #64	@ 0x40
 80043f4:	d008      	beq.n	8004408 <UART_SetConfig+0x1e8>
 80043f6:	e00f      	b.n	8004418 <UART_SetConfig+0x1f8>
 80043f8:	2300      	movs	r3, #0
 80043fa:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80043fe:	e082      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004400:	2302      	movs	r3, #2
 8004402:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004406:	e07e      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004408:	2304      	movs	r3, #4
 800440a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800440e:	e07a      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004410:	2308      	movs	r3, #8
 8004412:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004416:	e076      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004418:	2310      	movs	r3, #16
 800441a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800441e:	e072      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	4a35      	ldr	r2, [pc, #212]	@ (80044fc <UART_SetConfig+0x2dc>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d12a      	bne.n	8004480 <UART_SetConfig+0x260>
 800442a:	4b30      	ldr	r3, [pc, #192]	@ (80044ec <UART_SetConfig+0x2cc>)
 800442c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004430:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004434:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004438:	d01a      	beq.n	8004470 <UART_SetConfig+0x250>
 800443a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800443e:	d81b      	bhi.n	8004478 <UART_SetConfig+0x258>
 8004440:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004444:	d00c      	beq.n	8004460 <UART_SetConfig+0x240>
 8004446:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800444a:	d815      	bhi.n	8004478 <UART_SetConfig+0x258>
 800444c:	2b00      	cmp	r3, #0
 800444e:	d003      	beq.n	8004458 <UART_SetConfig+0x238>
 8004450:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004454:	d008      	beq.n	8004468 <UART_SetConfig+0x248>
 8004456:	e00f      	b.n	8004478 <UART_SetConfig+0x258>
 8004458:	2300      	movs	r3, #0
 800445a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800445e:	e052      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004460:	2302      	movs	r3, #2
 8004462:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004466:	e04e      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004468:	2304      	movs	r3, #4
 800446a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800446e:	e04a      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004470:	2308      	movs	r3, #8
 8004472:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 8004476:	e046      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004478:	2310      	movs	r3, #16
 800447a:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 800447e:	e042      	b.n	8004506 <UART_SetConfig+0x2e6>
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a17      	ldr	r2, [pc, #92]	@ (80044e4 <UART_SetConfig+0x2c4>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d13a      	bne.n	8004500 <UART_SetConfig+0x2e0>
 800448a:	4b18      	ldr	r3, [pc, #96]	@ (80044ec <UART_SetConfig+0x2cc>)
 800448c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004490:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8004494:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004498:	d01a      	beq.n	80044d0 <UART_SetConfig+0x2b0>
 800449a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800449e:	d81b      	bhi.n	80044d8 <UART_SetConfig+0x2b8>
 80044a0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044a4:	d00c      	beq.n	80044c0 <UART_SetConfig+0x2a0>
 80044a6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80044aa:	d815      	bhi.n	80044d8 <UART_SetConfig+0x2b8>
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d003      	beq.n	80044b8 <UART_SetConfig+0x298>
 80044b0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80044b4:	d008      	beq.n	80044c8 <UART_SetConfig+0x2a8>
 80044b6:	e00f      	b.n	80044d8 <UART_SetConfig+0x2b8>
 80044b8:	2300      	movs	r3, #0
 80044ba:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044be:	e022      	b.n	8004506 <UART_SetConfig+0x2e6>
 80044c0:	2302      	movs	r3, #2
 80044c2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044c6:	e01e      	b.n	8004506 <UART_SetConfig+0x2e6>
 80044c8:	2304      	movs	r3, #4
 80044ca:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044ce:	e01a      	b.n	8004506 <UART_SetConfig+0x2e6>
 80044d0:	2308      	movs	r3, #8
 80044d2:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044d6:	e016      	b.n	8004506 <UART_SetConfig+0x2e6>
 80044d8:	2310      	movs	r3, #16
 80044da:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
 80044de:	e012      	b.n	8004506 <UART_SetConfig+0x2e6>
 80044e0:	efff69f3 	.word	0xefff69f3
 80044e4:	40008000 	.word	0x40008000
 80044e8:	40013800 	.word	0x40013800
 80044ec:	40021000 	.word	0x40021000
 80044f0:	40004400 	.word	0x40004400
 80044f4:	40004800 	.word	0x40004800
 80044f8:	40004c00 	.word	0x40004c00
 80044fc:	40005000 	.word	0x40005000
 8004500:	2310      	movs	r3, #16
 8004502:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004506:	68fb      	ldr	r3, [r7, #12]
 8004508:	681b      	ldr	r3, [r3, #0]
 800450a:	4a9f      	ldr	r2, [pc, #636]	@ (8004788 <UART_SetConfig+0x568>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d17a      	bne.n	8004606 <UART_SetConfig+0x3e6>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004510:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004514:	2b08      	cmp	r3, #8
 8004516:	d824      	bhi.n	8004562 <UART_SetConfig+0x342>
 8004518:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <UART_SetConfig+0x300>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	08004545 	.word	0x08004545
 8004524:	08004563 	.word	0x08004563
 8004528:	0800454d 	.word	0x0800454d
 800452c:	08004563 	.word	0x08004563
 8004530:	08004553 	.word	0x08004553
 8004534:	08004563 	.word	0x08004563
 8004538:	08004563 	.word	0x08004563
 800453c:	08004563 	.word	0x08004563
 8004540:	0800455b 	.word	0x0800455b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004544:	f7fe fcda 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8004548:	61f8      	str	r0, [r7, #28]
        break;
 800454a:	e010      	b.n	800456e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800454c:	4b8f      	ldr	r3, [pc, #572]	@ (800478c <UART_SetConfig+0x56c>)
 800454e:	61fb      	str	r3, [r7, #28]
        break;
 8004550:	e00d      	b.n	800456e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004552:	f7fe fc3b 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 8004556:	61f8      	str	r0, [r7, #28]
        break;
 8004558:	e009      	b.n	800456e <UART_SetConfig+0x34e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800455a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800455e:	61fb      	str	r3, [r7, #28]
        break;
 8004560:	e005      	b.n	800456e <UART_SetConfig+0x34e>
      default:
        pclk = 0U;
 8004562:	2300      	movs	r3, #0
 8004564:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 800456c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 80fb 	beq.w	800476c <UART_SetConfig+0x54c>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	685a      	ldr	r2, [r3, #4]
 800457a:	4613      	mov	r3, r2
 800457c:	005b      	lsls	r3, r3, #1
 800457e:	4413      	add	r3, r2
 8004580:	69fa      	ldr	r2, [r7, #28]
 8004582:	429a      	cmp	r2, r3
 8004584:	d305      	bcc.n	8004592 <UART_SetConfig+0x372>
          (pclk > (4096U * huart->Init.BaudRate)))
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800458c:	69fa      	ldr	r2, [r7, #28]
 800458e:	429a      	cmp	r2, r3
 8004590:	d903      	bls.n	800459a <UART_SetConfig+0x37a>
      {
        ret = HAL_ERROR;
 8004592:	2301      	movs	r3, #1
 8004594:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004598:	e0e8      	b.n	800476c <UART_SetConfig+0x54c>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	2200      	movs	r2, #0
 800459e:	461c      	mov	r4, r3
 80045a0:	4615      	mov	r5, r2
 80045a2:	f04f 0200 	mov.w	r2, #0
 80045a6:	f04f 0300 	mov.w	r3, #0
 80045aa:	022b      	lsls	r3, r5, #8
 80045ac:	ea43 6314 	orr.w	r3, r3, r4, lsr #24
 80045b0:	0222      	lsls	r2, r4, #8
 80045b2:	68f9      	ldr	r1, [r7, #12]
 80045b4:	6849      	ldr	r1, [r1, #4]
 80045b6:	0849      	lsrs	r1, r1, #1
 80045b8:	2000      	movs	r0, #0
 80045ba:	4688      	mov	r8, r1
 80045bc:	4681      	mov	r9, r0
 80045be:	eb12 0a08 	adds.w	sl, r2, r8
 80045c2:	eb43 0b09 	adc.w	fp, r3, r9
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	685b      	ldr	r3, [r3, #4]
 80045ca:	2200      	movs	r2, #0
 80045cc:	603b      	str	r3, [r7, #0]
 80045ce:	607a      	str	r2, [r7, #4]
 80045d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80045d4:	4650      	mov	r0, sl
 80045d6:	4659      	mov	r1, fp
 80045d8:	f7fb fdf6 	bl	80001c8 <__aeabi_uldivmod>
 80045dc:	4602      	mov	r2, r0
 80045de:	460b      	mov	r3, r1
 80045e0:	4613      	mov	r3, r2
 80045e2:	61bb      	str	r3, [r7, #24]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80045e4:	69bb      	ldr	r3, [r7, #24]
 80045e6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80045ea:	d308      	bcc.n	80045fe <UART_SetConfig+0x3de>
 80045ec:	69bb      	ldr	r3, [r7, #24]
 80045ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80045f2:	d204      	bcs.n	80045fe <UART_SetConfig+0x3de>
        {
          huart->Instance->BRR = usartdiv;
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	69ba      	ldr	r2, [r7, #24]
 80045fa:	60da      	str	r2, [r3, #12]
 80045fc:	e0b6      	b.n	800476c <UART_SetConfig+0x54c>
        }
        else
        {
          ret = HAL_ERROR;
 80045fe:	2301      	movs	r3, #1
 8004600:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 8004604:	e0b2      	b.n	800476c <UART_SetConfig+0x54c>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	69db      	ldr	r3, [r3, #28]
 800460a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800460e:	d15e      	bne.n	80046ce <UART_SetConfig+0x4ae>
  {
    switch (clocksource)
 8004610:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8004614:	2b08      	cmp	r3, #8
 8004616:	d828      	bhi.n	800466a <UART_SetConfig+0x44a>
 8004618:	a201      	add	r2, pc, #4	@ (adr r2, 8004620 <UART_SetConfig+0x400>)
 800461a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800461e:	bf00      	nop
 8004620:	08004645 	.word	0x08004645
 8004624:	0800464d 	.word	0x0800464d
 8004628:	08004655 	.word	0x08004655
 800462c:	0800466b 	.word	0x0800466b
 8004630:	0800465b 	.word	0x0800465b
 8004634:	0800466b 	.word	0x0800466b
 8004638:	0800466b 	.word	0x0800466b
 800463c:	0800466b 	.word	0x0800466b
 8004640:	08004663 	.word	0x08004663
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004644:	f7fe fc5a 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8004648:	61f8      	str	r0, [r7, #28]
        break;
 800464a:	e014      	b.n	8004676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800464c:	f7fe fc6c 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 8004650:	61f8      	str	r0, [r7, #28]
        break;
 8004652:	e010      	b.n	8004676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004654:	4b4d      	ldr	r3, [pc, #308]	@ (800478c <UART_SetConfig+0x56c>)
 8004656:	61fb      	str	r3, [r7, #28]
        break;
 8004658:	e00d      	b.n	8004676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800465a:	f7fe fbb7 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 800465e:	61f8      	str	r0, [r7, #28]
        break;
 8004660:	e009      	b.n	8004676 <UART_SetConfig+0x456>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004662:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004666:	61fb      	str	r3, [r7, #28]
        break;
 8004668:	e005      	b.n	8004676 <UART_SetConfig+0x456>
      default:
        pclk = 0U;
 800466a:	2300      	movs	r3, #0
 800466c:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800466e:	2301      	movs	r3, #1
 8004670:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004674:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004676:	69fb      	ldr	r3, [r7, #28]
 8004678:	2b00      	cmp	r3, #0
 800467a:	d077      	beq.n	800476c <UART_SetConfig+0x54c>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800467c:	69fb      	ldr	r3, [r7, #28]
 800467e:	005a      	lsls	r2, r3, #1
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	685b      	ldr	r3, [r3, #4]
 8004684:	085b      	lsrs	r3, r3, #1
 8004686:	441a      	add	r2, r3
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	685b      	ldr	r3, [r3, #4]
 800468c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004690:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004692:	69bb      	ldr	r3, [r7, #24]
 8004694:	2b0f      	cmp	r3, #15
 8004696:	d916      	bls.n	80046c6 <UART_SetConfig+0x4a6>
 8004698:	69bb      	ldr	r3, [r7, #24]
 800469a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800469e:	d212      	bcs.n	80046c6 <UART_SetConfig+0x4a6>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80046a0:	69bb      	ldr	r3, [r7, #24]
 80046a2:	b29b      	uxth	r3, r3
 80046a4:	f023 030f 	bic.w	r3, r3, #15
 80046a8:	82fb      	strh	r3, [r7, #22]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80046aa:	69bb      	ldr	r3, [r7, #24]
 80046ac:	085b      	lsrs	r3, r3, #1
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	f003 0307 	and.w	r3, r3, #7
 80046b4:	b29a      	uxth	r2, r3
 80046b6:	8afb      	ldrh	r3, [r7, #22]
 80046b8:	4313      	orrs	r3, r2
 80046ba:	82fb      	strh	r3, [r7, #22]
        huart->Instance->BRR = brrtemp;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	8afa      	ldrh	r2, [r7, #22]
 80046c2:	60da      	str	r2, [r3, #12]
 80046c4:	e052      	b.n	800476c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 80046c6:	2301      	movs	r3, #1
 80046c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
 80046cc:	e04e      	b.n	800476c <UART_SetConfig+0x54c>
      }
    }
  }
  else
  {
    switch (clocksource)
 80046ce:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80046d2:	2b08      	cmp	r3, #8
 80046d4:	d827      	bhi.n	8004726 <UART_SetConfig+0x506>
 80046d6:	a201      	add	r2, pc, #4	@ (adr r2, 80046dc <UART_SetConfig+0x4bc>)
 80046d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046dc:	08004701 	.word	0x08004701
 80046e0:	08004709 	.word	0x08004709
 80046e4:	08004711 	.word	0x08004711
 80046e8:	08004727 	.word	0x08004727
 80046ec:	08004717 	.word	0x08004717
 80046f0:	08004727 	.word	0x08004727
 80046f4:	08004727 	.word	0x08004727
 80046f8:	08004727 	.word	0x08004727
 80046fc:	0800471f 	.word	0x0800471f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004700:	f7fe fbfc 	bl	8002efc <HAL_RCC_GetPCLK1Freq>
 8004704:	61f8      	str	r0, [r7, #28]
        break;
 8004706:	e014      	b.n	8004732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004708:	f7fe fc0e 	bl	8002f28 <HAL_RCC_GetPCLK2Freq>
 800470c:	61f8      	str	r0, [r7, #28]
        break;
 800470e:	e010      	b.n	8004732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004710:	4b1e      	ldr	r3, [pc, #120]	@ (800478c <UART_SetConfig+0x56c>)
 8004712:	61fb      	str	r3, [r7, #28]
        break;
 8004714:	e00d      	b.n	8004732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004716:	f7fe fb59 	bl	8002dcc <HAL_RCC_GetSysClockFreq>
 800471a:	61f8      	str	r0, [r7, #28]
        break;
 800471c:	e009      	b.n	8004732 <UART_SetConfig+0x512>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800471e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004722:	61fb      	str	r3, [r7, #28]
        break;
 8004724:	e005      	b.n	8004732 <UART_SetConfig+0x512>
      default:
        pclk = 0U;
 8004726:	2300      	movs	r3, #0
 8004728:	61fb      	str	r3, [r7, #28]
        ret = HAL_ERROR;
 800472a:	2301      	movs	r3, #1
 800472c:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        break;
 8004730:	bf00      	nop
    }

    if (pclk != 0U)
 8004732:	69fb      	ldr	r3, [r7, #28]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d019      	beq.n	800476c <UART_SetConfig+0x54c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	085a      	lsrs	r2, r3, #1
 800473e:	69fb      	ldr	r3, [r7, #28]
 8004740:	441a      	add	r2, r3
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	fbb2 f3f3 	udiv	r3, r2, r3
 800474a:	61bb      	str	r3, [r7, #24]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800474c:	69bb      	ldr	r3, [r7, #24]
 800474e:	2b0f      	cmp	r3, #15
 8004750:	d909      	bls.n	8004766 <UART_SetConfig+0x546>
 8004752:	69bb      	ldr	r3, [r7, #24]
 8004754:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004758:	d205      	bcs.n	8004766 <UART_SetConfig+0x546>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800475a:	69bb      	ldr	r3, [r7, #24]
 800475c:	b29a      	uxth	r2, r3
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	60da      	str	r2, [r3, #12]
 8004764:	e002      	b.n	800476c <UART_SetConfig+0x54c>
      }
      else
      {
        ret = HAL_ERROR;
 8004766:	2301      	movs	r3, #1
 8004768:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	2200      	movs	r2, #0
 8004770:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004778:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
}
 800477c:	4618      	mov	r0, r3
 800477e:	3728      	adds	r7, #40	@ 0x28
 8004780:	46bd      	mov	sp, r7
 8004782:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004786:	bf00      	nop
 8004788:	40008000 	.word	0x40008000
 800478c:	00f42400 	.word	0x00f42400

08004790 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004790:	b480      	push	{r7}
 8004792:	b083      	sub	sp, #12
 8004794:	af00      	add	r7, sp, #0
 8004796:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800479c:	f003 0308 	and.w	r3, r3, #8
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d00a      	beq.n	80047ba <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	430a      	orrs	r2, r1
 80047b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047be:	f003 0301 	and.w	r3, r3, #1
 80047c2:	2b00      	cmp	r3, #0
 80047c4:	d00a      	beq.n	80047dc <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685b      	ldr	r3, [r3, #4]
 80047cc:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	430a      	orrs	r2, r1
 80047da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047e0:	f003 0302 	and.w	r3, r3, #2
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d00a      	beq.n	80047fe <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	430a      	orrs	r2, r1
 80047fc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004802:	f003 0304 	and.w	r3, r3, #4
 8004806:	2b00      	cmp	r3, #0
 8004808:	d00a      	beq.n	8004820 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	681b      	ldr	r3, [r3, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	430a      	orrs	r2, r1
 800481e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004824:	f003 0310 	and.w	r3, r3, #16
 8004828:	2b00      	cmp	r3, #0
 800482a:	d00a      	beq.n	8004842 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	689b      	ldr	r3, [r3, #8]
 8004832:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	430a      	orrs	r2, r1
 8004840:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004846:	f003 0320 	and.w	r3, r3, #32
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00a      	beq.n	8004864 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	689b      	ldr	r3, [r3, #8]
 8004854:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	430a      	orrs	r2, r1
 8004862:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d01a      	beq.n	80048a6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	430a      	orrs	r2, r1
 8004884:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800488a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800488e:	d10a      	bne.n	80048a6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	685b      	ldr	r3, [r3, #4]
 8004896:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	430a      	orrs	r2, r1
 80048a4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d00a      	beq.n	80048c8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	685b      	ldr	r3, [r3, #4]
 80048b8:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	430a      	orrs	r2, r1
 80048c6:	605a      	str	r2, [r3, #4]
  }
}
 80048c8:	bf00      	nop
 80048ca:	370c      	adds	r7, #12
 80048cc:	46bd      	mov	sp, r7
 80048ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d2:	4770      	bx	lr

080048d4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b098      	sub	sp, #96	@ 0x60
 80048d8:	af02      	add	r7, sp, #8
 80048da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80048e4:	f7fc fb9c 	bl	8001020 <HAL_GetTick>
 80048e8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	f003 0308 	and.w	r3, r3, #8
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d12e      	bne.n	8004956 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80048f8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80048fc:	9300      	str	r3, [sp, #0]
 80048fe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004900:	2200      	movs	r2, #0
 8004902:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004906:	6878      	ldr	r0, [r7, #4]
 8004908:	f000 f88c 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 800490c:	4603      	mov	r3, r0
 800490e:	2b00      	cmp	r3, #0
 8004910:	d021      	beq.n	8004956 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	681b      	ldr	r3, [r3, #0]
 8004916:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004918:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800491a:	e853 3f00 	ldrex	r3, [r3]
 800491e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004920:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004922:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004926:	653b      	str	r3, [r7, #80]	@ 0x50
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	461a      	mov	r2, r3
 800492e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004930:	647b      	str	r3, [r7, #68]	@ 0x44
 8004932:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004934:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004936:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004938:	e841 2300 	strex	r3, r2, [r1]
 800493c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800493e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004940:	2b00      	cmp	r3, #0
 8004942:	d1e6      	bne.n	8004912 <UART_CheckIdleState+0x3e>
#endif /* USART_CR1_FIFOEN */

      huart->gState = HAL_UART_STATE_READY;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	2220      	movs	r2, #32
 8004948:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	2200      	movs	r2, #0
 800494e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004952:	2303      	movs	r3, #3
 8004954:	e062      	b.n	8004a1c <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 0304 	and.w	r3, r3, #4
 8004960:	2b04      	cmp	r3, #4
 8004962:	d149      	bne.n	80049f8 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004964:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004968:	9300      	str	r3, [sp, #0]
 800496a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800496c:	2200      	movs	r2, #0
 800496e:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8004972:	6878      	ldr	r0, [r7, #4]
 8004974:	f000 f856 	bl	8004a24 <UART_WaitOnFlagUntilTimeout>
 8004978:	4603      	mov	r3, r0
 800497a:	2b00      	cmp	r3, #0
 800497c:	d03c      	beq.n	80049f8 <UART_CheckIdleState+0x124>
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004984:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004986:	e853 3f00 	ldrex	r3, [r3]
 800498a:	623b      	str	r3, [r7, #32]
   return(result);
 800498c:	6a3b      	ldr	r3, [r7, #32]
 800498e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004992:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	461a      	mov	r2, r3
 800499a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800499c:	633b      	str	r3, [r7, #48]	@ 0x30
 800499e:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049a0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80049a2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80049a4:	e841 2300 	strex	r3, r2, [r1]
 80049a8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80049aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d1e6      	bne.n	800497e <UART_CheckIdleState+0xaa>
#endif /* USART_CR1_FIFOEN */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	3308      	adds	r3, #8
 80049b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049b8:	693b      	ldr	r3, [r7, #16]
 80049ba:	e853 3f00 	ldrex	r3, [r3]
 80049be:	60fb      	str	r3, [r7, #12]
   return(result);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f023 0301 	bic.w	r3, r3, #1
 80049c6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	3308      	adds	r3, #8
 80049ce:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80049d0:	61fa      	str	r2, [r7, #28]
 80049d2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049d4:	69b9      	ldr	r1, [r7, #24]
 80049d6:	69fa      	ldr	r2, [r7, #28]
 80049d8:	e841 2300 	strex	r3, r2, [r1]
 80049dc:	617b      	str	r3, [r7, #20]
   return(result);
 80049de:	697b      	ldr	r3, [r7, #20]
 80049e0:	2b00      	cmp	r3, #0
 80049e2:	d1e5      	bne.n	80049b0 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2220      	movs	r2, #32
 80049e8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2200      	movs	r2, #0
 80049f0:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e011      	b.n	8004a1c <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	2220      	movs	r2, #32
 8004a02:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	2200      	movs	r2, #0
 8004a0a:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	2200      	movs	r2, #0
 8004a16:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8004a1a:	2300      	movs	r3, #0
}
 8004a1c:	4618      	mov	r0, r3
 8004a1e:	3758      	adds	r7, #88	@ 0x58
 8004a20:	46bd      	mov	sp, r7
 8004a22:	bd80      	pop	{r7, pc}

08004a24 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004a24:	b580      	push	{r7, lr}
 8004a26:	b084      	sub	sp, #16
 8004a28:	af00      	add	r7, sp, #0
 8004a2a:	60f8      	str	r0, [r7, #12]
 8004a2c:	60b9      	str	r1, [r7, #8]
 8004a2e:	603b      	str	r3, [r7, #0]
 8004a30:	4613      	mov	r3, r2
 8004a32:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004a34:	e04f      	b.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004a36:	69bb      	ldr	r3, [r7, #24]
 8004a38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a3c:	d04b      	beq.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a3e:	f7fc faef 	bl	8001020 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	683b      	ldr	r3, [r7, #0]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	69ba      	ldr	r2, [r7, #24]
 8004a4a:	429a      	cmp	r2, r3
 8004a4c:	d302      	bcc.n	8004a54 <UART_WaitOnFlagUntilTimeout+0x30>
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d101      	bne.n	8004a58 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e04e      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0304 	and.w	r3, r3, #4
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d037      	beq.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a66:	68bb      	ldr	r3, [r7, #8]
 8004a68:	2b80      	cmp	r3, #128	@ 0x80
 8004a6a:	d034      	beq.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8004a6c:	68bb      	ldr	r3, [r7, #8]
 8004a6e:	2b40      	cmp	r3, #64	@ 0x40
 8004a70:	d031      	beq.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	69db      	ldr	r3, [r3, #28]
 8004a78:	f003 0308 	and.w	r3, r3, #8
 8004a7c:	2b08      	cmp	r3, #8
 8004a7e:	d110      	bne.n	8004aa2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	2208      	movs	r2, #8
 8004a86:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f8ff 	bl	8004c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2208      	movs	r2, #8
 8004a92:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	2200      	movs	r2, #0
 8004a9a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e029      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	69db      	ldr	r3, [r3, #28]
 8004aa8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004aac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004ab0:	d111      	bne.n	8004ad6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004aba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004abc:	68f8      	ldr	r0, [r7, #12]
 8004abe:	f000 f8e5 	bl	8004c8c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2220      	movs	r2, #32
 8004ac6:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	2200      	movs	r2, #0
 8004ace:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 8004ad2:	2303      	movs	r3, #3
 8004ad4:	e00f      	b.n	8004af6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ad6:	68fb      	ldr	r3, [r7, #12]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	69da      	ldr	r2, [r3, #28]
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	4013      	ands	r3, r2
 8004ae0:	68ba      	ldr	r2, [r7, #8]
 8004ae2:	429a      	cmp	r2, r3
 8004ae4:	bf0c      	ite	eq
 8004ae6:	2301      	moveq	r3, #1
 8004ae8:	2300      	movne	r3, #0
 8004aea:	b2db      	uxtb	r3, r3
 8004aec:	461a      	mov	r2, r3
 8004aee:	79fb      	ldrb	r3, [r7, #7]
 8004af0:	429a      	cmp	r2, r3
 8004af2:	d0a0      	beq.n	8004a36 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004af4:	2300      	movs	r3, #0
}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3710      	adds	r7, #16
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}
	...

08004b00 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b097      	sub	sp, #92	@ 0x5c
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	60f8      	str	r0, [r7, #12]
 8004b08:	60b9      	str	r1, [r7, #8]
 8004b0a:	4613      	mov	r3, r2
 8004b0c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	68ba      	ldr	r2, [r7, #8]
 8004b12:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	88fa      	ldrh	r2, [r7, #6]
 8004b18:	f8a3 2058 	strh.w	r2, [r3, #88]	@ 0x58
  huart->RxXferCount = Size;
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	88fa      	ldrh	r2, [r7, #6]
 8004b20:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->RxISR       = NULL;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	2200      	movs	r2, #0
 8004b28:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b32:	d10e      	bne.n	8004b52 <UART_Start_Receive_IT+0x52>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	691b      	ldr	r3, [r3, #16]
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d105      	bne.n	8004b48 <UART_Start_Receive_IT+0x48>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8004b42:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b46:	e02d      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	22ff      	movs	r2, #255	@ 0xff
 8004b4c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b50:	e028      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	689b      	ldr	r3, [r3, #8]
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d10d      	bne.n	8004b76 <UART_Start_Receive_IT+0x76>
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	691b      	ldr	r3, [r3, #16]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d104      	bne.n	8004b6c <UART_Start_Receive_IT+0x6c>
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	22ff      	movs	r2, #255	@ 0xff
 8004b66:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b6a:	e01b      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	227f      	movs	r2, #127	@ 0x7f
 8004b70:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b74:	e016      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	689b      	ldr	r3, [r3, #8]
 8004b7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004b7e:	d10d      	bne.n	8004b9c <UART_Start_Receive_IT+0x9c>
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	691b      	ldr	r3, [r3, #16]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	d104      	bne.n	8004b92 <UART_Start_Receive_IT+0x92>
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	227f      	movs	r2, #127	@ 0x7f
 8004b8c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b90:	e008      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	223f      	movs	r2, #63	@ 0x3f
 8004b96:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8004b9a:	e003      	b.n	8004ba4 <UART_Start_Receive_IT+0xa4>
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	2200      	movs	r2, #0
 8004ba0:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	2222      	movs	r2, #34	@ 0x22
 8004bb0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	3308      	adds	r3, #8
 8004bba:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bbc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004bbe:	e853 3f00 	ldrex	r3, [r3]
 8004bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bc6:	f043 0301 	orr.w	r3, r3, #1
 8004bca:	657b      	str	r3, [r7, #84]	@ 0x54
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3308      	adds	r3, #8
 8004bd2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8004bd4:	64ba      	str	r2, [r7, #72]	@ 0x48
 8004bd6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bd8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8004bda:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bdc:	e841 2300 	strex	r3, r2, [r1]
 8004be0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8004be2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d1e5      	bne.n	8004bb4 <UART_Start_Receive_IT+0xb4>
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
    }
  }
#else
  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	689b      	ldr	r3, [r3, #8]
 8004bec:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bf0:	d107      	bne.n	8004c02 <UART_Start_Receive_IT+0x102>
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	691b      	ldr	r3, [r3, #16]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d103      	bne.n	8004c02 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	4a21      	ldr	r2, [pc, #132]	@ (8004c84 <UART_Start_Receive_IT+0x184>)
 8004bfe:	669a      	str	r2, [r3, #104]	@ 0x68
 8004c00:	e002      	b.n	8004c08 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8004c02:	68fb      	ldr	r3, [r7, #12]
 8004c04:	4a20      	ldr	r2, [pc, #128]	@ (8004c88 <UART_Start_Receive_IT+0x188>)
 8004c06:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	691b      	ldr	r3, [r3, #16]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d019      	beq.n	8004c44 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c18:	e853 3f00 	ldrex	r3, [r3]
 8004c1c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004c1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c20:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8004c24:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	461a      	mov	r2, r3
 8004c2c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004c2e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004c30:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c32:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004c34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8004c36:	e841 2300 	strex	r3, r2, [r1]
 8004c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8004c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1e6      	bne.n	8004c10 <UART_Start_Receive_IT+0x110>
 8004c42:	e018      	b.n	8004c76 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	e853 3f00 	ldrex	r3, [r3]
 8004c50:	613b      	str	r3, [r7, #16]
   return(result);
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	f043 0320 	orr.w	r3, r3, #32
 8004c58:	653b      	str	r3, [r7, #80]	@ 0x50
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	461a      	mov	r2, r3
 8004c60:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004c62:	623b      	str	r3, [r7, #32]
 8004c64:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	69f9      	ldr	r1, [r7, #28]
 8004c68:	6a3a      	ldr	r2, [r7, #32]
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004c70:	69bb      	ldr	r3, [r7, #24]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e6      	bne.n	8004c44 <UART_Start_Receive_IT+0x144>
  }
#endif /* USART_CR1_FIFOEN */
  return HAL_OK;
 8004c76:	2300      	movs	r3, #0
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	375c      	adds	r7, #92	@ 0x5c
 8004c7c:	46bd      	mov	sp, r7
 8004c7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c82:	4770      	bx	lr
 8004c84:	08004f91 	.word	0x08004f91
 8004c88:	08004dd5 	.word	0x08004dd5

08004c8c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004c8c:	b480      	push	{r7}
 8004c8e:	b095      	sub	sp, #84	@ 0x54
 8004c90:	af00      	add	r7, sp, #0
 8004c92:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
#if defined(USART_CR1_FIFOEN)
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
#else
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c9c:	e853 3f00 	ldrex	r3, [r3]
 8004ca0:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ca8:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004cb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8004cb4:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cb6:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004cb8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004cba:	e841 2300 	strex	r3, r2, [r1]
 8004cbe:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004cc0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d1e6      	bne.n	8004c94 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	3308      	adds	r3, #8
 8004ccc:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cce:	6a3b      	ldr	r3, [r7, #32]
 8004cd0:	e853 3f00 	ldrex	r3, [r3]
 8004cd4:	61fb      	str	r3, [r7, #28]
   return(result);
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	f023 0301 	bic.w	r3, r3, #1
 8004cdc:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	3308      	adds	r3, #8
 8004ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004ce6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ce8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004cec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004cee:	e841 2300 	strex	r3, r2, [r1]
 8004cf2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004cf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d1e5      	bne.n	8004cc6 <UART_EndRxTransfer+0x3a>
#endif /* USART_CR1_FIFOEN */

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004cfe:	2b01      	cmp	r3, #1
 8004d00:	d118      	bne.n	8004d34 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	681b      	ldr	r3, [r3, #0]
 8004d06:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	e853 3f00 	ldrex	r3, [r3]
 8004d0e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	f023 0310 	bic.w	r3, r3, #16
 8004d16:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	461a      	mov	r2, r3
 8004d1e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8004d20:	61bb      	str	r3, [r7, #24]
 8004d22:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d24:	6979      	ldr	r1, [r7, #20]
 8004d26:	69ba      	ldr	r2, [r7, #24]
 8004d28:	e841 2300 	strex	r3, r2, [r1]
 8004d2c:	613b      	str	r3, [r7, #16]
   return(result);
 8004d2e:	693b      	ldr	r3, [r7, #16]
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d1e6      	bne.n	8004d02 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	2220      	movs	r2, #32
 8004d38:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	2200      	movs	r2, #0
 8004d40:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2200      	movs	r2, #0
 8004d46:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8004d48:	bf00      	nop
 8004d4a:	3754      	adds	r7, #84	@ 0x54
 8004d4c:	46bd      	mov	sp, r7
 8004d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d52:	4770      	bx	lr

08004d54 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004d54:	b580      	push	{r7, lr}
 8004d56:	b084      	sub	sp, #16
 8004d58:	af00      	add	r7, sp, #0
 8004d5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	2200      	movs	r2, #0
 8004d66:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a
  huart->TxXferCount = 0U;
 8004d6a:	68fb      	ldr	r3, [r7, #12]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004d72:	68f8      	ldr	r0, [r7, #12]
 8004d74:	f7ff fa3e 	bl	80041f4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004d78:	bf00      	nop
 8004d7a:	3710      	adds	r7, #16
 8004d7c:	46bd      	mov	sp, r7
 8004d7e:	bd80      	pop	{r7, pc}

08004d80 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004d80:	b580      	push	{r7, lr}
 8004d82:	b088      	sub	sp, #32
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	e853 3f00 	ldrex	r3, [r3]
 8004d94:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d96:	68bb      	ldr	r3, [r7, #8]
 8004d98:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d9c:	61fb      	str	r3, [r7, #28]
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	461a      	mov	r2, r3
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	61bb      	str	r3, [r7, #24]
 8004da8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004daa:	6979      	ldr	r1, [r7, #20]
 8004dac:	69ba      	ldr	r2, [r7, #24]
 8004dae:	e841 2300 	strex	r3, r2, [r1]
 8004db2:	613b      	str	r3, [r7, #16]
   return(result);
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d1e6      	bne.n	8004d88 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2220      	movs	r2, #32
 8004dbe:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	2200      	movs	r2, #0
 8004dc4:	66da      	str	r2, [r3, #108]	@ 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004dc6:	6878      	ldr	r0, [r7, #4]
 8004dc8:	f7ff fa0a 	bl	80041e0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004dcc:	bf00      	nop
 8004dce:	3720      	adds	r7, #32
 8004dd0:	46bd      	mov	sp, r7
 8004dd2:	bd80      	pop	{r7, pc}

08004dd4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8004dd4:	b580      	push	{r7, lr}
 8004dd6:	b09c      	sub	sp, #112	@ 0x70
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004de2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004dec:	2b22      	cmp	r3, #34	@ 0x22
 8004dee:	f040 80be 	bne.w	8004f6e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004df8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8004dfc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8004e00:	b2d9      	uxtb	r1, r3
 8004e02:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004e06:	b2da      	uxtb	r2, r3
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e0c:	400a      	ands	r2, r1
 8004e0e:	b2d2      	uxtb	r2, r2
 8004e10:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004e16:	1c5a      	adds	r2, r3, #1
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e22:	b29b      	uxth	r3, r3
 8004e24:	3b01      	subs	r3, #1
 8004e26:	b29a      	uxth	r2, r3
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	f040 80a3 	bne.w	8004f82 <UART_RxISR_8BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e42:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004e44:	e853 3f00 	ldrex	r3, [r3]
 8004e48:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004e4a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004e4c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e50:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	461a      	mov	r2, r3
 8004e58:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004e5a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8004e5c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e5e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e60:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e62:	e841 2300 	strex	r3, r2, [r1]
 8004e66:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e68:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d1e6      	bne.n	8004e3c <UART_RxISR_8BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	3308      	adds	r3, #8
 8004e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e80:	f023 0301 	bic.w	r3, r3, #1
 8004e84:	667b      	str	r3, [r7, #100]	@ 0x64
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	3308      	adds	r3, #8
 8004e8c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8004e8e:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e90:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e92:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e94:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e96:	e841 2300 	strex	r3, r2, [r1]
 8004e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e9c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d1e5      	bne.n	8004e6e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	2220      	movs	r2, #32
 8004ea6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2200      	movs	r2, #0
 8004eae:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	4a34      	ldr	r2, [pc, #208]	@ (8004f8c <UART_RxISR_8BIT+0x1b8>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d01f      	beq.n	8004f00 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	685b      	ldr	r3, [r3, #4]
 8004ec6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d018      	beq.n	8004f00 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ed6:	e853 3f00 	ldrex	r3, [r3]
 8004eda:	623b      	str	r3, [r7, #32]
   return(result);
 8004edc:	6a3b      	ldr	r3, [r7, #32]
 8004ede:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004ee2:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	461a      	mov	r2, r3
 8004eea:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004eec:	633b      	str	r3, [r7, #48]	@ 0x30
 8004eee:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ef0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ef4:	e841 2300 	strex	r3, r2, [r1]
 8004ef8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004efa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1e6      	bne.n	8004ece <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d12e      	bne.n	8004f66 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f14:	693b      	ldr	r3, [r7, #16]
 8004f16:	e853 3f00 	ldrex	r3, [r3]
 8004f1a:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	f023 0310 	bic.w	r3, r3, #16
 8004f22:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	461a      	mov	r2, r3
 8004f2a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f2c:	61fb      	str	r3, [r7, #28]
 8004f2e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f30:	69b9      	ldr	r1, [r7, #24]
 8004f32:	69fa      	ldr	r2, [r7, #28]
 8004f34:	e841 2300 	strex	r3, r2, [r1]
 8004f38:	617b      	str	r3, [r7, #20]
   return(result);
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d1e6      	bne.n	8004f0e <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69db      	ldr	r3, [r3, #28]
 8004f46:	f003 0310 	and.w	r3, r3, #16
 8004f4a:	2b10      	cmp	r3, #16
 8004f4c:	d103      	bne.n	8004f56 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	2210      	movs	r2, #16
 8004f54:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8004f5c:	4619      	mov	r1, r3
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f7ff f952 	bl	8004208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8004f64:	e00d      	b.n	8004f82 <UART_RxISR_8BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f7fb faa6 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8004f6c:	e009      	b.n	8004f82 <UART_RxISR_8BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	8b1b      	ldrh	r3, [r3, #24]
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f042 0208 	orr.w	r2, r2, #8
 8004f7e:	b292      	uxth	r2, r2
 8004f80:	831a      	strh	r2, [r3, #24]
}
 8004f82:	bf00      	nop
 8004f84:	3770      	adds	r7, #112	@ 0x70
 8004f86:	46bd      	mov	sp, r7
 8004f88:	bd80      	pop	{r7, pc}
 8004f8a:	bf00      	nop
 8004f8c:	40008000 	.word	0x40008000

08004f90 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b09c      	sub	sp, #112	@ 0x70
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8004f9e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8004fa8:	2b22      	cmp	r3, #34	@ 0x22
 8004faa:	f040 80be 	bne.w	800512a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	8c9b      	ldrh	r3, [r3, #36]	@ 0x24
 8004fb4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fbc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8004fbe:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8004fc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8004fc6:	4013      	ands	r3, r2
 8004fc8:	b29a      	uxth	r2, r3
 8004fca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004fcc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004fd2:	1c9a      	adds	r2, r3, #2
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004fde:	b29b      	uxth	r3, r3
 8004fe0:	3b01      	subs	r3, #1
 8004fe2:	b29a      	uxth	r2, r3
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f8a3 205a 	strh.w	r2, [r3, #90]	@ 0x5a

    if (huart->RxXferCount == 0U)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	f8b3 305a 	ldrh.w	r3, [r3, #90]	@ 0x5a
 8004ff0:	b29b      	uxth	r3, r3
 8004ff2:	2b00      	cmp	r3, #0
 8004ff4:	f040 80a3 	bne.w	800513e <UART_RxISR_16BIT+0x1ae>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
#if defined(USART_CR1_FIFOEN)
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
#else
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ffe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005000:	e853 3f00 	ldrex	r3, [r3]
 8005004:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8005006:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005008:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800500c:	667b      	str	r3, [r7, #100]	@ 0x64
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	461a      	mov	r2, r3
 8005014:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005016:	657b      	str	r3, [r7, #84]	@ 0x54
 8005018:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800501a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800501c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800501e:	e841 2300 	strex	r3, r2, [r1]
 8005022:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8005024:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005026:	2b00      	cmp	r3, #0
 8005028:	d1e6      	bne.n	8004ff8 <UART_RxISR_16BIT+0x68>
#endif /* USART_CR1_FIFOEN */

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	3308      	adds	r3, #8
 8005030:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005032:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005034:	e853 3f00 	ldrex	r3, [r3]
 8005038:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800503a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800503c:	f023 0301 	bic.w	r3, r3, #1
 8005040:	663b      	str	r3, [r7, #96]	@ 0x60
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	3308      	adds	r3, #8
 8005048:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800504a:	643a      	str	r2, [r7, #64]	@ 0x40
 800504c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800504e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005050:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005052:	e841 2300 	strex	r3, r2, [r1]
 8005056:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005058:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800505a:	2b00      	cmp	r3, #0
 800505c:	d1e5      	bne.n	800502a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2220      	movs	r2, #32
 8005062:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	2200      	movs	r2, #0
 800506a:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2200      	movs	r2, #0
 8005070:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	4a34      	ldr	r2, [pc, #208]	@ (8005148 <UART_RxISR_16BIT+0x1b8>)
 8005078:	4293      	cmp	r3, r2
 800507a:	d01f      	beq.n	80050bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	685b      	ldr	r3, [r3, #4]
 8005082:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005086:	2b00      	cmp	r3, #0
 8005088:	d018      	beq.n	80050bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005090:	6a3b      	ldr	r3, [r7, #32]
 8005092:	e853 3f00 	ldrex	r3, [r3]
 8005096:	61fb      	str	r3, [r7, #28]
   return(result);
 8005098:	69fb      	ldr	r3, [r7, #28]
 800509a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800509e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	461a      	mov	r2, r3
 80050a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80050a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80050aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80050ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050b0:	e841 2300 	strex	r3, r2, [r1]
 80050b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80050b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d1e6      	bne.n	800508a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80050c0:	2b01      	cmp	r3, #1
 80050c2:	d12e      	bne.n	8005122 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2200      	movs	r2, #0
 80050c8:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	e853 3f00 	ldrex	r3, [r3]
 80050d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f023 0310 	bic.w	r3, r3, #16
 80050de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	461a      	mov	r2, r3
 80050e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80050e8:	61bb      	str	r3, [r7, #24]
 80050ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ec:	6979      	ldr	r1, [r7, #20]
 80050ee:	69ba      	ldr	r2, [r7, #24]
 80050f0:	e841 2300 	strex	r3, r2, [r1]
 80050f4:	613b      	str	r3, [r7, #16]
   return(result);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d1e6      	bne.n	80050ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	69db      	ldr	r3, [r3, #28]
 8005102:	f003 0310 	and.w	r3, r3, #16
 8005106:	2b10      	cmp	r3, #16
 8005108:	d103      	bne.n	8005112 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	2210      	movs	r2, #16
 8005110:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8b3 3058 	ldrh.w	r3, [r3, #88]	@ 0x58
 8005118:	4619      	mov	r1, r3
 800511a:	6878      	ldr	r0, [r7, #4]
 800511c:	f7ff f874 	bl	8004208 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8005120:	e00d      	b.n	800513e <UART_RxISR_16BIT+0x1ae>
        HAL_UART_RxCpltCallback(huart);
 8005122:	6878      	ldr	r0, [r7, #4]
 8005124:	f7fb f9c8 	bl	80004b8 <HAL_UART_RxCpltCallback>
}
 8005128:	e009      	b.n	800513e <UART_RxISR_16BIT+0x1ae>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	8b1b      	ldrh	r3, [r3, #24]
 8005130:	b29a      	uxth	r2, r3
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	681b      	ldr	r3, [r3, #0]
 8005136:	f042 0208 	orr.w	r2, r2, #8
 800513a:	b292      	uxth	r2, r2
 800513c:	831a      	strh	r2, [r3, #24]
}
 800513e:	bf00      	nop
 8005140:	3770      	adds	r7, #112	@ 0x70
 8005142:	46bd      	mov	sp, r7
 8005144:	bd80      	pop	{r7, pc}
 8005146:	bf00      	nop
 8005148:	40008000 	.word	0x40008000

0800514c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 800514c:	b480      	push	{r7}
 800514e:	b083      	sub	sp, #12
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8005154:	bf00      	nop
 8005156:	370c      	adds	r7, #12
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <ssd1306_WriteCommand>:
void ssd1306_Reset(void) {
    /* for I2C - do nothing */
}

// Send a byte to the command register
void ssd1306_WriteCommand(uint8_t byte) {
 8005160:	b580      	push	{r7, lr}
 8005162:	b086      	sub	sp, #24
 8005164:	af04      	add	r7, sp, #16
 8005166:	4603      	mov	r3, r0
 8005168:	71fb      	strb	r3, [r7, #7]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &byte, 1, HAL_MAX_DELAY);
 800516a:	f04f 33ff 	mov.w	r3, #4294967295
 800516e:	9302      	str	r3, [sp, #8]
 8005170:	2301      	movs	r3, #1
 8005172:	9301      	str	r3, [sp, #4]
 8005174:	1dfb      	adds	r3, r7, #7
 8005176:	9300      	str	r3, [sp, #0]
 8005178:	2301      	movs	r3, #1
 800517a:	2200      	movs	r2, #0
 800517c:	2178      	movs	r1, #120	@ 0x78
 800517e:	4803      	ldr	r0, [pc, #12]	@ (800518c <ssd1306_WriteCommand+0x2c>)
 8005180:	f7fc fcca 	bl	8001b18 <HAL_I2C_Mem_Write>
}
 8005184:	bf00      	nop
 8005186:	3708      	adds	r7, #8
 8005188:	46bd      	mov	sp, r7
 800518a:	bd80      	pop	{r7, pc}
 800518c:	20000054 	.word	0x20000054

08005190 <ssd1306_WriteData>:

// Send data
void ssd1306_WriteData(uint8_t* buffer, size_t buff_size) {
 8005190:	b580      	push	{r7, lr}
 8005192:	b086      	sub	sp, #24
 8005194:	af04      	add	r7, sp, #16
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
    HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, buffer, buff_size, HAL_MAX_DELAY);
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	b29b      	uxth	r3, r3
 800519e:	f04f 32ff 	mov.w	r2, #4294967295
 80051a2:	9202      	str	r2, [sp, #8]
 80051a4:	9301      	str	r3, [sp, #4]
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	9300      	str	r3, [sp, #0]
 80051aa:	2301      	movs	r3, #1
 80051ac:	2240      	movs	r2, #64	@ 0x40
 80051ae:	2178      	movs	r1, #120	@ 0x78
 80051b0:	4803      	ldr	r0, [pc, #12]	@ (80051c0 <ssd1306_WriteData+0x30>)
 80051b2:	f7fc fcb1 	bl	8001b18 <HAL_I2C_Mem_Write>
}
 80051b6:	bf00      	nop
 80051b8:	3708      	adds	r7, #8
 80051ba:	46bd      	mov	sp, r7
 80051bc:	bd80      	pop	{r7, pc}
 80051be:	bf00      	nop
 80051c0:	20000054 	.word	0x20000054

080051c4 <ssd1306_UpdateScreen>:
void ssd1306_Fill(SSD1306_COLOR color) {
    memset(SSD1306_Buffer, (color == Black) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
}

/* Write the screenbuffer with changed to the screen */
void ssd1306_UpdateScreen(void) {
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b082      	sub	sp, #8
 80051c8:	af00      	add	r7, sp, #0
    // depends on the screen height:
    //
    //  * 32px   ==  4 pages
    //  * 64px   ==  8 pages
    //  * 128px  ==  16 pages
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051ca:	2300      	movs	r3, #0
 80051cc:	71fb      	strb	r3, [r7, #7]
 80051ce:	e016      	b.n	80051fe <ssd1306_UpdateScreen+0x3a>
        ssd1306_WriteCommand(0xB0 + i); // Set the current RAM page address.
 80051d0:	79fb      	ldrb	r3, [r7, #7]
 80051d2:	3b50      	subs	r3, #80	@ 0x50
 80051d4:	b2db      	uxtb	r3, r3
 80051d6:	4618      	mov	r0, r3
 80051d8:	f7ff ffc2 	bl	8005160 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x00 + SSD1306_X_OFFSET_LOWER);
 80051dc:	2000      	movs	r0, #0
 80051de:	f7ff ffbf 	bl	8005160 <ssd1306_WriteCommand>
        ssd1306_WriteCommand(0x10 + SSD1306_X_OFFSET_UPPER);
 80051e2:	2010      	movs	r0, #16
 80051e4:	f7ff ffbc 	bl	8005160 <ssd1306_WriteCommand>
        ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH*i],SSD1306_WIDTH);
 80051e8:	79fb      	ldrb	r3, [r7, #7]
 80051ea:	01db      	lsls	r3, r3, #7
 80051ec:	4a08      	ldr	r2, [pc, #32]	@ (8005210 <ssd1306_UpdateScreen+0x4c>)
 80051ee:	4413      	add	r3, r2
 80051f0:	2180      	movs	r1, #128	@ 0x80
 80051f2:	4618      	mov	r0, r3
 80051f4:	f7ff ffcc 	bl	8005190 <ssd1306_WriteData>
    for(uint8_t i = 0; i < SSD1306_HEIGHT/8; i++) {
 80051f8:	79fb      	ldrb	r3, [r7, #7]
 80051fa:	3301      	adds	r3, #1
 80051fc:	71fb      	strb	r3, [r7, #7]
 80051fe:	79fb      	ldrb	r3, [r7, #7]
 8005200:	2b07      	cmp	r3, #7
 8005202:	d9e5      	bls.n	80051d0 <ssd1306_UpdateScreen+0xc>
    }
}
 8005204:	bf00      	nop
 8005206:	bf00      	nop
 8005208:	3708      	adds	r7, #8
 800520a:	46bd      	mov	sp, r7
 800520c:	bd80      	pop	{r7, pc}
 800520e:	bf00      	nop
 8005210:	200001e8 	.word	0x200001e8

08005214 <ssd1306_DrawPixel>:
 * Draw one pixel in the screenbuffer
 * X => X Coordinate
 * Y => Y Coordinate
 * color => Pixel color
 */
void ssd1306_DrawPixel(uint8_t x, uint8_t y, SSD1306_COLOR color) {
 8005214:	b480      	push	{r7}
 8005216:	b083      	sub	sp, #12
 8005218:	af00      	add	r7, sp, #0
 800521a:	4603      	mov	r3, r0
 800521c:	71fb      	strb	r3, [r7, #7]
 800521e:	460b      	mov	r3, r1
 8005220:	71bb      	strb	r3, [r7, #6]
 8005222:	4613      	mov	r3, r2
 8005224:	717b      	strb	r3, [r7, #5]
    if(x >= SSD1306_WIDTH || y >= SSD1306_HEIGHT) {
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	2b00      	cmp	r3, #0
 800522c:	db3d      	blt.n	80052aa <ssd1306_DrawPixel+0x96>
 800522e:	79bb      	ldrb	r3, [r7, #6]
 8005230:	2b3f      	cmp	r3, #63	@ 0x3f
 8005232:	d83a      	bhi.n	80052aa <ssd1306_DrawPixel+0x96>
        // Don't write outside the buffer
        return;
    }
   
    // Draw in the right color
    if(color == White) {
 8005234:	797b      	ldrb	r3, [r7, #5]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d11a      	bne.n	8005270 <ssd1306_DrawPixel+0x5c>
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 800523a:	79fa      	ldrb	r2, [r7, #7]
 800523c:	79bb      	ldrb	r3, [r7, #6]
 800523e:	08db      	lsrs	r3, r3, #3
 8005240:	b2d8      	uxtb	r0, r3
 8005242:	4603      	mov	r3, r0
 8005244:	01db      	lsls	r3, r3, #7
 8005246:	4413      	add	r3, r2
 8005248:	4a1b      	ldr	r2, [pc, #108]	@ (80052b8 <ssd1306_DrawPixel+0xa4>)
 800524a:	5cd3      	ldrb	r3, [r2, r3]
 800524c:	b25a      	sxtb	r2, r3
 800524e:	79bb      	ldrb	r3, [r7, #6]
 8005250:	f003 0307 	and.w	r3, r3, #7
 8005254:	2101      	movs	r1, #1
 8005256:	fa01 f303 	lsl.w	r3, r1, r3
 800525a:	b25b      	sxtb	r3, r3
 800525c:	4313      	orrs	r3, r2
 800525e:	b259      	sxtb	r1, r3
 8005260:	79fa      	ldrb	r2, [r7, #7]
 8005262:	4603      	mov	r3, r0
 8005264:	01db      	lsls	r3, r3, #7
 8005266:	4413      	add	r3, r2
 8005268:	b2c9      	uxtb	r1, r1
 800526a:	4a13      	ldr	r2, [pc, #76]	@ (80052b8 <ssd1306_DrawPixel+0xa4>)
 800526c:	54d1      	strb	r1, [r2, r3]
 800526e:	e01d      	b.n	80052ac <ssd1306_DrawPixel+0x98>
    } else { 
        SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 8005270:	79fa      	ldrb	r2, [r7, #7]
 8005272:	79bb      	ldrb	r3, [r7, #6]
 8005274:	08db      	lsrs	r3, r3, #3
 8005276:	b2d8      	uxtb	r0, r3
 8005278:	4603      	mov	r3, r0
 800527a:	01db      	lsls	r3, r3, #7
 800527c:	4413      	add	r3, r2
 800527e:	4a0e      	ldr	r2, [pc, #56]	@ (80052b8 <ssd1306_DrawPixel+0xa4>)
 8005280:	5cd3      	ldrb	r3, [r2, r3]
 8005282:	b25a      	sxtb	r2, r3
 8005284:	79bb      	ldrb	r3, [r7, #6]
 8005286:	f003 0307 	and.w	r3, r3, #7
 800528a:	2101      	movs	r1, #1
 800528c:	fa01 f303 	lsl.w	r3, r1, r3
 8005290:	b25b      	sxtb	r3, r3
 8005292:	43db      	mvns	r3, r3
 8005294:	b25b      	sxtb	r3, r3
 8005296:	4013      	ands	r3, r2
 8005298:	b259      	sxtb	r1, r3
 800529a:	79fa      	ldrb	r2, [r7, #7]
 800529c:	4603      	mov	r3, r0
 800529e:	01db      	lsls	r3, r3, #7
 80052a0:	4413      	add	r3, r2
 80052a2:	b2c9      	uxtb	r1, r1
 80052a4:	4a04      	ldr	r2, [pc, #16]	@ (80052b8 <ssd1306_DrawPixel+0xa4>)
 80052a6:	54d1      	strb	r1, [r2, r3]
 80052a8:	e000      	b.n	80052ac <ssd1306_DrawPixel+0x98>
        return;
 80052aa:	bf00      	nop
    }
}
 80052ac:	370c      	adds	r7, #12
 80052ae:	46bd      	mov	sp, r7
 80052b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b4:	4770      	bx	lr
 80052b6:	bf00      	nop
 80052b8:	200001e8 	.word	0x200001e8

080052bc <ssd1306_WriteChar>:
 * Draw 1 char to the screen buffer
 * ch       => char om weg te schrijven
 * Font     => Font waarmee we gaan schrijven
 * color    => Black or White
 */
char ssd1306_WriteChar(char ch, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80052bc:	b590      	push	{r4, r7, lr}
 80052be:	b089      	sub	sp, #36	@ 0x24
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	4604      	mov	r4, r0
 80052c4:	4638      	mov	r0, r7
 80052c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
 80052ca:	4623      	mov	r3, r4
 80052cc:	73fb      	strb	r3, [r7, #15]
    uint32_t i, b, j;
    
    // Check if character is valid
    if (ch < 32 || ch > 126)
 80052ce:	7bfb      	ldrb	r3, [r7, #15]
 80052d0:	2b1f      	cmp	r3, #31
 80052d2:	d902      	bls.n	80052da <ssd1306_WriteChar+0x1e>
 80052d4:	7bfb      	ldrb	r3, [r7, #15]
 80052d6:	2b7e      	cmp	r3, #126	@ 0x7e
 80052d8:	d901      	bls.n	80052de <ssd1306_WriteChar+0x22>
        return 0;
 80052da:	2300      	movs	r3, #0
 80052dc:	e077      	b.n	80053ce <ssd1306_WriteChar+0x112>
    
    // Check remaining space on current line
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80052de:	4b3e      	ldr	r3, [pc, #248]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 80052e0:	881b      	ldrh	r3, [r3, #0]
 80052e2:	461a      	mov	r2, r3
 80052e4:	783b      	ldrb	r3, [r7, #0]
 80052e6:	4413      	add	r3, r2
 80052e8:	2b80      	cmp	r3, #128	@ 0x80
 80052ea:	dc06      	bgt.n	80052fa <ssd1306_WriteChar+0x3e>
        SSD1306_HEIGHT < (SSD1306.CurrentY + Font.height))
 80052ec:	4b3a      	ldr	r3, [pc, #232]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 80052ee:	885b      	ldrh	r3, [r3, #2]
 80052f0:	461a      	mov	r2, r3
 80052f2:	787b      	ldrb	r3, [r7, #1]
 80052f4:	4413      	add	r3, r2
    if (SSD1306_WIDTH < (SSD1306.CurrentX + Font.width) ||
 80052f6:	2b40      	cmp	r3, #64	@ 0x40
 80052f8:	dd01      	ble.n	80052fe <ssd1306_WriteChar+0x42>
    {
        // Not enough space on current line
        return 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	e067      	b.n	80053ce <ssd1306_WriteChar+0x112>
    }
    
    // Use the font to write
    for(i = 0; i < Font.height; i++) {
 80052fe:	2300      	movs	r3, #0
 8005300:	61fb      	str	r3, [r7, #28]
 8005302:	e04e      	b.n	80053a2 <ssd1306_WriteChar+0xe6>
        b = Font.data[(ch - 32) * Font.height + i];
 8005304:	687a      	ldr	r2, [r7, #4]
 8005306:	7bfb      	ldrb	r3, [r7, #15]
 8005308:	3b20      	subs	r3, #32
 800530a:	7879      	ldrb	r1, [r7, #1]
 800530c:	fb01 f303 	mul.w	r3, r1, r3
 8005310:	4619      	mov	r1, r3
 8005312:	69fb      	ldr	r3, [r7, #28]
 8005314:	440b      	add	r3, r1
 8005316:	005b      	lsls	r3, r3, #1
 8005318:	4413      	add	r3, r2
 800531a:	881b      	ldrh	r3, [r3, #0]
 800531c:	617b      	str	r3, [r7, #20]
        for(j = 0; j < Font.width; j++) {
 800531e:	2300      	movs	r3, #0
 8005320:	61bb      	str	r3, [r7, #24]
 8005322:	e036      	b.n	8005392 <ssd1306_WriteChar+0xd6>
            if((b << j) & 0x8000)  {
 8005324:	697a      	ldr	r2, [r7, #20]
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	fa02 f303 	lsl.w	r3, r2, r3
 800532c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8005330:	2b00      	cmp	r3, #0
 8005332:	d013      	beq.n	800535c <ssd1306_WriteChar+0xa0>
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR) color);
 8005334:	4b28      	ldr	r3, [pc, #160]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 8005336:	881b      	ldrh	r3, [r3, #0]
 8005338:	b2da      	uxtb	r2, r3
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	b2db      	uxtb	r3, r3
 800533e:	4413      	add	r3, r2
 8005340:	b2d8      	uxtb	r0, r3
 8005342:	4b25      	ldr	r3, [pc, #148]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 8005344:	885b      	ldrh	r3, [r3, #2]
 8005346:	b2da      	uxtb	r2, r3
 8005348:	69fb      	ldr	r3, [r7, #28]
 800534a:	b2db      	uxtb	r3, r3
 800534c:	4413      	add	r3, r2
 800534e:	b2db      	uxtb	r3, r3
 8005350:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8005354:	4619      	mov	r1, r3
 8005356:	f7ff ff5d 	bl	8005214 <ssd1306_DrawPixel>
 800535a:	e017      	b.n	800538c <ssd1306_WriteChar+0xd0>
            } else {
                ssd1306_DrawPixel(SSD1306.CurrentX + j, (SSD1306.CurrentY + i), (SSD1306_COLOR)!color);
 800535c:	4b1e      	ldr	r3, [pc, #120]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 800535e:	881b      	ldrh	r3, [r3, #0]
 8005360:	b2da      	uxtb	r2, r3
 8005362:	69bb      	ldr	r3, [r7, #24]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	4413      	add	r3, r2
 8005368:	b2d8      	uxtb	r0, r3
 800536a:	4b1b      	ldr	r3, [pc, #108]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 800536c:	885b      	ldrh	r3, [r3, #2]
 800536e:	b2da      	uxtb	r2, r3
 8005370:	69fb      	ldr	r3, [r7, #28]
 8005372:	b2db      	uxtb	r3, r3
 8005374:	4413      	add	r3, r2
 8005376:	b2d9      	uxtb	r1, r3
 8005378:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 800537c:	2b00      	cmp	r3, #0
 800537e:	bf0c      	ite	eq
 8005380:	2301      	moveq	r3, #1
 8005382:	2300      	movne	r3, #0
 8005384:	b2db      	uxtb	r3, r3
 8005386:	461a      	mov	r2, r3
 8005388:	f7ff ff44 	bl	8005214 <ssd1306_DrawPixel>
        for(j = 0; j < Font.width; j++) {
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	3301      	adds	r3, #1
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	783b      	ldrb	r3, [r7, #0]
 8005394:	461a      	mov	r2, r3
 8005396:	69bb      	ldr	r3, [r7, #24]
 8005398:	4293      	cmp	r3, r2
 800539a:	d3c3      	bcc.n	8005324 <ssd1306_WriteChar+0x68>
    for(i = 0; i < Font.height; i++) {
 800539c:	69fb      	ldr	r3, [r7, #28]
 800539e:	3301      	adds	r3, #1
 80053a0:	61fb      	str	r3, [r7, #28]
 80053a2:	787b      	ldrb	r3, [r7, #1]
 80053a4:	461a      	mov	r2, r3
 80053a6:	69fb      	ldr	r3, [r7, #28]
 80053a8:	4293      	cmp	r3, r2
 80053aa:	d3ab      	bcc.n	8005304 <ssd1306_WriteChar+0x48>
            }
        }
    }
    
    // The current space is now taken
    SSD1306.CurrentX += Font.char_width ? Font.char_width[ch - 32] : Font.width;
 80053ac:	4b0a      	ldr	r3, [pc, #40]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 80053ae:	881b      	ldrh	r3, [r3, #0]
 80053b0:	68ba      	ldr	r2, [r7, #8]
 80053b2:	2a00      	cmp	r2, #0
 80053b4:	d005      	beq.n	80053c2 <ssd1306_WriteChar+0x106>
 80053b6:	68b9      	ldr	r1, [r7, #8]
 80053b8:	7bfa      	ldrb	r2, [r7, #15]
 80053ba:	3a20      	subs	r2, #32
 80053bc:	440a      	add	r2, r1
 80053be:	7812      	ldrb	r2, [r2, #0]
 80053c0:	e000      	b.n	80053c4 <ssd1306_WriteChar+0x108>
 80053c2:	783a      	ldrb	r2, [r7, #0]
 80053c4:	4413      	add	r3, r2
 80053c6:	b29a      	uxth	r2, r3
 80053c8:	4b03      	ldr	r3, [pc, #12]	@ (80053d8 <ssd1306_WriteChar+0x11c>)
 80053ca:	801a      	strh	r2, [r3, #0]
    
    // Return written char for validation
    return ch;
 80053cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80053ce:	4618      	mov	r0, r3
 80053d0:	3724      	adds	r7, #36	@ 0x24
 80053d2:	46bd      	mov	sp, r7
 80053d4:	bd90      	pop	{r4, r7, pc}
 80053d6:	bf00      	nop
 80053d8:	200005e8 	.word	0x200005e8

080053dc <ssd1306_WriteString>:

/* Write full string to screenbuffer */
char ssd1306_WriteString(char* str, SSD1306_Font_t Font, SSD1306_COLOR color) {
 80053dc:	b580      	push	{r7, lr}
 80053de:	b086      	sub	sp, #24
 80053e0:	af02      	add	r7, sp, #8
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	4638      	mov	r0, r7
 80053e6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
    while (*str) {
 80053ea:	e013      	b.n	8005414 <ssd1306_WriteString+0x38>
        if (ssd1306_WriteChar(*str, Font, color) != *str) {
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	7818      	ldrb	r0, [r3, #0]
 80053f0:	7e3b      	ldrb	r3, [r7, #24]
 80053f2:	9300      	str	r3, [sp, #0]
 80053f4:	463b      	mov	r3, r7
 80053f6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80053f8:	f7ff ff60 	bl	80052bc <ssd1306_WriteChar>
 80053fc:	4603      	mov	r3, r0
 80053fe:	461a      	mov	r2, r3
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	781b      	ldrb	r3, [r3, #0]
 8005404:	429a      	cmp	r2, r3
 8005406:	d002      	beq.n	800540e <ssd1306_WriteString+0x32>
            // Char could not be written
            return *str;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	781b      	ldrb	r3, [r3, #0]
 800540c:	e008      	b.n	8005420 <ssd1306_WriteString+0x44>
        }
        str++;
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	3301      	adds	r3, #1
 8005412:	60fb      	str	r3, [r7, #12]
    while (*str) {
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d1e7      	bne.n	80053ec <ssd1306_WriteString+0x10>
    }
    
    // Everything ok
    return *str;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	781b      	ldrb	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	3710      	adds	r7, #16
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <memcmp>:
 8005428:	b510      	push	{r4, lr}
 800542a:	3901      	subs	r1, #1
 800542c:	4402      	add	r2, r0
 800542e:	4290      	cmp	r0, r2
 8005430:	d101      	bne.n	8005436 <memcmp+0xe>
 8005432:	2000      	movs	r0, #0
 8005434:	e005      	b.n	8005442 <memcmp+0x1a>
 8005436:	7803      	ldrb	r3, [r0, #0]
 8005438:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800543c:	42a3      	cmp	r3, r4
 800543e:	d001      	beq.n	8005444 <memcmp+0x1c>
 8005440:	1b18      	subs	r0, r3, r4
 8005442:	bd10      	pop	{r4, pc}
 8005444:	3001      	adds	r0, #1
 8005446:	e7f2      	b.n	800542e <memcmp+0x6>

08005448 <memset>:
 8005448:	4402      	add	r2, r0
 800544a:	4603      	mov	r3, r0
 800544c:	4293      	cmp	r3, r2
 800544e:	d100      	bne.n	8005452 <memset+0xa>
 8005450:	4770      	bx	lr
 8005452:	f803 1b01 	strb.w	r1, [r3], #1
 8005456:	e7f9      	b.n	800544c <memset+0x4>

08005458 <__libc_init_array>:
 8005458:	b570      	push	{r4, r5, r6, lr}
 800545a:	4d0d      	ldr	r5, [pc, #52]	@ (8005490 <__libc_init_array+0x38>)
 800545c:	4c0d      	ldr	r4, [pc, #52]	@ (8005494 <__libc_init_array+0x3c>)
 800545e:	1b64      	subs	r4, r4, r5
 8005460:	10a4      	asrs	r4, r4, #2
 8005462:	2600      	movs	r6, #0
 8005464:	42a6      	cmp	r6, r4
 8005466:	d109      	bne.n	800547c <__libc_init_array+0x24>
 8005468:	4d0b      	ldr	r5, [pc, #44]	@ (8005498 <__libc_init_array+0x40>)
 800546a:	4c0c      	ldr	r4, [pc, #48]	@ (800549c <__libc_init_array+0x44>)
 800546c:	f000 f818 	bl	80054a0 <_init>
 8005470:	1b64      	subs	r4, r4, r5
 8005472:	10a4      	asrs	r4, r4, #2
 8005474:	2600      	movs	r6, #0
 8005476:	42a6      	cmp	r6, r4
 8005478:	d105      	bne.n	8005486 <__libc_init_array+0x2e>
 800547a:	bd70      	pop	{r4, r5, r6, pc}
 800547c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005480:	4798      	blx	r3
 8005482:	3601      	adds	r6, #1
 8005484:	e7ee      	b.n	8005464 <__libc_init_array+0xc>
 8005486:	f855 3b04 	ldr.w	r3, [r5], #4
 800548a:	4798      	blx	r3
 800548c:	3601      	adds	r6, #1
 800548e:	e7f2      	b.n	8005476 <__libc_init_array+0x1e>
 8005490:	08005b38 	.word	0x08005b38
 8005494:	08005b38 	.word	0x08005b38
 8005498:	08005b38 	.word	0x08005b38
 800549c:	08005b3c 	.word	0x08005b3c

080054a0 <_init>:
 80054a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054a2:	bf00      	nop
 80054a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054a6:	bc08      	pop	{r3}
 80054a8:	469e      	mov	lr, r3
 80054aa:	4770      	bx	lr

080054ac <_fini>:
 80054ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ae:	bf00      	nop
 80054b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054b2:	bc08      	pop	{r3}
 80054b4:	469e      	mov	lr, r3
 80054b6:	4770      	bx	lr
